import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const e="/mynotes/assets/文件的读写原理-gvnD3Wgz.png",p={},o=t('<h1 id="文件的读写与目录操作" tabindex="-1"><a class="header-anchor" href="#文件的读写与目录操作" aria-hidden="true">#</a> 文件的读写与目录操作</h1><h2 id="文件的读写" tabindex="-1"><a class="header-anchor" href="#文件的读写" aria-hidden="true">#</a> 文件的读写</h2><p><strong>常见的字符编码格式</strong>：</p><p><em><strong>1&gt;</strong></em> Python 的解释器使用的是 <code>Unicode</code>（内存）</p><p><em><strong>2&gt;</strong></em> <code>.py</code> 文件在磁盘上使用 <code>UTF-8</code> 存储（外存）</p><h3 id="文件的读写原理" tabindex="-1"><a class="header-anchor" href="#文件的读写原理" aria-hidden="true">#</a> 文件的读写原理</h3><p>文件的读写俗称 <em><strong>IO 操作</strong></em></p><p><strong>文件读写操作流程</strong>： Python 操作文件 → 打开或新建文件 → 读、写文件 → 关闭资源</p><p><strong>操作原理</strong>：</p><img src="'+e+`" alt="文件的读写原理" style="zoom:50%;"><h3 id="文件的读写操作" tabindex="-1"><a class="header-anchor" href="#文件的读写操作" aria-hidden="true">#</a> 文件的读写操作</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 语法结构：</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span>

<span class="token comment"># 示例：</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用的文件打开模式" tabindex="-1"><a class="header-anchor" href="#常用的文件打开模式" aria-hidden="true">#</a> 常用的文件打开模式</h3><p><strong>文件的类型</strong>：</p><p>按文件中数据的组织形式，文件分为以下两大类：</p><p><em><strong>1&gt;</strong></em> <strong>文本文件</strong>：存储的是普通<em><strong>字符</strong></em>文本，默认为 <code>unicode</code> 字符集，可以使用记事本程序打开</p><p><em><strong>2&gt;</strong></em> <strong>二进制文件</strong>：把数据内容用<em><strong>字节</strong></em>进行存储，无法用记事本打开，必须使用专用的软件打开，举例：<code>mp3</code> 音频文件、<code>jpg</code> 图片、<code>doc</code> 文档等</p><table><thead><tr><th style="text-align:center;"><strong>打开模式</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>r</code></td><td style="text-align:left;">以只读模式打开文件，文件的指针将会放在文件的开头</td></tr><tr><td style="text-align:center;"><code>w</code></td><td style="text-align:left;">以只写模式打开文件，如果文件不存在则创建<br>存在则覆盖原有内容，文件指针在文件的开头</td></tr><tr><td style="text-align:center;"><code>a</code></td><td style="text-align:left;">以追加模式打开文件，如果文件不存在则创建，文件指针在文件开头<br>文件存在则在文件末尾追加内容，文件指针在原文件末尾</td></tr><tr><td style="text-align:center;"><code>b</code></td><td style="text-align:left;">以二进制方式打开文件，不能单独使用，需要与其它模式一起使用，<code>rb</code> 或 <code>wb</code></td></tr><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:left;">以读写方式打开文件，不能单独使用，需要与其它模式一起使用，<code>a+</code></td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;qwert&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a+&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;dddd&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打开和读写扩展" tabindex="-1"><a class="header-anchor" href="#打开和读写扩展" aria-hidden="true">#</a> 打开和读写扩展</h3><p><em><strong>1&gt;</strong></em> 使用 <code>w</code> 模式打开文件的一刹那，会直接清空原有内容，所以想要修改文件内容的话，需要先把文件内容读取出来，相当于先复制保存一下，然后再重新打开文件重写，原文件的内容可以在读取的内容中获取</p><p><em><strong>2&gt;</strong></em> 使用 <code>w</code> 模式打开文件的时候，只会清空原有内容，本次打开即使进行多次写入，后面写入的内容也不会把前面的内容覆盖</p><p><em><strong>3&gt;</strong></em> <strong>在一次打开文件中同时进行读写操作，有以下几种情况</strong>：</p><p><strong><code>w+</code> 模式下</strong>：读的操作无论是在前、在后、在中间，都读取不到内容，写的操作可以正常执行</p><p><strong><code>r+</code> 模式下</strong>：</p><p>读的操作在前：会正常读取输出原有内容，写入的内容会追加在原有内容后面</p><p>读的操作在后：写入的内容会根据长度覆盖原有内容，读取的内容只能是后面未被覆盖的内容</p><p><strong><code>a+</code> 模式下</strong>：</p><p>读的操作在前：会正常读取输出原有内容，写入的内容会追加在原有内容后面</p><p>读的操作在中间或后面：写入的内容会在原有内容后面追加，而无法读取到内容</p><p><em><strong>方便理解</strong></em>：写入操作比较霸道，先进行写入时，会跟据写入的位置和内容长度固定住文件中的部分内容，不让其他操作对固定住的内容起作用</p><h3 id="文件对象的常用方法" tabindex="-1"><a class="header-anchor" href="#文件对象的常用方法" aria-hidden="true">#</a> 文件对象的常用方法</h3><table><thead><tr><th style="text-align:left;"><strong>方法名</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>read(size)</code></td><td style="text-align:left;">从文件中读取 <code>size</code> 个字节或字符的内容并返回<br>若省略 <code>size</code>，则读取到文件末尾，即一次读取文件所有内容，大文件可能会导致内存爆满的问题</td></tr><tr><td style="text-align:left;"><code>readline()</code></td><td style="text-align:left;">从文本文件中读取一行内容，常配合循环使用</td></tr><tr><td style="text-align:left;"><code>readlines()</code></td><td style="text-align:left;">把文本文件中每一行都作为独立的字符串对象，并将这些对象放入列表返回</td></tr><tr><td style="text-align:left;"><code>write(str)</code></td><td style="text-align:left;">将字符串 <code>str</code> 的内容写入文件</td></tr><tr><td style="text-align:left;"><code>writelines(s_list)</code></td><td style="text-align:left;">将字符串列表 <code>s_list</code> 写入文本文件，不添加换行符</td></tr><tr><td style="text-align:left;"><code>seek(offset[, whence])</code></td><td style="text-align:left;">把文件指针移动到新的位置<br><code>offset</code>：表示相对于 <code>whence</code> 的位置<br><code>offset</code>：为正往结束方向移动，为负往开始方向移动<br><code>whence</code>：不同的值代表不同的含义<br><code>0</code>：从文件头开始计算（默认值）<br><code>1</code>：从当前位置开始计算<br><code>2</code>：从文件尾开始计算</td></tr><tr><td style="text-align:left;"><code>tell()</code></td><td style="text-align:left;">返回文件指针的当前位置</td></tr><tr><td style="text-align:left;"><code>flush()</code></td><td style="text-align:left;">把缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td style="text-align:left;"><code>close()</code></td><td style="text-align:left;">把缓冲区的内容写入文件，同时关闭文件，释放文件对象的相关资源</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 读取</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># print(file.read(3))</span>
<span class="token comment"># print(file.readline())</span>
<span class="token comment"># print(file.readlines())</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 写入</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;b.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;中国&#39;</span><span class="token punctuation">)</span>
lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">]</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># seek() 和 tell()</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># flush()</span>
<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;c.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="上下文管理器" tabindex="-1"><a class="header-anchor" href="#上下文管理器" aria-hidden="true">#</a> 上下文管理器</h2><p><code>with</code> 语句可以自动管理上下文资源，不论什么原因跳出 <code>with</code> 块，都能确保文件正确的关闭，以此来达到释放资源的目的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 with 上下文管理器打开文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 自定义上下文管理器</span>
<span class="token comment"># MyContentMgr 类实现了 __enter__() 和 __exit__() 这两个特殊方法</span>
<span class="token comment"># 则称这个类遵守了上下文管理器协议</span>
<span class="token comment"># 这个类的实例对象，称为上下文管理器</span>
<span class="token keyword">class</span> <span class="token class-name">MyContentMgr</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;enter 方法被调用执行了&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;exit 方法被调用执行了&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;show 方法被调用执行了&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 调用自定义的上下文管理器</span>
<span class="token keyword">with</span> MyContentMgr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>  <span class="token comment"># 相当于 file = MyContentMgr()</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># with 上下文管理器的嵌套使用</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> scr_file<span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;copya.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> target_file<span class="token punctuation">:</span>
        target_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>scr_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="目录操作" tabindex="-1"><a class="header-anchor" href="#目录操作" aria-hidden="true">#</a> 目录操作</h2><h3 id="os-模块的常用函数" tabindex="-1"><a class="header-anchor" href="#os-模块的常用函数" aria-hidden="true">#</a> os 模块的常用函数</h3><p><code>os</code> 模块是 Python 内置的与操作系统和文件系统相关的模块，该模块中语句的执行结果通常与操作系统有关，在不同的操作系统上运行，得到的结果可能不一样</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token comment"># os 模块打开应用程序</span>
os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;notepad.exe&#39;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;calc.exe&#39;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>startfile<span class="token punctuation">(</span><span class="token string">&#39;D:\\\\软件安装\\\\WeChat\\\\WeChat.exe&#39;</span><span class="token punctuation">)</span>

os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 获取当前设置的用户名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="os-模块操作目录" tabindex="-1"><a class="header-anchor" href="#os-模块操作目录" aria-hidden="true">#</a> os 模块操作目录</h3><p>注意区分绝对路径与相对路径</p><table><thead><tr><th style="text-align:left;"><strong>函数</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>getcwd()</code></td><td style="text-align:left;">返回当前的工作目录</td></tr><tr><td style="text-align:left;"><code>listdir(path)</code></td><td style="text-align:left;">返回指定路径下的文件和目录信息</td></tr><tr><td style="text-align:left;"><code>mkdir(path[,mode])</code></td><td style="text-align:left;">创建目录</td></tr><tr><td style="text-align:left;"><code>makedirs(path1/path2...[,mode])</code></td><td style="text-align:left;">创建多级目录</td></tr><tr><td style="text-align:left;"><code>rmdir(path)</code></td><td style="text-align:left;">删除目录</td></tr><tr><td style="text-align:left;"><code>removedirs(path1/path2...)</code></td><td style="text-align:left;">删除多级目录</td></tr><tr><td style="text-align:left;"><code>chdir(path)</code></td><td style="text-align:left;">将 <code>path</code> 设置为当前工作目录</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取当前所在目录</span>

files1 <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 获取当前所在目录下的所有文件和文件夹</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>files1<span class="token punctuation">)</span>
files2 <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取指定目录下的所有文件和文件夹，可以是相对路径或绝对路径</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>files2<span class="token punctuation">)</span>

os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&#39;newdir&#39;</span><span class="token punctuation">)</span>      <span class="token comment"># 新建目录</span>
os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">&#39;a/b/c&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 新建多级目录</span>
os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">&#39;newdir&#39;</span><span class="token punctuation">)</span>      <span class="token comment"># 删除目录</span>
os<span class="token punctuation">.</span>removedirs<span class="token punctuation">(</span><span class="token string">&#39;a/b/c&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 删除多级目录</span>

os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">&#39;./test01&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 将指定路径设置为工作目录</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="os-path-模块操作目录" tabindex="-1"><a class="header-anchor" href="#os-path-模块操作目录" aria-hidden="true">#</a> os.path 模块操作目录</h3><p>注意区分绝对路径与相对路径</p><table><thead><tr><th style="text-align:left;"><strong>函数</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>abspath(path)</code></td><td style="text-align:left;">获取文件或目录的绝对路径</td></tr><tr><td style="text-align:left;"><code>exists(path)</code></td><td style="text-align:left;">判断文件或目录是否存在</td></tr><tr><td style="text-align:left;"><code>join(path, name)</code></td><td style="text-align:left;">将目录与目录或者文件名拼接起来</td></tr><tr><td style="text-align:left;"><code>splitext()</code></td><td style="text-align:left;">分离文件名和扩展名，返回一个元组</td></tr><tr><td style="text-align:left;"><code>basename(path)</code></td><td style="text-align:left;">从一个路径中提取文件名（包括扩展名）</td></tr><tr><td style="text-align:left;"><code>dirname(path)</code></td><td style="text-align:left;">从一个路径中提取文件路径（不包括文件名）</td></tr><tr><td style="text-align:left;"><code>isdir(path)</code></td><td style="text-align:left;">判断是否是真实存在的文件夹</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os<span class="token punctuation">.</span>path

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;demo.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取绝对路径</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&#39;demo.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 判断文件或目录是否存在</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&#39;demo.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">r&#39;D:\\test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;demo1.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 路径拼接</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">&#39;demo01.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># (&#39;demo01&#39;, &#39;.py&#39;)，分离文件名和扩展名</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span><span class="token string">&#39;D:/test/demo.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># demo.py，提取文件名（包括扩展名）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span><span class="token string">&#39;D:/test/demo.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># D:/test，提取文件路径（不包括文件名）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">&#39;D:/test/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># False，判断是否是真实存在的文件夹</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","16_文件的读写与目录操作.html.vue"]]);export{k as default};
