import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const t={},p=e(`<h1 id="flask-视图" tabindex="-1"><a class="header-anchor" href="#flask-视图" aria-hidden="true">#</a> Flask-视图</h1><h2 id="认识flask" tabindex="-1"><a class="header-anchor" href="#认识flask" aria-hidden="true">#</a> 认识Flask</h2><p>Flask本身相当于一个内核，其他几乎所有的功能都要用到扩展（邮件扩展Flask-Mail，用户认证Flask-Login），都需要用第三方的扩展来实现。比如可以用Flask-extension加入ORM、窗体验证工具，文件上传、身份验证等。Flask没有默认使用的数据库，你可以选择MySQL，也可以用NoSQL。其WSGI工具箱采用Werkzeug（路由模块），模板引擎则使用Jinja2。可以说Flask框架的核心就是Werkzeug和Jinja2</p><p>英文文档：https://flask.palletsprojects.com/en/0.12.x/</p><p>中文文档：http://docs.jinkan.org/docs/flask/</p><h3 id="flask扩展包" tabindex="-1"><a class="header-anchor" href="#flask扩展包" aria-hidden="true">#</a> Flask扩展包</h3><p>Flask-SQLalchemy：操作数据库</p><p>Flask-migrate：管理迁移数据库</p><p>Flask-Mail：邮件</p><p>Flask-WTF：表单</p><p>Flask-script：插入脚本</p><p>Flask-Login：认证用户状态</p><p>Flask-RESTful：开发REST API的工具</p><p>Flask-Bootstrap：集成前端Twitter Bootstrap框架</p><p>Flask-Moment：本地化日期和时间</p><h2 id="flask创建app对象" tabindex="-1"><a class="header-anchor" href="#flask创建app对象" aria-hidden="true">#</a> Flask创建app对象</h2><h3 id="flask的使用演示" tabindex="-1"><a class="header-anchor" href="#flask的使用演示" aria-hidden="true">#</a> Flask的使用演示</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

<span class="token comment"># 创建flask的应用对象，__name__表示的是当前模块的名字，、</span>
<span class="token comment"># 模块名，flask以这个模块所有的目录为总目录，默认这个目录中的static为静态目录，templates为模板目录</span>
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment"># app = Flask(&#39;__main__&#39;)  # 和上面效果相同</span>
<span class="token comment"># app = Flask(&#39;abcdefgh&#39;)  # 当模块名不存在时Flask会自动将当前模块作为启动模块</span>

<span class="token comment"># 使用应用对象的route()方法做装饰器，参数为视图函数对应的url，</span>
<span class="token comment"># 作用是将路由映射到视图函数index</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;定义视图函数&quot;&quot;&quot;</span>
    <span class="token comment"># 直接返回内容到前端页面</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello flask&#39;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用应用对象的run()方法启动Web服务器</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>Flask程序的启动</strong></em>：直接运行此程序即可</p><h3 id="初始化参数" tabindex="-1"><a class="header-anchor" href="#初始化参数" aria-hidden="true">#</a> 初始化参数</h3><p><code>import_name</code>：导入路径（寻找静态目录与模板目录位置的参数）</p><p><code>static_url_path</code>：访问静态资源的<code>url</code>前缀，默认值是<code>static</code></p><p><code>static_folder</code>：静态文件存放的目录，默认值是<code>static</code></p><p><code>template_folder</code>：模板文件存放的目录，默认值是<code>templates</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>
    __name__<span class="token punctuation">,</span>  <span class="token comment"># 导入路径（寻找静态目录与模板目录位置的参数）</span>
    static_url_path<span class="token operator">=</span><span class="token string">&#39;/python&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 访问静态资源的url前缀，默认值是static</span>
    static_folder<span class="token operator">=</span><span class="token string">&#39;static&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 静态文件存放的目录，默认值是static</span>
    template_folder<span class="token operator">=</span><span class="token string">&#39;templates&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 模板文件存放的目录，默认值是templates</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置参数的使用" tabindex="-1"><a class="header-anchor" href="#配置参数的使用" aria-hidden="true">#</a> 配置参数的使用</h3><p><em><strong>1&gt;</strong></em> 从文件中导入配置项：<code>app.config.from_pyfile(&#39;config.cfg&#39;)</code></p><p><em><strong>2&gt;</strong></em> 从对象中导入配置项：<code>app.config.from_object(Config)</code></p><p><em><strong>3&gt;</strong></em> 直接操作<code>config</code>的字典对象：<code>app.config[&#39;DEBUG&#39;] = True</code></p><h3 id="读取配置参数" tabindex="-1"><a class="header-anchor" href="#读取配置参数" aria-hidden="true">#</a> 读取配置参数</h3><p>直接从全局对象<code>app</code>的<code>config</code>字典中取值：<code>app.config.get(&#39;TEST_ATTR&#39;)</code></p><p>通过<code>current_app</code>获取参数，使用方式和<code>app</code>相同</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> current_app
current_app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;TEST_ATTR&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="app-run-的参数" tabindex="-1"><a class="header-anchor" href="#app-run-的参数" aria-hidden="true">#</a> app.run()的参数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 参数为默认值，只可以通过127.0.0.1访问</span>
app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;192.168.xx.xxx&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment"># 只可以通过192.168.xx.xxx访问</span>
app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment"># 使用127.0.0.1和192.168.xx.xxx均可访问</span>
app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># debug参数可以在启动时设置，其他参数不行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>通过<code>url_map</code>属性查看所有的路由信息：<code>app.url_map</code></p><h3 id="设置请求方式" tabindex="-1"><a class="header-anchor" href="#设置请求方式" aria-hidden="true">#</a> 设置请求方式</h3><p>视图函数默认的请求方式为：<code>OPTIONS</code>、<code>HEAD</code>和<code>GET</code>，可以在<code>route()</code>装饰器中通过<code>methods</code>参数设置请求方式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/post_only&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">post_only</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">return</span> <span class="token string">&#39;post only page&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同一url对应不同视图函数" tabindex="-1"><a class="header-anchor" href="#同一url对应不同视图函数" aria-hidden="true">#</a> 同一url对应不同视图函数</h3><p>可以使用不同的请求方式进行区分，如果请求方式也相同，则上面的视图函数会覆盖下面的视图函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/hello&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">return</span> <span class="token string">&#39;hello 1&#39;</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">return</span> <span class="token string">&#39;hello 2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同一视图函数对应多个url" tabindex="-1"><a class="header-anchor" href="#同一视图函数对应多个url" aria-hidden="true">#</a> 同一视图函数对应多个url</h3><p>多次使用<code>route()</code>装饰器对视图函数进行装饰即可</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/hi1&#39;</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/hi2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">return</span> <span class="token string">&#39;hi page&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url反向解析" tabindex="-1"><a class="header-anchor" href="#url反向解析" aria-hidden="true">#</a> url反向解析</h3><p>使用<code>redirect</code>和<code>url_for</code>函数实现<code>url</code>的反向解析， <code>url_for</code>函数可以通过视图函数的名字找到其对应的<code>url</code>路径</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
url <span class="token operator">=</span> url_for<span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态路由-转换器" tabindex="-1"><a class="header-anchor" href="#动态路由-转换器" aria-hidden="true">#</a> 动态路由（转换器）</h3><p>在Flask中可以通过转换器提取<code>url</code>中的参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 路由传递的参数默认当做string处理，尖括号中冒号后面的参数名可以自定义</span>
<span class="token comment"># @app.route(&#39;/goods/&lt;int:goods_id&gt;&#39;)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/goods/&lt;goods_id&gt;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 不加转换器类型，默认是字符串规则（除了\`/\`）</span>
<span class="token keyword">def</span> <span class="token function">goods_detail</span><span class="token punctuation">(</span>goods_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;goods detail page %s&#39;</span> <span class="token operator">%</span> goods_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换器的种类有：</p><table><thead><tr><th>int</th><th>接受整数</th></tr></thead><tbody><tr><td>float</td><td>接受浮点数</td></tr><tr><td>path</td><td>和默认的相似，但也可以接受斜线</td></tr></tbody></table><ul><li><p><strong>自定义转换器</strong></p><p>通过自定义一个继承自<code>werkzeug.routing.BaseConverter</code>的类可以实现自定义转换器</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 1.定义转换器</span>
<span class="token keyword">class</span> <span class="token class-name">RegexConverter</span><span class="token punctuation">(</span>BaseConverter<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url_map<span class="token punctuation">,</span> regex<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 调用父类的初始化方法 </span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>url_map<span class="token punctuation">)</span>
        <span class="token comment"># 将正则表达式的参数保存到对象的regex属性中，flask会使用这个属性进行路由的正则匹配</span>
        self<span class="token punctuation">.</span>regex <span class="token operator">=</span> regex

<span class="token comment"># 2.将自定义的转换器添加到flask的应用中</span>
app<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>converters<span class="token punctuation">[</span><span class="token string">&#39;re&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> RegexConverter

<span class="token comment"># 3.使用自定义的转换器，传入正则表达式</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/send/&lt;re(r&quot;1[345789]\\d{9}&quot;):mobile&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_sms</span><span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;send sms to %s&#39;</span> <span class="token operator">%</span> mobile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="获取请求参数" tabindex="-1"><a class="header-anchor" href="#获取请求参数" aria-hidden="true">#</a> 获取请求参数</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>request</code>对象中保存了一次<code>HTTP</code>请求的一切信息，<code>request</code>常用的属性如下：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th><th><strong>类型</strong></th></tr></thead><tbody><tr><td>data</td><td>记录请求体中的数据，并转换为字符串</td><td>*</td></tr><tr><td>form</td><td>记录请求中的表单数据</td><td>MultiDict</td></tr><tr><td>args</td><td>记录请求中的查询字符串</td><td>MultiDict</td></tr><tr><td>cookies</td><td>记录请求中的cookie信息</td><td>Dict</td></tr><tr><td>headers</td><td>记录请求中的报文头</td><td>EnvironHeaders</td></tr><tr><td>method</td><td>记录请求使用的HTTP方法</td><td>GET/POST</td></tr><tr><td>url</td><td>记录请求的url地址</td><td>string</td></tr><tr><td>files</td><td>记录请求上传的文件</td><td>*</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> request

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用request.form可以直接提取请求体中表单格式的数据，是一个类字典的对象</span>
    <span class="token comment"># 通过get()方法只能拿到多个同名参数的第一个</span>
    name <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
    age <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># 通过getlist()方法可以获取多个同名的参数，返回一个字典</span>
    name_list <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># request.data可以获取请求体中的数据</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;request.data：%s&#39;</span> <span class="token operator">%</span> request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token comment"># args可以提取url中的查询字符串（\`?\`后面的）</span>
    city <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello name=%s, age=%s, city=%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h3><p>使用<code>request</code>对象的<code>files</code>属性可以获取到上传的文件，同时可以使用文件对象的<code>save()</code>方法将文件保存下来</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> request

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/upload&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    file_obj <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;pic&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> file_obj <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;未上传文件&#39;</span>
    file_obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;demo.png&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 使用上传的文件对象的save()方法保存文件</span>
    <span class="token keyword">return</span> <span class="token string">&#39;上传成功！&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="abort-函数" tabindex="-1"><a class="header-anchor" href="#abort-函数" aria-hidden="true">#</a> abort()函数</h2><p>使用<code>abort()</code>函数可以立即终止视图函数的执行，并返回给前端特定的信息。常用于返回标准状态码对应的页面或者响应体信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> abort<span class="token punctuation">,</span> Response

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    pwd <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">&#39;zhangsan&#39;</span> <span class="token keyword">or</span> pwd <span class="token operator">!=</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># 1.返回状态码对应的页面，必须是标准的HTTP状态码</span>
        <span class="token comment"># abort(404)</span>

        <span class="token comment"># 2.返回响应体信息</span>
        abort<span class="token punctuation">(</span>Response<span class="token punctuation">(</span><span class="token string">&#39;登录失败！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;登录成功！&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义异常处理方法" tabindex="-1"><a class="header-anchor" href="#自定义异常处理方法" aria-hidden="true">#</a> 自定义异常处理方法</h3><p>通过自定义异常处理方法可以在前端页面上显示自定义的异常提示信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 在出现404错误时，将会使用此异常处理方法</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">handle_404_error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 这个函数的返回值会是出现404错误时前端显示的结果</span>
    <span class="token keyword">return</span> <span class="token string">&#39;出现了404错误，错误信息：%s&#39;</span> <span class="token operator">%</span> err
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义响应信息" tabindex="-1"><a class="header-anchor" href="#自定义响应信息" aria-hidden="true">#</a> 自定义响应信息</h2><h3 id="使用元组" tabindex="-1"><a class="header-anchor" href="#使用元组" aria-hidden="true">#</a> 使用元组</h3><p>使用元组设置自定义的响应信息，元组的构成为：<code>(response, status, headers)</code></p><p>响应头<code>headers</code>可以使用列表或字典的方式进行设置</p><p>状态码<code>status</code>可以是非标准的，同时可以使用字符串设置说明信息</p><p>响应头<code>headers</code>可以不写，但是状态码不能单独省略，即可以从后向前省略，不能从中间省略</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 响应头headers可以使用列表或字典的方式进行设置</span>
    <span class="token comment"># return &#39;index page&#39;, 400, [(&#39;study&#39;, &#39;python&#39;), (&#39;city&#39;, &#39;beijing&#39;)]</span>
    <span class="token comment"># return &#39;index page&#39;, 400, {&#39;study1&#39;: &#39;python1&#39;, &#39;city1&#39;: &#39;beijing1&#39;}</span>

    <span class="token comment"># 状态码status可以是非标准的，同时可以使用字符串设置说明信息</span>
    <span class="token comment"># return &#39;index page&#39;, 666, {&#39;study1&#39;: &#39;python1&#39;, &#39;city1&#39;: &#39;beijing1&#39;}</span>
    <span class="token comment"># return &#39;index page&#39;, &#39;666 python study&#39;, {&#39;study1&#39;: &#39;python1&#39;, &#39;city1&#39;: &#39;beijing1&#39;}</span>

    <span class="token comment"># 响应头headers可以不写，但是状态码不能单独省略，即可以从后向前省略，不能从中间省略</span>
    <span class="token keyword">return</span> <span class="token string">&#39;index page&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;666 python study&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用make-response" tabindex="-1"><a class="header-anchor" href="#使用make-response" aria-hidden="true">#</a> 使用make_response</h3><p>使用<code>make_response</code>设置响应信息需要从<code>flask</code>中导入<code>make_response</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> make_response

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">&#39;index page 2&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置响应体</span>
    resp<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;999 python&#39;</span>  <span class="token comment"># 设置状态码</span>
    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;shanghai&#39;</span>  <span class="token comment"># 设置响应头</span>
    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span>  <span class="token comment"># 设置响应头</span>
    <span class="token keyword">return</span> resp  <span class="token comment"># 返回响应信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回json数据" tabindex="-1"><a class="header-anchor" href="#返回json数据" aria-hidden="true">#</a> 返回json数据</h3><p>从<code>flask</code>中导入<code>jsonify</code>，<code>jsonify</code>可以将字典转化为<code>json</code>数据，并将响应头中的<code>Content-Type</code>的值设置为<code>application/json</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;libai&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span>
    <span class="token comment"># return jsonify(data)  # 方式一</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>city<span class="token operator">=</span><span class="token string">&#39;beijing&#39;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;dufu&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 方式二</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cookie和session" tabindex="-1"><a class="header-anchor" href="#cookie和session" aria-hidden="true">#</a> cookie和session</h2><h3 id="cookie的使用" tabindex="-1"><a class="header-anchor" href="#cookie的使用" aria-hidden="true">#</a> cookie的使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> make_response<span class="token punctuation">,</span> request

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment"># 设置cookie</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/set_cookie&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">set_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置cookie，默认有效期是临时cookie，浏览器关闭就失效</span>
    resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">&#39;city1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shanghai&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置过期时间，单位秒</span>
    resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">&#39;city2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;luoyang&#39;</span><span class="token punctuation">,</span> max_age<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> resp

<span class="token comment"># 获取cookie</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/get_cookie&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;city1&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> c

<span class="token comment"># 删除cookie</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/del_cookie&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">del_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">&#39;del success&#39;</span><span class="token punctuation">)</span>
    resp<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">&#39;city1&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> resp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session的使用" tabindex="-1"><a class="header-anchor" href="#session的使用" aria-hidden="true">#</a> session的使用</h3><p><code>flask</code>中使用<code>session</code>需要设置秘钥字符串，并且默认的是将<code>session</code>保存在<code>cookie</code>中，可以通过另外的设置将<code>session</code>保存到数据库中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment"># 设置秘钥字符串，用于加密和防篡改</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SECRET_KEY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;alknfhk89adfwer234sd2&#39;</span>

<span class="token comment"># 设置session，flask默认把session保存到cookie中</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    session<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;python&#39;</span>
    session<span class="token punctuation">[</span><span class="token string">&#39;tel&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;18612345678&#39;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;login success&#39;</span>

<span class="token comment"># 获取session</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello %s&#39;</span> <span class="token operator">%</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="上下文对象" tabindex="-1"><a class="header-anchor" href="#上下文对象" aria-hidden="true">#</a> 上下文对象</h2><p><strong>请求上下文(request context)</strong>： <code>request</code>和<code>session</code>都属于请求上下文对象</p><p><strong>应用上下文(application context)</strong>：<code>current_app</code>和<code>g</code>都属于应用上下文对象</p><p><code>current_app</code>：表示当前运行的程序文件的程序实例</p><p><code>g</code>：处理请求时用于临时存储的对象，每次请求都会重设这个变量</p><h2 id="请求钩子" tabindex="-1"><a class="header-anchor" href="#请求钩子" aria-hidden="true">#</a> 请求钩子</h2><p>请求钩子是通过装饰器的形式实现的，Flask支持如下四种请求钩子：</p><p><em><strong>1&gt;</strong></em> <code>@app.before_first_request</code>：在处理第一次请求之前被执行</p><p><em><strong>2&gt;</strong></em> <code>@app.before_request</code>：在每次处理请求之前都被执行</p><p><em><strong>3&gt;</strong></em> <code>@app.after_request</code>：在每次请求（视图函数处理）之后都被执行，前提是视图函数不出现异常</p><p><em><strong>4&gt;</strong></em> <code>@app.teardown_request</code>：在每次请求（视图函数处理）之后都被执行，无论视图函数是否出现异常都会执行；当出现异常时，只有在非调试模式时才会被执行</p><p><em><strong>注</strong></em>：<code>@app.after_request</code>和<code>@app.teardown_request</code>装饰的函数需要一个参数接收请求处理之后返回的结果， 并且在函数结束时将这个结果返回回去</p><h2 id="flask-script扩展命令行" tabindex="-1"><a class="header-anchor" href="#flask-script扩展命令行" aria-hidden="true">#</a> Flask-Script扩展命令行</h2><p><strong>安装</strong>：<code>pip install Flask-Script</code></p><p>通过使用Flask-Script扩展，可以实现在终端中启动Flask程序，通过命令行的方式传入参数</p><p>如下面的代码就可以在终端中通过<code>python 文件名 runserver</code>命令进行启动</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager  <span class="token comment"># 启动命令的管理类</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment"># 创建Manager管理类的对象</span>
manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;index page -manager&#39;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通过管理对象启动Flask</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,105),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","01_Flask-视图.html.vue"]]);export{u as default};
