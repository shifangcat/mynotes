import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const t="/mynotes/assets/文件读取流程-r0tnSYeQ.png",o={},p=e('<h1 id="tensorflow的io操作" tabindex="-1"><a class="header-anchor" href="#tensorflow的io操作" aria-hidden="true">#</a> Tensorflow的IO操作</h1><h2 id="队列和线程" tabindex="-1"><a class="header-anchor" href="#队列和线程" aria-hidden="true">#</a> 队列和线程</h2><h3 id="tensorflow队列" tabindex="-1"><a class="header-anchor" href="#tensorflow队列" aria-hidden="true">#</a> Tensorflow队列</h3><p><code>tf.FIFOQueue</code>：先进先出的队列，按顺序出队列</p><p><code>tf.RandomShuffleQueue</code>：随机出队列</p><ul><li><p><strong>先进先出队列的API</strong></p><p><code>tf.FIFOQueue(capacity, dtypes, name=None)</code></p><blockquote><p><code>capacity</code>：int，队列中存储元素的数量上限</p><p><code>dtypes</code>：DType对象的列表，dtypes的长度必须等于每个队列元素的张量数</p></blockquote><ul><li><p><strong>常用方法</strong>：</p><p><code>dequeue(name=None)</code>：从队列中取出一个元素</p><p><code>enqueue(vals, name=None)</code>：向队列中添加一个元素</p><p><code>enqueue_many(vals, name=None)</code>：向队列中添加0个或多个元素</p><p><code>size(name=None)</code>：获取队列中元素的数量</p></li></ul></li></ul><h3 id="队列管理器" tabindex="-1"><a class="header-anchor" href="#队列管理器" aria-hidden="true">#</a> 队列管理器</h3><p><code>tf.train.QueueRunner(queue, enqueue_ops=None)</code></p><blockquote><p><code>queue</code>：指定子线程操作的队列</p><p><code>enqueue_ops</code>：值为<code>[]*int</code>，列表中是子线程需要做的操作，int是开启的子线程的数量</p></blockquote><ul><li><p><strong>常用方法</strong>：</p><p><code>create_threads(sess, coord=None, start=False)</code></p><blockquote><p>创建线程来运行给定Session的操作</p><p><code>coord</code>：指定线程协调器</p><p><code>start</code>：bool，为True表示自动启动线程；为False则需要调用<code>start()</code>方法来启动线程（默认为False）</p></blockquote></li></ul><h3 id="线程协调器" tabindex="-1"><a class="header-anchor" href="#线程协调器" aria-hidden="true">#</a> 线程协调器</h3><p><strong>作用</strong>：使用一个简单的机制来协调一组线程的终止</p><ul><li><p><strong>线程协调器的API</strong></p><p><code>tf.train.Coordinator()</code></p><ul><li><p><strong>常用方法</strong>：</p><p><code>request_stop()</code>：请求线程终止</p><p><code>should_stop()</code>：检查是否要求线程终止</p><p><code>join(threads=None, stop_grace_period_secs=120)</code>：等待线程终止</p><blockquote><p><code>threads</code>：指定需要终止的线程</p><p><code>stop_grace_period_secs</code>：调用<code>request_stop()</code>方法后，等待线程终止的时间，单位：秒（默认为120）</p></blockquote></li></ul></li></ul><h2 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h2><h3 id="文件读取流程" tabindex="-1"><a class="header-anchor" href="#文件读取流程" aria-hidden="true">#</a> 文件读取流程</h3><img src="'+t+`" alt="文件读取流程" style="zoom:50%;"><h3 id="文件读取的api" tabindex="-1"><a class="header-anchor" href="#文件读取的api" aria-hidden="true">#</a> 文件读取的API</h3><ul><li><p><strong>构造文件队列的API</strong></p><p><code>tf.train.string_input_producer(string_tensor)</code></p><blockquote><p><code>string_tensor</code>：含有文件名的一阶张量</p><p><strong>返回值</strong>：具有输出字符串的队列</p></blockquote></li><li><p><strong>文件阅读器的API</strong></p><p>不同的文件格式具有不同的阅读器</p><ul><li><p><strong>文本类型的阅读器</strong></p><p><code>tf.TextLineReader(skip_header_lines=None)</code></p><blockquote><p><code>skip_header_lines</code>：从每个文件的开头跳过的行数</p></blockquote></li><li><p><strong>二进制文件的阅读器</strong></p><p><code>tf.FixedLengthRecordReader(record_bytes)</code></p><blockquote><p>要读取每个记录是固定字节数量的二进制文件</p><p><code>record_bytes</code>：int，指定每次读取的字节数</p></blockquote><p>阅读器都有一个共同的读取方法：</p><p><code>reader.read(queue)</code></p><blockquote><p><code>queue</code>：指明需要读取的文件队列</p><p><strong>返回值</strong>：返回一个Tensors元组(key：文件名, value：读取到的内容)</p></blockquote></li></ul></li><li><p><strong>文件解码器的API</strong></p><p>由于从文件中读取的是字符串，需要函数将字符串解析为张量</p><ul><li><p><strong>解码csv文件</strong></p><p><code>tf.decode_csv(records, record_defaults=None, field_delim=None, name=None)</code></p><blockquote><p><code>records</code>：tensor型字符串，每个字符串都是csv中的记录行</p><p><code>record_defaults</code>：指定数据类型并设置默认值，设置的默认值的数据类型即为指定的数据类型</p><p><code>field_delim</code>：分割符，默认为<code>,</code></p></blockquote></li><li><p><strong>解码二进制文件</strong></p><p><code>tf.decode_raw(bytes, out_type, little_endian=None, name=None)</code></p><blockquote><p><code>bytes</code>：tensor型字符串，所有元素具有相同的长度</p></blockquote></li></ul></li></ul><h3 id="开启线程操作" tabindex="-1"><a class="header-anchor" href="#开启线程操作" aria-hidden="true">#</a> 开启线程操作</h3><p><code>tf.train.start_queue_runners(sess=None, coord=None)</code></p><blockquote><p>收集所有图中的队列线程，并启动线程</p><p><code>sess</code>：所在的会话</p><p><code>coord</code>：线程协调器</p><p><strong>返回值</strong>：返回所有线程队列</p></blockquote><h3 id="管道读取批处理" tabindex="-1"><a class="header-anchor" href="#管道读取批处理" aria-hidden="true">#</a> 管道读取批处理</h3><p><code>tf.train.batch(tensors, batch_size, num_threads=1, capacity=32, name=None)</code></p><blockquote><p>读取指定大小（个数）的张量</p><p><code>tensors</code>：可以是包含张量的列表</p><p><code>batch_size</code>：从队列中读取的批处理大小</p><p><code>num_threads</code>：进入队列的线程数（默认为1）</p><p><code>capacity</code>：int，队列中元素的最大数量（默认为32）</p></blockquote><p><code>tf.train.shuffle_batch(tensors, batch_size, capacity, min_after_dequeue, num_threads=1)</code></p><blockquote><p>乱序读取指定大小（个数）的张量</p><p><code>min_after_dequeue</code>：留在队列里的张量个数，能够保持随机打乱</p></blockquote><p><em><strong>注</strong></em>：批处理时每次得到的数据个数只取决于<code>batch_size</code>参数，不以数据总量和队列大小而左右。数量总量少时则会进行重复读取，队列小时则会多次从队列中取值</p><h2 id="图像读取" tabindex="-1"><a class="header-anchor" href="#图像读取" aria-hidden="true">#</a> 图像读取</h2><p><strong>图像数字化三要素</strong>：长度、宽度、通道数（一通道，灰度值；三通道，RGB）</p><p><strong>三要素与张量的关系</strong>：<code>[height, width, channels]</code></p><p>图像读取的流程和其他文件的流程相同，不同的是API</p><h3 id="图像基本操作" tabindex="-1"><a class="header-anchor" href="#图像基本操作" aria-hidden="true">#</a> 图像基本操作</h3><p><strong>目的</strong>：</p><p><em><strong>1&gt;</strong></em> 增加图片数据的统一性</p><p><em><strong>2&gt;</strong></em> 所有图片转换成指定大小</p><p><em><strong>3&gt;</strong></em> 缩小图片数据量，防止增加开销</p><p><strong>操作</strong>：缩放图片大小</p><ul><li><p><strong>图像基本操作的API</strong></p><p><code>tf.image.resize_images(images, size)</code></p><blockquote><p><code>images</code>：4-D张量[batch, height, width, channels]或3-D张量[height, width, channels]的图片数据</p><p><code>size</code>：1-D的int32张量：new_height, new_width，图像的新尺寸</p></blockquote></li></ul><h3 id="图像读取的api" tabindex="-1"><a class="header-anchor" href="#图像读取的api" aria-hidden="true">#</a> 图像读取的API</h3><ul><li><p><strong>图像阅读器的API</strong></p><p><code>tf.WholeFileReader()</code></p><p>同样具有<code>read()</code>方法：</p><p><code>reader.read(queue)</code>，返回一个Tensors元组(key：文件名, value：读取到的内容)</p></li><li><p><strong>图像解码器的API</strong></p><p><code>tf.image.decode_jpeg(contents)</code></p><blockquote><p>将JPEG编码的图像解码为uint8张量</p><p><strong>返回值</strong>：uint8张量，3-D形状[height, width, channels]</p></blockquote><p><code>tf.image.decode_png(contents)</code></p><blockquote><p>将PNG编码的图像解码为uint8或uint16张量</p><p><strong>返回值</strong>：张量类型，3-D形状[height, width, channels]</p></blockquote></li></ul><h2 id="tfrecords文件" tabindex="-1"><a class="header-anchor" href="#tfrecords文件" aria-hidden="true">#</a> TFRecords文件</h2><p>TFRecords是Tensorflow设计的一种内置文件格式，是一种二进制文件，它能更好的利用内存，更方便复制和移动，同时更方便将二进制数据和标签（训练的类别标签）数据存储在同一个文件中</p><p><strong>文件格式</strong>：<code>*.tfrecords</code></p><p><strong>写入文件内容</strong>：Example协议块（类字典格式）</p><h3 id="tfrecords存储" tabindex="-1"><a class="header-anchor" href="#tfrecords存储" aria-hidden="true">#</a> TFRecords存储</h3><ul><li><p><strong>建立TFRecord存储器</strong></p><p><code>tf.python_io.TFRecordWriter(path)</code></p><blockquote><p><code>path</code>：TFRecords文件的路径</p></blockquote><ul><li><p><strong>常用方法</strong>：</p><p><code>write(record)</code>：将字符串记录写入文件</p><blockquote><p><em><strong>注</strong></em>：字符串record为一个序列化的Example实例（<code>example.SerializeToString()</code>）</p></blockquote><p><code>close()</code>：关闭文件存储器</p></li></ul></li><li><p><strong>构造样本的Example协议块</strong></p><ul><li><p><code>tf.train.Example(features=None)</code></p><blockquote><p><code>features</code>：<code>tf.train.Features</code>类型的特征实例</p></blockquote></li><li><p><code>tf.train.Features(feature=None)</code></p><blockquote><p><code>feature</code>：字典数据，key为要保存的名字，value为<code>tf.train.Feature</code>实例</p></blockquote></li><li><p><code>tf.train.Feature(**options)</code></p><blockquote><p><code>**options</code>可用的参数如下：</p><p>bytes_list=tf.train.BytesList(value=[Bytes])</p><p>int64_list=tf.train.Int64List(value=[Value])</p><p>float_list=tf.train.FloatList(value=[value])</p></blockquote></li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">write_to_tfrecords</span><span class="token punctuation">(</span>image_batch<span class="token punctuation">,</span> label_batch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1.建立TFRecords存储器</span>
    writer <span class="token operator">=</span> tf<span class="token punctuation">.</span>python_io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>tfrecords_path<span class="token punctuation">)</span>
    <span class="token comment"># 2.循环将所有样本写入文件，每张图片样本都要构造example协议块</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        image <span class="token operator">=</span> image_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span>
        label <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>label_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># 构造example协议块</span>
        example <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Example<span class="token punctuation">(</span>features<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Features<span class="token punctuation">(</span>feature<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">&#39;image&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>bytes_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&#39;label&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>int64_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Int64List<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 写入单独的example协议块</span>
        writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>example<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 关闭文件存储器</span>
    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tfrecords读取" tabindex="-1"><a class="header-anchor" href="#tfrecords读取" aria-hidden="true">#</a> TFRecords读取</h3><p>同其他文件的读取流程相同，中间需要增加一步解析的过程</p><ul><li><p><strong>TfRecords文件的阅读器</strong></p><p><code>tf.TFRecordReader()</code></p><p>同样具有<code>read()</code>方法：</p><p><code>reader.read(queue)</code>，返回一个Tensors元组(key：文件名, value：读取到的内容)</p></li><li><p><strong>解析TFRecords的example协议块</strong></p><p><code>tf.parse_single_example(serialized, features=None)</code></p><blockquote><p><code>serialized</code>：标量字符串Tensor，一个序列化的Example实例</p><p><code>features</code>：dict，键为读取的名字，值为FixedLenFeature实例</p><p><strong>返回值</strong>：一个键值对组成的字典，键为读取的名字</p></blockquote></li><li><p><code>tf.FixedLenFeature(shape, dtype)</code></p><blockquote><p><code>shape</code>：输入数据的形状，一般设置为空列表</p><p><code>dtype</code>：输入数据类型，与存储进文件的类型要一致（类型只能是float32、int64、string）</p></blockquote></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">read_from_tfrecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1.构造文件队列</span>
    file_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span><span class="token punctuation">[</span>FLAGS<span class="token punctuation">.</span>tfrecords_path<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># 2.构造文件阅读器</span>
    reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TFRecordReader<span class="token punctuation">(</span><span class="token punctuation">)</span>
    key<span class="token punctuation">,</span> value <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>file_queue<span class="token punctuation">)</span>
    <span class="token comment"># 3.解析example协议块</span>
    feature <span class="token operator">=</span> tf<span class="token punctuation">.</span>parse_single_example<span class="token punctuation">(</span>value<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&#39;image&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;label&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment"># 4.解码，如果读取的内容格式是string，则需要解码</span>
    image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>feature<span class="token punctuation">[</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
    label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>feature<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
    <span class="token comment"># 固定图片的形状，方便批处理</span>
    image_reshape <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">[</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> channel<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># 进行批处理</span>
    image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>
        <span class="token punctuation">[</span>image_reshape<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> num_threads<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capacity<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> image_batch<span class="token punctuation">,</span> label_batch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),c=[p];function i(l,u){return s(),a("div",null,c)}const k=n(o,[["render",i],["__file","05_Tensorflow的IO操作.html.vue"]]);export{k as default};
