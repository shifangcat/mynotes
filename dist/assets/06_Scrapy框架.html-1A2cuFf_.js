import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const p="/mynotes/assets/Scrapy框架架构图-fyRu17Vq.png",t={},o=e('<h1 id="scrapy框架" tabindex="-1"><a class="header-anchor" href="#scrapy框架" aria-hidden="true">#</a> Scrapy框架</h1><h2 id="scrapy框架-1" tabindex="-1"><a class="header-anchor" href="#scrapy框架-1" aria-hidden="true">#</a> Scrapy框架</h2><ul><li><p><strong>Scrapy框架模块功能</strong></p><img src="'+p+`" style="zoom:33%;"><p><em><strong>1&gt;</strong></em> <code>Scrapy Engine</code>（引擎）：<code>Scrapy</code>框架的核心部分，负责在<code>Spider</code>和<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间通信、传递数据等</p><p><em><strong>2&gt;</strong></em> <code>Spider</code>（爬虫）：发送需要爬取的链接给引擎，由引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是需要的，都是由程序员自己决定</p><p><em><strong>3&gt;</strong></em> <code>Scheduler</code>（调度器）：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等</p><p><em><strong>4&gt;</strong></em> <code>Downloader</code>（下载器）：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎</p><p><em><strong>5&gt;</strong></em> <code>Item Pipeline</code>（管道）：负责将<code>Spider</code>（爬虫）传递过来的数据进行保存</p><p><em><strong>6&gt;</strong></em> <code>Downloader Middlewares</code>（下载中间件）：可以扩展下载器和引擎之间通信功能的中间件</p><p><em><strong>7&gt;</strong></em> <code>Spider Middlewares</code>（<code>Spider</code>中间件）：可以扩展引擎和爬虫之间通信功能的中间件</p></li><li><p><strong>安装和文档</strong></p><p><strong>安装</strong>：<code>pip install scrapy</code></p><p>Windows需要额外安装<code>win32api</code>：<code>pip install pypiwin32</code></p><p>Scrapy官方文档：http://doc.scrapy.org/en/latest</p><p>Scrapy中文文档：http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</p></li><li><p><strong>创建项目</strong></p><ul><li><p><em><strong>创建项目</strong></em></p><p>进入想要存放项目的目录中，运行命令：<code>scrapy startproject [项目名称]</code></p><p><em><strong>项目目录结构介绍</strong></em>：</p><p><em><strong>1&gt;</strong></em> <code>items.py</code>：用来存放爬虫爬取下来数据的模型</p><p><em><strong>2&gt;</strong></em> <code>middlewares.py</code>：用来存放各种中间件的文件</p><p><em><strong>3&gt;</strong></em> <code>pipelines.py</code>：用来将<code>items</code>的模型存储到本地磁盘中</p><p><em><strong>4&gt;</strong></em> <code>settings.py</code>：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）</p><p><em><strong>5&gt;</strong></em> <code>scrapy.cfg</code>：项目的配置文件</p><p><em><strong>6&gt;</strong></em> <code>spiders包</code>：以后所有的爬虫，都是存放到这个里面</p></li><li><p><em><strong>创建爬虫</strong></em></p><p>进入项目目录，运行命令：<code>scrapy gensipder [爬虫名称] [域名]</code></p><p>运行命令后，会自动在<code>spiders包</code>中新建一个<code>.py</code>文件，文件中代码作用如下：</p><p>要创建一个<code>Spider</code>，必须继承自<code>scrapy.Spider</code>类，且需要定义三个属性和一个方法：</p><p><em><strong>1&gt;</strong></em> <code>name</code>：爬虫的名字，名字必须是唯一的</p><p><em><strong>2&gt;</strong></em> <code>allow_domains</code>：允许的域名，爬虫只会爬取这个域名下的网页，其他域名下的网页会被自动忽略</p><p><em><strong>3&gt;</strong></em> <code>start_urls</code>：爬虫从这个变量中的<code>url</code>开始爬取数据</p><p><em><strong>4&gt;</strong></em> <code>parse</code>：引擎会把下载器下载回来的数据扔给爬虫解析，爬虫再把数据传给这个<code>parse</code>方法。这个是固定的写法。这个方法的作用有两个，第一个是提取想要的数据，第二个是生成下一个请求的<code>url</code></p><p><em><strong>注</strong></em>：爬虫名称不能和项目名称相同，且该爬虫只能爬取该指定域名下的内容</p></li></ul></li><li><p><strong>项目实践</strong></p><ul><li><p><em><strong>settings.py配置文件修改</strong></em></p><p><em><strong>1&gt;</strong></em> 将<code>ROBOTSTXT_OBEY</code>更改为<code>False</code>，默认的是<code>True</code></p><p><em><strong>2&gt;</strong></em> 打开默认请求头<code>DEFAULT_REQUEST_HEADERS</code>，增加<code>User-Agent</code>内容</p></li><li><p><em><strong>爬虫代码书写</strong></em></p><p><em><strong>1&gt;</strong></em> <code>response</code>是一个<code>scrapy.http.response.html.HtmlResponse</code>对象，可以执行<code>xpath</code>和<code>css</code>语法来提取数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bbs_lis <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//li[@class=&quot;bbs-sl-web-post-body&quot;]&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 提取出来的数据是一个<code>SelectorList</code>或者<code>Selector</code>对象，如果想要获取其中的字符串内容，需要再执行<code>get()</code>或者<code>getall()</code>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bbs_title <span class="token operator">=</span> bbs_li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//a[@class=&quot;p-title&quot;]/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> <code>get()</code>方法：获取<code>Selector</code>中的第一个文本，返回的是字符串</p><p><em><strong>4&gt;</strong></em> <code>getall()</code>方法：获取<code>Selector</code>中所有文本，返回一个列表</p><p><em><strong>5&gt;</strong></em> 可以使用<code>yield</code>将数据传递给<code>pipeline</code>处理，或者使用列表收集所有的<code>item</code>，最后使用<code>return</code>返回</p></li><li><p><em><strong>items.py代码书写</strong></em></p><p>在<code>items.py</code>文件中定义好模型类，之后再返回数据的时候创建<code>item</code>对象进行返回即可，如：</p><p><em><strong>定义模型类</strong></em>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">HupuItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>创建item对象进行返回</strong></em>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>item <span class="token operator">=</span> HupuItem<span class="token punctuation">(</span>author<span class="token operator">=</span>bbs_author<span class="token punctuation">,</span> title<span class="token operator">=</span>bbs_title<span class="token punctuation">,</span> url<span class="token operator">=</span>bbs_url<span class="token punctuation">)</span>
<span class="token keyword">yield</span> item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>启动爬虫</strong></em></p><ul><li><p><em><strong>方法一：终端中运行</strong></em></p><p>在终端中进入项目所在路径，运行命令：<code>scrapy crawl [爬虫名称]</code></p></li><li><p><em><strong>方法二：通过.py文件运行</strong></em></p><p>如，在项目目录中新建一个<code>start.py</code>文件，在文件中添加如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> cmdline
cmdline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;scrapy crawl [爬虫名称]&quot;</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如此，运行该文件即可启动爬虫</p></li></ul></li><li><p><em><strong>pipelines.py代码书写</strong></em></p><p><code>Pipeline</code>类专门用于保存数据，其中有三个比较重要的方法：</p><p><em><strong>1&gt;</strong></em> <code>open_spider(self, spider)</code>：爬虫开始时会自动运行</p><p><em><strong>2&gt;</strong></em> <code>process_item(self, item, spider)</code>：爬虫传递过来的数据会自动存储到<code>item</code>参数中，通过处理<code>item</code>可以保存数据</p><p><em><strong>3&gt;</strong></em> <code>close_spider(self, spider)</code>：爬虫结束时会自动运行</p><p><em><strong>注</strong></em>：想要激活<code>Pipelines</code>需要修改<code>settings.py</code>配置文件，去掉其中的<code>ITEM_PIPELINES</code>的注释</p></li></ul></li><li><p><strong>JsonItemExporter和JsonLinesItemExporter保存JSON数据</strong></p><p>保存JSON数据时可以使用这两个类，让操作变得更简单</p><p><em><strong>1&gt;</strong></em> <code>JsonItemExporter</code>：每次把数据暂存到内存中，最后统一写入磁盘。好处是存储的是一个满足JSON规则的数据；坏处是如果数据量比较大，将会比较耗内存。示例代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">HupuPipeline</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;hupu_bbs.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>exporter <span class="token operator">=</span> JsonItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>start_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;==========爬虫开始了...==========&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> item
    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>finish_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;==========爬虫结束了...==========&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> <code>JsonLinesItemExporter</code>：每次调用<code>export_item(item)</code>时就会将这个<code>item</code>存储到磁盘中。好处是不会耗内存，数据也比较安全；坏处是每一个字典是一行，整个文件不是一个满足JSON规则的文件，示例代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">HupuPipeline</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;hupu_bbs.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>exporter <span class="token operator">=</span> JsonLinesItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;==========爬虫开始了...==========&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> item
    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;==========爬虫结束了...==========&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="crawlspider" tabindex="-1"><a class="header-anchor" href="#crawlspider" aria-hidden="true">#</a> CrawlSpider</h2><ul><li><p><strong>创建CrawlSpider爬虫</strong></p><p>创建项目的命令和原来一样：<code>scrapy startproject [项目名称]</code></p><p>创建CrawlSpider爬虫命令：<code>scrapy genspider -t crawl [爬虫名字] [域名]</code></p></li><li><p><strong>LinkExtractors链接提取器</strong></p><p>使用<code>LinkExtractors</code>可以实现在页面中自动寻找满足条件的<code>url</code>进行爬取</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">scrapy</span><span class="token punctuation">.</span>linkextractors<span class="token punctuation">.</span>LinkExtractor<span class="token punctuation">(</span>
    allow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    deny <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    allow_domains <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    deny_domains <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    deny_extensions <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    restrict_xpaths <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    tags <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;area&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    attrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    canonicalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
    unique <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
    process_value <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>主要参数讲解</strong></em>：</p><p><em><strong>1&gt;</strong></em> <code>allow</code>：允许的url，所有满足这个正则表达式的url都会被提取</p><p><em><strong>2&gt;</strong></em> <code>deny</code>：禁止的url，所有满足这个正则表达式的url都不会被提取</p><p><em><strong>3&gt;</strong></em> <code>allow_domains</code>：允许的域名，只有在这个里面指定的域名的url才会被提取</p><p><em><strong>4&gt;</strong></em> <code>deny_domains</code>：禁止的域名，所有在这个里面指定的域名的url都不会被提取</p><p><em><strong>5&gt;</strong></em> <code>restrict_xpaths</code>：严格的<code>xpath</code>，和<code>allow</code>共同过滤链接</p></li><li><p><strong>Rule规则类</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">scrapy</span><span class="token punctuation">.</span>spiders<span class="token punctuation">.</span>Rule<span class="token punctuation">(</span>
    LinkExtractor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    callback <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> 
    cb_kwargs <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> 
    follow <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> 
    process_links <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> 
    process_request <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>主要参数讲解</strong></em>：</p><p><em><strong>1&gt;</strong></em> <code>LinkExtractor()</code>：一个<code>LinkExtractor</code>对象，用于定义爬取规则</p><p><em><strong>2&gt;</strong></em> <code>callback</code>：满足这个规则的<code>url</code>，应该要执行哪个回调函数。因为<code>CrawlSpider</code>使用了<code>parse</code>作为回调函数，因此不要覆盖<code>parse</code>作为回调函数自己的回调函数</p><p><em><strong>3&gt;</strong></em> <code>follow</code>：指定根据该规则从<code>response</code>中提取的链接是否需要跟进</p><p><em><strong>4&gt;</strong></em> <code>process_links</code>：从<code>LinkExtractor</code>中获取到链接后会传递给这个函数，用来过滤不需要爬取的链接</p></li></ul><h2 id="scrapy-shell" tabindex="-1"><a class="header-anchor" href="#scrapy-shell" aria-hidden="true">#</a> Scrapy Shell</h2><p>因为<code>scrapy</code>是一个比较重的框架，每次运行起来都比较慢，因此要去验证一些提取规则和代码是否正确，是一件比较麻烦的事情。为此，<code>Scrapy</code>提供了一个<code>shell</code>，用来方便的测试规则</p><p><strong>打开Scrapy Shell</strong>：打开终端，在对应虚拟环境中进入项目所在目录，运行命令：<code>scrapy shell [链接]</code>，即可进入到<code>scrapy</code>的<code>shell</code>环境中</p><h2 id="request和response对象" tabindex="-1"><a class="header-anchor" href="#request和response对象" aria-hidden="true">#</a> Request和Response对象</h2><ul><li><p><strong>Request对象</strong></p><p><code>Request</code>对象在爬取一页的数据需要重新发送一个请求的时候调用，常用参数有：</p><p><em><strong>1&gt;</strong></em> <code>url</code>：<code>request</code>对象发送请求的<code>url</code></p><p><em><strong>2&gt;</strong></em> <code>callback</code>：在下载器下载完相应的数据后执行的回调函数</p><p><em><strong>3&gt;</strong></em> <code>method</code>：请求的方法，默认为<code>GET</code>方法，可以设置其他方法</p><p><em><strong>4&gt;</strong></em> <code>headers</code>：请求头，对于一些固定的设置放在<code>settings.py</code>中就可以了，对于非固定的，可以在发送请求的时候指定</p><p><em><strong>5&gt;</strong></em> <code>meta</code>：比较常用，用于在不同的请求之间传递数据</p><p><em><strong>6&gt;</strong></em> <code>encoding</code>：编码，默认为<code>utf-8</code>，使用默认值就可以了</p><p><em><strong>7&gt;</strong></em> <code>dont_filter</code>：表示不由调度器过滤，在执行多次重复的请求的时候用得比较多</p><p><em><strong>8&gt;</strong></em> <code>errback</code>：在发生错误的时候执行的函数</p></li><li><p><strong>Response对象</strong></p><p><code>Response</code>对象一般由<code>scrapy</code>自动构建，因此开发者主要是学习如何使用。<code>Response</code>对象有很多属性和方法，可以用来提取数据，主要包括：</p><p><em><strong>1&gt;</strong></em> <code>meta</code>：从其他请求传递过来的<code>meta</code>属性，可以用来保持多个请求之间的数据连接</p><p><em><strong>2&gt;</strong></em> <code>encoding</code>：返回当前字符串编码和解码的格式</p><p><em><strong>3&gt;</strong></em> <code>text</code>：解码后的数据，将返回来的数据作为<code>Unicode</code>字符串返回</p><p><em><strong>4&gt;</strong></em> <code>body</code>：未解码的数据，将返回来的数据作为<code>bytes</code>字符串返回</p><p><em><strong>5&gt;</strong></em> <code>xpath</code>：<code>xpath</code>选择器</p><p><em><strong>6&gt;</strong></em> <code>css</code>：<code>css</code>选择器</p></li><li><p><strong>发送POST请求</strong></p><p>使用<code>Request</code>类的子类<code>scrapy.FormRequest</code>发送<code>POST</code>请求</p><p>如果想要在爬虫一开始的时候就发送<code>POST</code>请求，那么需要在爬虫类中重写<code>start_requests(self)</code>方法，并且不再调用<code>start_urls</code>里的<code>url</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy
<span class="token keyword">class</span> <span class="token class-name">ZwduSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;zwdu&#39;</span>
    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;81zw.com&#39;</span><span class="token punctuation">]</span>
    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;http://81zw.com/&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        login_url <span class="token operator">=</span> <span class="token string">&#39;https://www.81zw.com/login.php&#39;</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;password&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;xxxxxxxx&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>
            url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> formdata<span class="token operator">=</span>data<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>
        <span class="token keyword">yield</span> request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>图片验证码识别</strong></p><p>使用阿里云商用产品进行图片验证码识别，产品链接：</p><p>https://market.aliyun.com/products/57124001/cmapi030368.html?spm=5176.730005.result.33.5d6a3524hZFlvI#sku=yuncode2436800001</p></li></ul><h2 id="下载文件和图片" tabindex="-1"><a class="header-anchor" href="#下载文件和图片" aria-hidden="true">#</a> 下载文件和图片</h2><ul><li><p><strong>scrapy内置下载文件方法的优点</strong></p><p><em><strong>1&gt;</strong></em> 避免重复下载最近已经下载过的文件</p><p><em><strong>2&gt;</strong></em> 可以方便的指定文件存储的路径</p><p><em><strong>3&gt;</strong></em> 可以将下载的图片转换成通用的格式，如png或jpg</p><p><em><strong>4&gt;</strong></em> 可以方便的生成缩略图</p><p><em><strong>5&gt;</strong></em> 可以方便的检测图片的宽和高，确保他们满足最小限制</p><p><em><strong>6&gt;</strong></em> 异步下载，效率非常高</p></li><li><p><strong>Files Pipeline：下载文件</strong></p><p><em><strong>1&gt;</strong></em> 定义好一个<code>item</code>，然后在这个<code>item</code>中定义两个属性，<code>file_urls</code>和<code>files</code>。<code>file_urls</code>是用来存储需要下载的文件的<code>url</code>，需要给定一个列表</p><p><em><strong>2&gt;</strong></em> 启动<code>pipeline</code>：在<code>ITEM_PIPELINES</code>中设置<code>&#39;scrapy.pipelines.files.FilesPipeline&#39;: 1</code></p><p><em><strong>3&gt;</strong></em> 在配置文件<code>settings.py</code>中增加配置<code>FILES_STORE</code>，用来设置下载文件存储的路径</p><p><em><strong>4&gt;</strong></em> 当文件下载完成后，会把文件下载的相关信息存储到<code>item</code>的<code>files</code>属性中，如：下载路径、下载的<code>url</code>、文件的校验码等</p></li><li><p><strong>Images Pipeline：下载图片</strong></p><p><em><strong>1&gt;</strong></em> 定义好一个<code>item</code>，然后在这个<code>item</code>中定义两个属性，<code>images_urls</code>和<code>images</code>。<code>images_urls</code>是用来存储需要下载的图片的<code>url</code>，需要给定一个列表</p><p><em><strong>2&gt;</strong></em> 启动<code>pipeline</code>：在<code>ITEM_PIPELINES</code>中设置<code>&#39;scrapy.pipelines.images.ImagesPipeline&#39;: 1</code></p><p><em><strong>3&gt;</strong></em> 在配置文件<code>settings.py</code>中增加配置<code>IMAGES_STORE</code>，用来设置下载图片存储的路径</p><p><em><strong>4&gt;</strong></em> 当图片下载完成后，会把图片下载的相关信息存储到<code>item</code>的<code>images</code>属性中，如：下载路径、下载的<code>url</code>、图片的校验码等</p></li></ul><h2 id="下载器中间件" tabindex="-1"><a class="header-anchor" href="#下载器中间件" aria-hidden="true">#</a> 下载器中间件</h2><p>下载器中间件（Downloader Middleware）是引擎和下载器之间通信的中间件。在这个中间件中可以设置代码、更换请求头等来达到反反爬虫的目的。要写下载器中间件，可以在下载器中实现<em><strong>两个方法</strong></em>：</p><p><code>process_request(self, request, spider)</code>：处理请求，在请求发送之前会执行</p><p><code>process_response(self, request, response, spider)</code>：处理应答，在数据下载到引擎之前执行</p><p><em><strong>注</strong></em>：使用中间件需要在<code>settings.py</code>中配置<code>DOWNLOADER_MIDDLEWARES</code></p><ul><li><p><strong>process_request(self, request, spider)</strong></p><p>这个方法会在下载器发送请求之前执行，用于处理请求，一般可以用来设置代理ip等</p><ul><li><p><em><strong>参数</strong></em></p><p><em><strong>1&gt;</strong></em> <code>request</code>：发送请求的<code>request</code>对象</p><p><em><strong>2&gt;</strong></em> <code>spider</code>：发送请求的<code>spider</code>对象</p></li><li><p><em><strong>返回值</strong></em></p><p><em><strong>1&gt;</strong></em> 返回<code>None</code>：如果返回<code>None</code>，<code>Scrapy</code>将继续处理该<code>request</code>，执行其他中间件中相应的方法，直到合适的下载器处理函数被调用</p><p><em><strong>2&gt;</strong></em> 返回<code>Response</code>对象：<code>Scrapy</code>将不会调用任何其他的<code>process_request</code>方法，将直接返回这个<code>response</code>对象。已经激活的中间件的<code>process_response()</code>方法则会在每个<code>response</code>返回时被调用</p><p><em><strong>3&gt;</strong></em> 返回<code>Request</code>对象：不再使用之前的<code>request</code>对象去下载数据，而是根据现在返回的<code>request</code>对象返回数据</p><p><em><strong>4&gt;</strong></em> 如果这个方法中抛出了异常，则会调用<code>process_exception()</code>方法</p></li></ul></li><li><p><strong>process_response(self, request, response, spider)</strong></p><p>这个方法会在下载器下载的数据到引擎之间执行</p><ul><li><p><em><strong>参数</strong></em></p><p><em><strong>1&gt;</strong></em> <code>request</code>：<code>request</code>对象</p><p><em><strong>2&gt;</strong></em> <code>response</code>：被处理的<code>response</code>对象</p><p><em><strong>3&gt;</strong></em> <code>spider</code>：<code>spider</code>对象</p></li><li><p><em><strong>返回值</strong></em></p><p><em><strong>1&gt;</strong></em> 返回<code>Response</code>对象：会将这个新的<code>response</code>对象传给其他中间件，最终传给爬虫</p><p><em><strong>2&gt;</strong></em> 返回<code>Request</code>对象：下载器将被切断，返回的<code>request</code>对象会重新被下载器调度下载</p><p><em><strong>3&gt;</strong></em> 如果抛出一个异常，那么调用<code>request</code>的<code>errback</code>方法，如果没有指定这个方法，则会抛出一个异常</p></li></ul></li><li><p><strong>随机请求头中间件</strong></p><p>使用下载中间件随机更改请求头，在请求发送给服务器之前，随机地选择一个请求头</p><p>使用中间件需要在<code>settings.py</code>中配置<code>DOWNLOADER_MIDDLEWARES</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserAgentDownloadMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    USER_AGENT <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2919.83 Safari/537.36&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        user_agent <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>USER_AGENT<span class="token punctuation">)</span>
        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_agent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：统计<code>User-Agent</code>的网站：http://www.useragentstring.com/pages/useragentstring.php</p></li><li><p><strong>ip代理池中间件</strong></p><ul><li><p><em><strong>常用的代理商</strong></em></p><p>芝麻代理：https://h.zhimaruanjian.com/</p><p>太阳代理：https://http.taiyangruanjian.com/</p><p>快代理：https://www.kuaidaili.com/</p><p>讯代理：http://www.xdaili.cn/</p><p>蚂蚁代理：http://www.mayidaili.com/</p></li><li><p><em><strong>使用ip代理池</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">IPProxyDownloadMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    PROXIES <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;http://114.99.199.133:4216&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;http://183.165.227.123:4210&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PROXIES<span class="token punctuation">)</span>
        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">&#39;proxy&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="简书项目实战" tabindex="-1"><a class="header-anchor" href="#简书项目实战" aria-hidden="true">#</a> 简书项目实战</h2><ul><li><p><strong>异步向数据库存储数据</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql
<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>enterprise <span class="token keyword">import</span> adbapi
<span class="token keyword">from</span> pymysql <span class="token keyword">import</span> cursors
<span class="token keyword">class</span> <span class="token class-name">JianshuTwistedPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        db_params <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;host&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;port&#39;</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
            <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;password&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;database&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;jianshu&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;charset&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;cursorclass&#39;</span><span class="token punctuation">:</span> cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>dbpool <span class="token operator">=</span> adbapi<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span><span class="token string">&#39;pymysql&#39;</span><span class="token punctuation">,</span> <span class="token operator">**</span>db_params<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_sql <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">sql</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_sql<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>_sql <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
            insert into article(id, title, content, author, avatar, pub_time, origin_url, article_id) values(null, %s, %s, %s, %s, %s, %s, %s)
            &quot;&quot;&quot;</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_sql
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_sql

    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        defer <span class="token operator">=</span> self<span class="token punctuation">.</span>dbpool<span class="token punctuation">.</span>runInteraction<span class="token punctuation">(</span>self<span class="token punctuation">.</span>insert_item<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        defer<span class="token punctuation">.</span>addErrback<span class="token punctuation">(</span>self<span class="token punctuation">.</span>handle_error<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">insert_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;avatar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;pub_time&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;origin_url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">&#39;article_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">handle_error</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> error<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span><span class="token string">&#39;error&#39;</span><span class="token operator">+</span><span class="token string">&#39;=&#39;</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span><span class="token string">&#39;error&#39;</span><span class="token operator">+</span><span class="token string">&#39;=&#39;</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用selenium获取网页</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">import</span> time
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response<span class="token punctuation">.</span>html <span class="token keyword">import</span> HtmlResponse
<span class="token keyword">class</span> <span class="token class-name">SeleniumDownloadMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        driver_path <span class="token operator">=</span> <span class="token string">&#39;D:\\MySoftware\\edgedriver\\msedgedriver.exe&#39;</span>
        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>executable_path<span class="token operator">=</span>driver_path<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        source_code <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>page_source
        response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>current_url<span class="token punctuation">,</span> body<span class="token operator">=</span>source_code<span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,20),c=[o];function i(l,r){return s(),a("div",null,c)}const k=n(t,[["render",i],["__file","06_Scrapy框架.html.vue"]]);export{k as default};
