import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,f as e}from"./app-VKLC1A-x.js";const t="/mynotes/assets/url匹配的过程（详细）-foW6EmXM.jpeg",o="/mynotes/assets/Ajax请求过程-bxQv6ML_.jpeg",p="/mynotes/assets/cookie使用过程-vzDS5Jok.jpeg",c="/mynotes/assets/session使用过程-WSwpY-Pw.jpeg",i={},l=e('<h1 id="django-视图" tabindex="-1"><a class="header-anchor" href="#django-视图" aria-hidden="true">#</a> Django-视图</h1><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h2><p><strong>功能</strong>：接收处理请求，与M和T进行交互，返回应答，返回HTML内容使用<code>HttpResponse</code>，也可以重定向<code>redirect</code>，还可以返回json数据</p><ul><li><p><strong>使用视图函数</strong></p><p>1&gt; <em><strong>定义视图函数</strong></em>，<code>request</code>参数必须有，是一个<code>HttpRequest</code>类型的对象。参数名可以变化， 但不要更改</p><p>2&gt; <em><strong>配置url</strong></em>，建立url和视图函数之间的对应关系</p></li><li><p><strong>url配置的过程</strong></p><p>1&gt; 在项目的<code>urls.py</code>文件中包含具体应用的<code>urls.py</code>文件，在具体应用的<code>urls.py</code>文件中包含具体的<code>url</code>和视图的对应关系</p><p>2&gt; <code>url</code>配置项是定义在一个名叫<code>urlpatterns</code>的列表中，其中的每一个元素就是一个配置项，每一个配置项都调用<code>url</code>函数</p></li><li><p><strong>url匹配的过程（详细）</strong></p><img src="'+t+`" style="zoom:25%;"></li><li><p><strong>错误视图</strong></p><ul><li><p><em><strong>404：找不到页面</strong></em></p><p><em><strong>错误原因</strong></em>：url没有配置，url配置错误等</p><p>默认会返回Django的调试页面，因为调试模式默认是开启的，可以在项目的<code>settings.py</code>文件中将<code>DEBUG</code>改为<code>False</code>，同时设置允许访问的ip地址<code>ALLOWED_HOSTS</code>来关闭调试模式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DEBUG <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 关闭调试模式，实际开发中在产品发布前进行关闭</span>
ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 允许所有ip访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭调试模式之后，默认会显示一个标准的错误页面，如果想要自定义显示的页面，可以在<code>templates</code>目录下新建一个<code>404.html</code>文件，在<code>404.html</code>文件中自定义错误页面</p><p>自定义页面完成后，Django会自动调用<code>404.html</code>模板，而不用手动配置；而且Django在调用的同时还会传递给<code>404.html</code>模板一个模板变量<code>request_path</code>，里面存储着错误页面的url地址，有需要可以在模板中直接使用</p></li><li><p><em><strong>500：服务器端的错误</strong></em></p><p><em><strong>错误原因</strong></em>：视图函数出错等</p><p>同样，默认会返回Django的调试页面，关闭调试模式后返回标准的服务器错误页面，如需自定义可以在<code>templates</code>中新建<code>500.html</code>文件，Django也会自动调用</p></li></ul></li><li><p><strong>捕获url参数</strong></p><p>进行url匹配时，把所需要捕获的部分设置成一个正则表达式组，这样Django框架就会自动把匹配成功后相应组中的内容作为参数传递给视图函数</p><p>1&gt; <em><strong>位置参数</strong></em>：参数名可以随意指定</p><p>2&gt; <em><strong>关键字参数</strong></em>：在位置参数的基础上给正则表达式组命名即可<code>?P&lt;组名&gt;</code>，且视图函数中参数名必须和正则表达式组名一致</p></li></ul><h2 id="httpreqeust对象" tabindex="-1"><a class="header-anchor" href="#httpreqeust对象" aria-hidden="true">#</a> HttpReqeust对象</h2><p>服务器接收到HTTP协议的请求后，会根据报文创建HttpRequest对象，这个对象不需要我们创建，直接使用服务器构造好的对象就可以。<em><u>视图的第一个参数必须是HttpRequest对象，即常用的request</u></em>，在django.http模块中定义了HttpRequest对象的API</p><ul><li><p><strong>request的属性介绍</strong></p><p>request就是HttpRequest类型的对象，里面包含浏览器请求的信息</p><p><code>request.POST</code>：QueryDict类型对象，保存的是post方法提交的参数</p><p><code>request.GET</code>：QueryDict类型对象，保存的是get方法提交的参数</p><p><code>request.method</code>：字符串，表示请求使用的HTTP方法，常用值如：&#39;GET&#39;、&#39;POST&#39;</p><p><code>request.path</code>：字符串，表示请求的页面的完整路径，不包含域名和参数部分</p><p><code>request.encoding</code>：字符串，表示提交的数据的编码方式，值为None表示使用的浏览器的默认设置，一般为utf-8；这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值（了解）</p><p><code>request.FILES</code>：类似于字典的对象，包含所有的上传文件</p><p><code>request.COOKIES</code>：标准的Python字典，包含所有的cookie，键和值都为字符串</p><p><code>request.session</code>：既可读又可写的类似于字典的对象，表示当前的会话，只有当Django启用会话的支持时才可用，详细内容见&quot;状态保持&quot;</p><p><em><strong>注</strong></em>：在进行校验前需要关闭网页自带的安全校验，注释掉项目中的<code>settings.py</code>文件中的<code>MIDDLEWARE_CLASSES</code>里面的一行代码<code>&#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</code>，即可</p></li><li><p><strong>QueryDict</strong></p><p>QueryDict是一个选择字典集，特性类似于字典，但又有些区别，可以从<code>django.http.request</code>中导入</p><p>QueryDict对象的键可以对应一个值或多个值，取值方法和字典相同，都可以通过<code>q[key]</code>、<code>q.get(key)</code>进行取值，对不存在的键进行取值，<code>q[key]</code>同样报错，<code>q.get(key)</code>同样可以返回设定的值，演示如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>request <span class="token keyword">import</span> QueryDict
q <span class="token operator">=</span> QueryDict<span class="token punctuation">(</span><span class="token string">&#39;a=1&amp;b=2&amp;c=3&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建并向选择字典集q中存储值</span>
q<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 取出q中a的值，返回&#39;1&#39;</span>
q<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 取出q中b的值，返回&#39;2&#39;</span>
q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 取出q中a的值，返回&#39;1&#39;</span>
q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 取出q中c的值，返回&#39;3&#39;</span>
q<span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 取出q中不存在的值，报错MultiValueDictKeyError</span>
q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 取出q中不存在的值，返回None</span>
q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;okok&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 取出q中不存在的值，并返回设定的值&#39;okok&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QueryDict对象的键可以对应多个值，此时<code>q[key]</code>和<code>q.get(key)</code>都只能取出最后一个值，想要取出全部的值，需要使用<code>q.getlist(key)</code>，演示如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>request <span class="token keyword">import</span> QueryDict
q1 <span class="token operator">=</span> QueryDict<span class="token punctuation">(</span><span class="token string">&#39;a=1&amp;a=3&amp;a=2&amp;b=4&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建并存储值，一个键可以有多个值</span>
q1<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 取出多值的a，返回最后的&#39;2&#39;</span>
q1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 取出多值的a，返回最后的&#39;2&#39;</span>
q1<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 取出a的所有值，返回[&#39;1&#39;, &#39;3&#39;, &#39;2&#39;]</span>
q1<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 同样可以取出一个值的键，返回[&#39;4&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> Ajax</h2><ul><li><p><strong>基本概念</strong></p><p>异步的JavaScript，在不全部加载某一个页面的情况下，对页面进行局部的刷新，Ajax请求都在后台</p><p>图片、CSS文件、js文件都是静态文件</p><p><strong>Django配置静态文件</strong>：先在项目中新建<code>static</code>文件夹，然后在项目的<code>settings.py</code>文件的最后配置静态文件的目录<code>STATICFILES_DIRS = [os.path.join(BASE_DIR, &#39;static&#39;)]</code></p><img src="`+o+`" style="zoom:25%;"></li><li><p><strong>Ajax同步和异步</strong></p><p>通过设置Ajax的参数<code>async</code>的值，可以设置Ajax的同步和异步</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&#39;async&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  # 默认值，值为<span class="token boolean">true</span>表示异步
<span class="token string-property property">&#39;async&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  # 值为<span class="token boolean">false</span>表示同步
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>异步</strong></em>：Ajax异步时，在发起Ajax请求后，后续代码不会等待成功后的回调函数执行就会执行</p><p><em><strong>同步</strong></em>：同步时，在发起Ajax请求后，后续代码会等待成功后的回调函数执行结束后再执行</p></li><li><p><strong>Ajax请求校验</strong></p><p>1&gt; 首先分析出请求地址时需要携带给服务器的参数，通过Ajax的<code>data</code>参数进行传递</p><p>2&gt; 分析视图函数处理完成之后，需要返回的json数据的格式和内容</p><p><em><strong>注</strong></em>：Ajax请求在后台，不要在视图函数中返回页面或重定向，前端页面无法显示，可以在请求成功后的回调函数里面设置成功后跳转的页面</p></li></ul><h2 id="状态保持" tabindex="-1"><a class="header-anchor" href="#状态保持" aria-hidden="true">#</a> 状态保持</h2><p>HTTP协议是无状态的，下一次访问同一个页面时，并不知道上一次对这个页面做了什么</p><ul><li><p><strong>cookie</strong></p><p>cookie是由服务器生成，存储在浏览器端的一小段文本信息。具有如下<em><strong>特点</strong></em>：</p><p>1&gt; 以键值对的方式进行存储</p><p>2&gt; 通过浏览器访问一个网站时，会将浏览器存储的跟网站相关的所有cookie信息发送给该网站的服务器</p><p>3&gt; cookie是基于域名安全的</p><p>4&gt; cookie是有过期时间的，如果不设置，默认关闭浏览器之后cookie就会过期</p><p>5&gt; cookie存储和读取的都是字符串</p><ul><li><p><em><strong>设置cookie</strong></em></p><p>通过<code>HttpResponse</code>类的实例对象，或者它子类（如<code>HttpResponseRedirect</code>，<code>JsonResponse</code>）的实例对象中的<code>set_cookie()</code>方法可以设置cookie</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># response是HttpResponse类的实例对象</span>
<span class="token comment"># 设置一个cookie信息，名字为num，值为1，过期时间为14天，下面两个用一个即可</span>
response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> max_age<span class="token operator">=</span><span class="token number">14</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span>  <span class="token comment"># max_age的单位是秒</span>
response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> expires<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>读取cookie</strong></em></p><p>通过<code>request.COOKIES</code>可以读取cookie信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">[</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 取出cookie num中的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><img src="`+p+`" style="zoom:20%;"></li><li><p><strong>session</strong></p><p>session是由服务器生成，默认存储在服务器端项目数据库的<code>django_session</code>表中的数据，具有如下<em><strong>特点</strong></em>：</p><p>1&gt; session是以键值对进行存储的，存储时会进行base64编码</p><p>2&gt; session依赖于cookie，唯一的标识码保存在sessionid的cookie中</p><p>3&gt; session也有过期时间，如果不设置，默认两周就会过期</p><p>4&gt; session存储和读取的字符类型和存储时书写的相同，字符串是字符串，数字是数字</p><ul><li><p><em><strong>存储方式</strong></em></p><p>在项目的<code>settings.py</code>文件中，通过设置<code>SESSION_ENGINE</code>指定session数据存储的方式，可以存储在数据库、缓存、Redis等</p><ul><li><p><em><strong>存储在数据库中</strong></em>：进行如下配置，也可以不写，这是默认的存储方式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>SESSION_ENGINE<span class="token operator">=</span><span class="token string">&#39;django.contrib.sessions.backends.db&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>存储在缓存中</strong></em>：存储在本机内存中，丢失不能找回，比数据库的读写更快</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>SESSION_ENGINE<span class="token operator">=</span><span class="token string">&#39;django.contrib.sessions.backends.cache&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>混合存储</strong></em>：优先从本机内存中存取，如果没有则从数据库中存取</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>SESSION_ENGINE<span class="token operator">=</span><span class="token string">&#39;django.contrib.sessions.backends.cached_db&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><em><strong>设置session</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;smart&#39;</span>
request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>set_expiry<span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 设置session的过期时间，不设置两周过期</span>
<span class="token comment"># 如果value是一个整数，会话将在value秒没有活动后过期</span>
<span class="token comment"># 如果value为0，那么用户会话的Cookie将在用户的浏览器关闭时过期。</span>
<span class="token comment"># 如果value为None，那么会话永不过期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>读取session</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>username <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
username <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 可以设置不存在时返回的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>其他操作</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除所有session，在存储中删除值的部分</span>
request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除session数据，在存储中删除session的整条数据</span>
<span class="token keyword">del</span> request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">&#39;键&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 删除session中的指定键及值，在存储中只删除某个键及对应的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><img src="`+c+'" style="zoom:20%;"></li><li><p><strong>cookie和session的应用场景</strong></p><p><em><strong>cookie</strong></em>：数据存储在浏览器端，用于存储安全性要求不高的数据，如：用户名等</p><p><em><strong>session</strong></em>：数据存储在服务器端，用于存储安全性要求较高的数据，如：登录状态、密码等</p></li></ul>',12),r=[l];function u(d,m){return n(),a("div",null,r)}const v=s(i,[["render",u],["__file","03_Django-视图.html.vue"]]);export{v as default};
