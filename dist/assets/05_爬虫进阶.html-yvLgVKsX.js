import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const t={},p=e(`<h1 id="爬虫进阶" tabindex="-1"><a class="header-anchor" href="#爬虫进阶" aria-hidden="true">#</a> 爬虫进阶</h1><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h2><ul><li><p><strong>实现多线程</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>coding<span class="token punctuation">)</span>  <span class="token comment"># 创建一个线程，coding是一个函数名</span>
t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>drawing<span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 启动线程</span>
t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>threading.enumerate()</code>：查看当前运行的线程的数量，返回线程组成的列表</p><p><code>threading.current_thread()</code>：查看线程的名字等信息</p><p>自定义线程名可以使用<code>name</code>参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>coding<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;写代码&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>继承自threading.Thread类</strong></p><p>通过继承自<code>threading.Thread</code>类创建线程，需要重写<code>run()</code>方法，创建线程就是创建类的一个实例对象，想要启动线程则需要实例对象调用<code>start()</code>方法，此时会自动运行类里面的<code>run()</code>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">class</span> <span class="token class-name">CodingThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 通过继承自threading.Thread类创建线程，需要重写run()方法</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;正在写代码%d&#39;</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">DrawingThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;正在画画%d&#39;</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    t1 <span class="token operator">=</span> CodingThread<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建类的实例对象</span>
    t2 <span class="token operator">=</span> DrawingThread<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例对象调用start()方法时，会自动运行类里面的run()方法</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义线程名可以使用<code>name</code>参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> CodingThread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;写代码&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>共享全局变量和互斥锁</strong></p><p><code>gLock = threading.Lock()</code>：创建互斥锁</p><p><code>gLock.acquire()</code>：添加互斥锁</p><p><code>gLock.release()</code>：释放互斥锁</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
VALUE <span class="token operator">=</span> <span class="token number">0</span>
gLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建互斥锁</span>
<span class="token keyword">def</span> <span class="token function">add_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> VALUE
    gLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 添加互斥锁</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        VALUE <span class="token operator">+=</span> <span class="token number">1</span>
    gLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放互斥锁</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>VALUE<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_value<span class="token punctuation">)</span>
        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Lock版生产者和消费者模式</strong></p><p>生产者和消费者模式是多线程开发中经常使用的一种模式。生产者的线程专门用来生产一些数据，然后存放到一个中间变量中。消费者的线程再从这个中间变量中取出数据进行消费。中间变量经常是一些全局变量，因此需要使用<code>threading.Lock()</code>创建互斥锁来保证数据的完整性</p></li><li><p><strong>Condition版生产者和消费者模式</strong></p><p>相较于<code>Lock</code>版生产者和消费者模式，<code>threading.Condition</code>在没有合适的数据的时候线程会处于阻塞等待状态，一旦有了合适的数据，可以使用<code>notify</code>相关的函数来通知处于等待状态的线程。这样就可以不用做一些无用的上锁和解锁的操作，以提高程序的性能。<code>threading.Condition</code>和<code>threading.Lock</code>作用相仿，但是功能更丰富</p><p><em><strong>1&gt;</strong></em> <code>gCondition = threading.Condition()</code>：创建互斥锁</p><p><em><strong>2&gt;</strong></em> <code>gCondition.acquire()</code>：添加互斥锁</p><p><em><strong>3&gt;</strong></em> <code>gCondition.release()</code>：释放互斥锁</p><p><em><strong>4&gt;</strong></em> <code>gCondition.wait()</code>：让当前线程处于等待状态，并且会释放互斥锁。可以使用<code>notify</code>相关的函数唤醒，被唤醒后会继续等待上锁，上锁后继续执行下面的代码</p><p><em><strong>5&gt;</strong></em> <code>gCondition.notify()</code>：通知某个正在等待的线程，默认是第一个等待的线程</p><p><em><strong>6&gt;</strong></em> <code>gCondition.notify_all()</code>：通知所有正在等待的线程。<code>notify</code>和<code>notify_all</code>不会释放锁，并且需要在<code>release</code>之前调用</p></li><li><p><strong>Queue：线程安全队列</strong></p><p>Python中的<code>queue</code>模块提供了同步的、线程安全的队列类，包括FIFO（先进先出）的队列<code>Queue</code>，LIFO（后进先出）的队列<code>LifoQueue</code>。这些队列都实现了锁原语（可以理解为原子操作，即要么不做，要么都做完），能够在多线程中直接使用，可以使用队列来实现线程间的同步</p><p><em><strong>1&gt;</strong></em> <code>q = Queue(maxsize)</code>：创建一个FIFO（先进先出）的队列，最大容量为<code>maxsize</code></p><p><em><strong>2&gt;</strong></em> <code>lq = LifoQueue(maxsize)</code>：创建一个LIFO（后进先出）的队列，最大容量为<code>maxsize</code></p><p><em><strong>3&gt;</strong></em> <code>q.put(item)</code>、<code>lq.put(item)</code>：向队列中放入数据<code>item</code></p><p><em><strong>4&gt;</strong></em> <code>q.get()</code>、<code>lq.get()</code>：从队列中获取数据</p><p><em><strong>5&gt;</strong></em> <code>q.qsize()</code>、<code>lq.qsize()</code>：获取队列中元素的数量</p><p><em><strong>6&gt;</strong></em> <code>q.empty()</code>、<code>lq.empty()</code>：判断队列是否为空，返回<code>True</code>或<code>False</code></p><p><em><strong>7&gt;</strong></em> <code>q.full()</code>、<code>lq.full()</code>：判断队列是否满了，返回<code>True</code>或<code>False</code></p><p><em><strong>注</strong></em>：<em><strong>1&gt;</strong></em> <code>q.get(block=True)</code>：<code>block=True</code>表示取值时会阻塞，即：如果队列中没有数据则会一直阻塞等待数据的到来，<code>block</code>默认为<code>True</code></p><p><em><strong>2&gt;</strong></em> <code>q.put(item, block=True)</code>：<code>block=True</code>表示放入数据时阻塞，即：如果队列是满了的状态，则会一直阻塞等待队列有空，然后将数据放入队列，<code>block</code>默认为<code>True</code></p></li><li><p><strong>GIL全局解释器锁</strong></p><p>Python自带的解释器是CPython。CPython解释器的多线程实际上是一个假的多线程（在多核CPU中，只能利用一核，不能利用多核），同一时刻只有一个线程在执行。为了保证同一时刻只有一个线程在执行，在CPython解释器中有一个东西叫做GIL（Global Intepreter Lock），叫做全局解释器锁。这个解释器锁是必要的，因为CPython解释器的内存管理不是线程安全的</p><p><code>Jython</code>：用Java实现的Python解释器，不存在GIL锁</p><p><code>IronPython</code>：用.net实现的Python解释器，不存在GIL锁</p><p><code>PyPy</code>：用Python实现的Python解释器，存在GIL锁</p></li></ul><h2 id="动态网页爬虫" tabindex="-1"><a class="header-anchor" href="#动态网页爬虫" aria-hidden="true">#</a> 动态网页爬虫</h2><ul><li><p><strong>Ajax</strong></p><p>Ajax（Asynchronouse JavaScript And XML）异步JavaScript和XML。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新，在不重新加载整个网页的情况下，对网页的某部分进行更新。使用Ajax加载的数据，即使使用JS将数据渲染到了浏览器中，但是在右键-&gt;查看网页源代码时还是不能看到通过Ajax加载的数据，只能看到使用这个url加载的最初的HTML代码（通过检查-&gt;元素可以看到Ajax加载的代码）</p></li><li><p><strong>获取Ajax数据的方式</strong></p><p><em><strong>1&gt;</strong></em> 直接分析Ajax调用的接口，然后通过代码请求这个接口</p><p><em><strong>2&gt;</strong></em> 使用selenium+chromedriver模拟浏览器行为获取数据</p><table><thead><tr><th><strong>方式</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>分析接口</td><td>直接可以请求到数据，不需要做一些解析工作；代码量少，性能高</td><td>分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底；容易被发现是爬虫</td></tr><tr><td>selenium</td><td>直接模拟浏览器的行为，浏览器能请求到的，使用selenium也能请求到；爬虫更稳定</td><td>代码量多；性能低</td></tr></tbody></table></li></ul><h2 id="selenium-chromedriver获取动态数据" tabindex="-1"><a class="header-anchor" href="#selenium-chromedriver获取动态数据" aria-hidden="true">#</a> selenium+chromedriver获取动态数据</h2><p>selenium相当于是一个机器人，可以模拟人类在浏览器上的一些行为，自动在浏览器上进行一些操作，比如点击，填充数据，删除cookie等</p><p>chromedriver是一个驱动Chrome浏览器的驱动程序，使用他才可以驱动浏览器。不同浏览器有不同的驱动：</p><p>Chrome：http://chromedriver.storage.googleapis.com/index.html</p><p>Firefox：https://github.com/mozilla/geckodriver/releases</p><p>Edge：https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</p><p>Safari：https://webkit.org/blog/6900/webdriver-support-in-safari-10/</p><p><em><strong>安装selenium</strong></em>：<code>pip install selenium</code></p><p><em><strong>安装chromedriver</strong></em>：下载完成后，放到不需要权限的纯英文目录下就可以了（不用安装）</p><ul><li><p><strong>selenium的简单使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token comment"># 定义edgedriver的绝对路径</span>
driver_path <span class="token operator">=</span> <span class="token string">&#39;D:\\MySoftware\\edgedriver\\msedgedriver.exe&#39;</span>
<span class="token comment"># 初始化一个driver，并且指定edgedriver的路径</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>executable_path<span class="token operator">=</span>driver_path<span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 请求网页</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>  <span class="token comment"># 通过page_source属性获取网页源代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>selenium关闭页面</strong></p><p>参考文档：https://selenium-python.readthedocs.io/api.html</p><p><code>driver.close()</code>：关闭当前标签页</p><p><code>driver.quit()</code>：关闭整个浏览器</p></li><li><p><strong>selenium定位元素</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token comment"># find_element_by_id：根据id获取元素</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&#39;kw&#39;</span><span class="token punctuation">)</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">&#39;kw&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># find_element_by_class_name：根据类名获取元素</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">&#39;s_ipt&#39;</span><span class="token punctuation">)</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">&#39;s_ipt&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># find_element_by_name：根据name属性的值获取元素</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">&#39;wd&#39;</span><span class="token punctuation">)</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> <span class="token string">&#39;wd&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># find_element_by_tag_name：根据标签名获取元素</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># find_element_by_xpath：根据xpath语法获取元素</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">&#39;//input[@id=&quot;kw&quot;]&#39;</span><span class="token punctuation">)</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">&#39;//input[@id=&quot;kw&quot;]&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># find_element_by_css_selector：根据css选择器获取元素</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">&#39;.s_ipt&#39;</span><span class="token punctuation">)</span>
inputTag <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">&#39;.s_ipt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：<code>find_element</code>是获取第一个满足条件的元素，<code>find_elements</code>是获取所有满足条件的元素</p><p><em><strong>注</strong></em>：<em><strong>1&gt;</strong></em> 如果只是想要解析网页中的数据，推荐将网页源代码扔给<code>lxml</code>来解析，因为<code>lxml</code>底层使用的是C语言，解析效率更高</p><p><em><strong>2&gt;</strong></em> 如果是想要对网页中的元素进行操作，如点击、输入文本等，就必须使用<code>selenium</code>提供的获取元素的方法来获取元素</p></li><li><p><strong>selenium操作表单元素</strong></p><ul><li><p><em><strong>操作文本框</strong></em></p><p><code>inputTag.send_keys(value)</code>：向文本框中输入内容</p><p><code>inputTag.clear()</code>：清空文本框中的内容</p></li><li><p><em><strong>操作checkbox</strong></em></p><p><code>rememberBtn.click()</code>：点击选中<code>checkbox</code></p></li><li><p><em><strong>操作select下拉列表框</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> Select
<span class="token comment"># 选中这个标签，然后使用Select创建对象</span>
selectBtn <span class="token operator">=</span> Select<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">&#39;jumpMenu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
selectBtn<span class="token punctuation">.</span>select_by_index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 根据索引选择</span>
selectBtn<span class="token punctuation">.</span>select_by_value<span class="token punctuation">(</span><span class="token string">&#39;http://m.95xiu.com&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 根据值选择</span>
selectBtn<span class="token punctuation">.</span>select_by_visible_text<span class="token punctuation">(</span><span class="token string">&#39;95秀客户端&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 根据可视的文本选择</span>
selectBtn<span class="token punctuation">.</span>deselect_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 取消选中所有选项</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>操作按钮</strong></em></p><p><code>searchBtn.click()</code>：点击按钮</p><p>出现点击被截获时使用如下代码：</p><p><code>driver.execute_script(&quot;arguments[0].click();&quot;, searchBtn)</code></p></li></ul></li><li><p><strong>selenium行为链</strong></p><p>使用行为链在页面上完成多步操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains  <span class="token comment"># 导入类</span>
actions <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>  <span class="token comment"># 使用ActionChains和driver创建一个行为链</span>
actions<span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>inputTag<span class="token punctuation">)</span>  <span class="token comment"># 将鼠标移动到元素上</span>
actions<span class="token punctuation">.</span>send_keys_to_element<span class="token punctuation">(</span>inputTag<span class="token punctuation">,</span> <span class="token string">&#39;刘德华&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 向元素中输入内容</span>
actions<span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>searchBtn<span class="token punctuation">)</span>  <span class="token comment"># 将鼠标移动到元素上</span>
actions<span class="token punctuation">.</span>click<span class="token punctuation">(</span>searchBtn<span class="token punctuation">)</span>  <span class="token comment"># 点击元素</span>
actions<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 开始统一有序地执行行为链</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的更多操作：</p><p><code>actions.click_and_hold(element)</code>：点击但不松开鼠标。</p><p><code>actions.context_click(element)</code>：右键点击</p><p><code>actions.double_click(element)</code>：双击</p><p>参考文档：https://selenium-python.readthedocs.io/api.html</p></li><li><p><strong>selenium操作cookie</strong></p><p><code>driver.get_cookies()</code>：获取所有<code>cookie</code>，返回一个列表</p><p><code>driver.get_cookie(name)</code>：根据<code>name</code>获取<code>cookie</code>，没有返回<code>None</code></p><p><code>driver.delete_cookie(name)</code>：删除某个<code>cookie</code></p><p><code>driver.delete_all_cookies()</code>：删除所有<code>cookie</code></p></li><li><p><strong>selenium页面等待</strong></p><ul><li><p><em><strong>隐式等待</strong></em></p><p>使用<code>driver.implicitly_wait(time)</code>实现隐式等待，等待设置的时长后进行操作，若元素仍未被加载出来则报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.douban.com/&#39;</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 隐式等待，等待20秒</span>
driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&#39;ablkalksjd&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>显式等待</strong></em></p><p>使用<code>WebDriverWait(driver, time)</code>实现显式等待，配合<code>until()</code>和<code>expected_conditions</code>设置终止等待的条件，同时必须设置一个最大等待时长，在最大等待时长内条件满足了则终止等待，否则超出等待时长则报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.douban.com/&#39;</span><span class="token punctuation">)</span>
WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>
    EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">&#39;adkjalflkj&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：其他等待条件</p><p><code>presence_of_element_located()</code>：某个元素已经加载完毕</p><p><code>presence_of_all_emement_located()</code>：所有需要的元素都已经加载完毕</p><p><code>element_to_be_cliable()</code>：某个元素是可以点击的了</p><p>参考文档：https://selenium-python.readthedocs.io/waits.html</p></li></ul></li><li><p><strong>selenium切换标签页</strong></p><p>使用<code>driver.execute_script()</code>执行<code>JavaScript</code>代码可以实现在新标签页打开<code>url</code></p><p>需要注意的是，打开新的标签页之后，虽然浏览器显示在新的标签页上，但是<code>driver</code>仍然是在原来的标签页，需要再通过<code>driver.switch_to_window()</code>将<code>driver</code>切换到指定的标签页</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">&#39;window.open(&quot;https://www.douban.com/&quot;)&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 打开新标签页</span>
driver<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 切换到指定标签页</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>driver.current_url</code>：通过<code>current_url</code>属性可以获取到<code>driver</code>当前所在标签页的<code>url</code></p><p><code>driver.window_handles</code>是一个列表，里面会按照标签页打开的顺序存储标签页的句柄</p></li><li><p><strong>selenium设置代理ip</strong></p><p>selenium设置代理ip，不同的浏览器有不同的实现方式，以下为Chrome浏览器的设置方式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
driver_path <span class="token operator">=</span> <span class="token string">&#39;D:/MySoftware/chromedriver/chromedriver.exe&#39;</span>
options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--proxy-server=http://58.20.235.180:9091&#39;</span><span class="token punctuation">)</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span>driver_path<span class="token punctuation">,</span> chrome_options<span class="token operator">=</span>options<span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/ip&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>selenium的WebElement元素</strong></p><p><code>WebElement</code>是selenium获取到的每个元素所属的类，它的一些常用属性和方法有：</p><p><code>searchBtn.get_attribute(name)</code>：获取元素的属性的值</p><p><code>driver.save_screenshot(filename)</code>：保存页面的截图，只能在<code>driver</code>上使用</p><p><code>driver</code>所属的类也是继承自<code>WebElement</code>，详细内容可以阅读源代码</p></li></ul><h2 id="图形验证码识别技术-tesseract" tabindex="-1"><a class="header-anchor" href="#图形验证码识别技术-tesseract" aria-hidden="true">#</a> 图形验证码识别技术：Tesseract</h2><p><strong>安装</strong>：通过链接下载可执行文件：https://github.com/tesseract-ocr/，安装到不需要权限的纯英文路径中</p><p><strong>设置环境变量</strong>：</p><p><em><strong>1&gt;</strong></em> 将<code>tesseract.exe</code>所在的路径添加到PATH环境变量中</p><p><em><strong>2&gt;</strong></em> 新建变量名为<code>TESSDATA_PREFIX</code>的环境变量，将训练数据的文件路径（<code>teseractdata</code>）添加进去</p><ul><li><p><strong>使用</strong></p><ul><li><p><em><strong>在命令行中使用</strong></em></p><p>在<code>cmd</code>中进入文件所在的目录，运行命令，如：<code>tesseract a.png a</code>，即可在目录中生成一个保存识别结果的<code>a.txt</code>文件</p><p>指定被识别的语言为中文：<code>tesseract a.png a -l chi_sim</code>，默认为英语，需要有中文训练文件</p></li><li><p><em><strong>在代码中使用</strong></em></p><p><em><strong>安装包</strong></em>：<code>pip install pytesseract</code>和<code>pip install Pillow</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytesseract
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
pytesseract<span class="token punctuation">.</span>pytesseract<span class="token punctuation">.</span>tesseract_cmd <span class="token operator">=</span> <span class="token string">r&#39;D:\\MySoftware\\Tesseract-OCR\\tesseract.exe&#39;</span>
image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;a.png&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># lang = &#39;chi_sim&#39;，指定识别语言为中文简体</span>
<span class="token comment"># text = pytesseract.image_to_string(image, lang=&#39;chi_sim&#39;)</span>
text <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,21),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","05_爬虫进阶.html.vue"]]);export{u as default};
