import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const p={},e=t(`<h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h1><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><p>提高程序的安全性</p><p><em><strong>1&gt;</strong></em> 将数据（属性）和行为（方法）包装到类对象中。在方法内部对属性进行操作，在类对象的外部调用方法。这样，无需关心方法内部的具体实现细节，从而隔离了复杂度</p><p><em><strong>2&gt;</strong></em> 在 Python 中没有专门的修饰符用于属性的私有，如果该属性不希望在类对象外部被访问，前边添加两个 <code>_</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age  <span class="token comment"># 年龄不希望在类的外部被使用，所以加了两个 _</span>

    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>

stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
stu<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 可以通过类中的方法访问私有属性</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token comment"># 非私有属性可以在外部直接访问</span>
<span class="token comment"># print(stu.__age)  # AttributeError，私有属性在外部不能直接访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>_Student__age<span class="token punctuation">)</span>  <span class="token comment"># 在类的外部可以通过 _Student__age 访问私有属性</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 查看对象的属性和方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>继承可以提高代码的复用性</p><p>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法</p><p>如果一个类没有继承任何类，则默认继承 <code>object</code> 类</p><h3 id="单继承" tabindex="-1"><a class="header-anchor" href="#单继承" aria-hidden="true">#</a> 单继承</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> stu_no<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>  <span class="token comment"># 调用父类的 __init__ 方法</span>
        self<span class="token punctuation">.</span>stu_no <span class="token operator">=</span> stu_no

<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> yearofteaching<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>  <span class="token comment"># 调用父类的 __init__ 方法</span>
        self<span class="token punctuation">.</span>yearofteaching <span class="token operator">=</span> yearofteaching

stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
teacher <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token string">&#39;Marry&#39;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

stu<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>
teacher<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多继承" tabindex="-1"><a class="header-anchor" href="#多继承" aria-hidden="true">#</a> 多继承</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：如果某个类继承了多个父类，且不同的父类中有同名的方法，那么这个类在执行重名方法时，会执行首先继承的父类的方法（括号中靠前的那个父类）</p><h2 id="方法重写" tabindex="-1"><a class="header-anchor" href="#方法重写" aria-hidden="true">#</a> 方法重写</h2><p><em><strong>1&gt;</strong></em> 如果子类对继承自父类的某个属性或方法不满意，可以在子类中对其（方法体）进行重新编写</p><p><em><strong>2&gt;</strong></em> 子类重写后的方法如有需要可以通过 <code>super().方法名()</code> 调用父类原始方法的内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字是%s，今年%d岁。&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> yearofteaching<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>yearofteaching <span class="token operator">=</span> yearofteaching

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用父类的方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;已经当老师%d年了&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>yearofteaching<span class="token punctuation">)</span>

stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
teacher <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token string">&#39;Marry&#39;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

stu<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 未进行方法重写，完全按照父类方法执行</span>
teacher<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 方法重写后，按照重写后的方法执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-类" tabindex="-1"><a class="header-anchor" href="#object-类" aria-hidden="true">#</a> object 类</h2><p><em><strong>1&gt;</strong></em> <code>object</code> 类是所有类的父类，因此所有类都有 <code>object</code> 类中的属性和方法</p><p><em><strong>2&gt;</strong></em> 内置函数 <code>dir()</code> 可以查看指定对象的所有属性和方法</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h2><p>提高程序的可扩展性和可维护性</p><p>简单的说，多态就是“具有多种形态”，它是指：即便不知道一个变量所引用的对象到底是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象中的方法</p><p><strong>静态语言实现多态的三个必要条件</strong>：</p><p><em><strong>1&gt;</strong></em> 继承</p><p><em><strong>2&gt;</strong></em> 方法重写</p><p><em><strong>3&gt;</strong></em> 父类引用指向子类对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;动物会吃&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;狗啃骨头&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;猫吃鱼&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;人吃五谷杂粮&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>

fun<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fun<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fun<span class="token punctuation">(</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fun<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 即便继承自同一个父类，调用相同的方法，但是在方法重写后，执行的效果并不相同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊属性" tabindex="-1"><a class="header-anchor" href="#特殊属性" aria-hidden="true">#</a> 特殊属性</h2><table><thead><tr><th style="text-align:left;"><strong>属性</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>__dict__</code></td><td style="text-align:left;">获取实例对象所有属性或类对象所有方法的字典</td></tr><tr><td style="text-align:left;"><code>__doc__</code></td><td style="text-align:left;">获取类或对象的说明文档</td></tr><tr><td style="text-align:left;"><code>__class__</code></td><td style="text-align:left;">获取对象所属的类</td></tr><tr><td style="text-align:left;"><code>__bases__</code></td><td style="text-align:left;">获取类对象所继承的父类类型组成的元组</td></tr><tr><td style="text-align:left;"><code>__base__</code></td><td style="text-align:left;">获取类对象的基类，即继承中靠前的单个父类的类型</td></tr><tr><td style="text-align:left;"><code>__mro__</code></td><td style="text-align:left;">获取继承的层次结构/继承顺序</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

x <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment"># x 是 C 类的一个实例对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>   <span class="token comment"># 获取 x 所有属性的字典</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>   <span class="token comment"># 获取 C 类所有方法的字典</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>    <span class="token comment"># 获取 x 的说明文档</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>  <span class="token comment"># 获取 x 所属的类</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>  <span class="token comment"># 获取 C 类所继承的父类类型组成的元组</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__base__<span class="token punctuation">)</span>   <span class="token comment"># 获取 C 类的基类</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span>    <span class="token comment"># 获取 C 类继承的层次结构/顺序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊方法" tabindex="-1"><a class="header-anchor" href="#特殊方法" aria-hidden="true">#</a> 特殊方法</h2><h3 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> __new__()</h3><p><em><strong>1&gt;</strong></em> 使用<code>类名()</code>创建对象时，Python 的解释器首先会调用 <code>__new__()</code> 方法为对象分配空间</p><p><em><strong>2&gt;</strong></em> <code>__new__()</code> 是一个由 object 基类提供的内置的静态方法，主要作用有两个：</p><p>①在内存中为对象分配空间</p><p>②返回对象的引用</p><p><em><strong>3&gt;</strong></em> Python 的解释器获得对象的引用后，将引用作为第一个参数，传递给 <code>__init__()</code> 方法</p><p><em><strong>4&gt;</strong></em> 重写 <code>__new__()</code> 方法的代码非常固定：</p><p>重写 <code>__new__()</code> 方法一定要 <code>return super().__new__(cls)</code>，否则 Python 的解释器得不到分配了空间的对象引用，就不会调用对象的初始化方法</p><p><em><strong>注</strong></em>：<code>__new__()</code> 是一个静态方法，在调用时需要主动传递 cls 参数</p><h3 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> __str__()</h3><p><em><strong>1&gt;</strong></em> <code>__str__()</code> 方法用于返回一个<em><strong>对象的描述</strong></em>，在 Python 中，使用 <code>print()</code> 输出对象变量，默认情况会输出这个变量引用的对象是由哪一个类创建的对象，以及在内存中的地址（十六进制表示）</p><p><em><strong>2&gt;</strong></em> 如果在开发中，希望使用 <code>print()</code> 输出对象变量时，能够输出自定义的内容，就可以利用 <code>__str__()</code> 方法</p><p><em><strong>注</strong></em>：<code>__str__()</code>方法必须返回一个字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;我的名字是{0}，今年{1}岁&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 查看对象的所有属性和方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>        <span class="token comment"># 默认会调用 __str__() 方法；__str__() 改写后会输出改写后的内容</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;__main__.Student&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他特殊方法" tabindex="-1"><a class="header-anchor" href="#其他特殊方法" aria-hidden="true">#</a> 其他特殊方法</h3><table><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>__init__()</code></td><td style="text-align:left;">对创建的对象进行初始化，类的实例化时自动被调用</td></tr><tr><td style="text-align:left;"><code>__del__()</code></td><td style="text-align:left;">当一个对象被从内存中销毁前，会自动调用<code>__del__()</code>方法，并且<code>__del__()</code>方法也是对象生命周期中能够调用的最后一个方法</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;__new__ 被调用执行了，cls 的 id 为 {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        obj <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;创建的对象的 id 为 {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> obj

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;__init__ 被调用了，self 的 id 为 {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;object 这个类对象的 id 为 {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Person 这个类对象的 id 为 {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 创建 Person 类的实例对象</span>
per <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;per 这个 Person 类的实例对象的 id 为 {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="私有属性和私有方法" tabindex="-1"><a class="header-anchor" href="#私有属性和私有方法" aria-hidden="true">#</a> 私有属性和私有方法</h2><p>不希望被公开访问的属性和方法就是私有属性和私有方法。可以通过在属性名或方法名前<em><strong>增加两个下划线</strong></em>的方式定义私有属性和私有方法</p><p><em><strong>1&gt;</strong></em> 私有属性在外部不能被直接访问</p><p><em><strong>2&gt;</strong></em> 私有方法在外部不能被直接调用</p><p><em><strong>3&gt;</strong></em> 在对象的方法内部是可以访问对象自己的私有属性和私有方法的</p><p><em><strong>4&gt;</strong></em> 可以通过<code>_类名__私有属性/私有方法名()</code>的方式访问私有属性和私有方法</p><h3 id="父类的私有属性和私有方法" tabindex="-1"><a class="header-anchor" href="#父类的私有属性和私有方法" aria-hidden="true">#</a> 父类的私有属性和私有方法</h3><p><em><strong>1&gt;</strong></em> 子类不能在自己的方法内部，直接访问父类的私有属性或私有方法</p><p><em><strong>2&gt;</strong></em> 如果父类的公有方法访问了自己的私有属性和私有方法，那么子类可以通过这个公有方法间接访问父类的私有属性和私有方法</p><h2 id="单例" tabindex="-1"><a class="header-anchor" href="#单例" aria-hidden="true">#</a> 单例</h2><p>单例是一种设计模式。设计模式是前人工作的总结和提炼，通常，被人们广泛流传的设计模式都是针对某一特定问题的成熟的解决方案，使用设计模式是为了可重用代码，让代码更容易被他人理解、保证代码可靠性</p><p><strong>单例设计模式</strong>：</p><p>①目的：让类创建的对象，在系统中只有唯一的一个实例</p><p>②每一次执行<code>类名()</code>创建对象时，返回的对象的内存地址是相同的</p><p>单例的实现需要重写 <code>__new__()</code> 方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 记录第一个被创建的对象的引用</span>
    instance <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 1.判断类属性是否是空对象</span>
        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># 2.调用父类的方法，为第一个对象分配空间</span>
            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>

        <span class="token comment"># 3.如果类属性不为空，返回类属性中保存的第一个被创建的对象的引用，保证后继被创建的对象的引用都和第一个对象的引用相同</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance

<span class="token comment"># 创建多个对象</span>
player1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span>
player2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在单例中，尽管所有对象的引用都被处理成了同一个，但是初始化方法在每次创建对象时都会被执行一次，为了让初始化方法只执行一次，需要再做特殊处理</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    instance <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token comment"># 记录是否执行过初始化动作</span>
    init_flag <span class="token operator">=</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 1.判断是否执行过初始化动作</span>
        <span class="token keyword">if</span> MusicPlayer<span class="token punctuation">.</span>init_flag<span class="token punctuation">:</span>  <span class="token comment"># 在初始化方法和实例方法中访问类属性，需要使用【类名.类属性名】的方式</span>
            <span class="token keyword">return</span>
        <span class="token comment"># 2.如果没有执行过初始化动作，就执行初始化动作</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;初始化方法被调用了&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 3.修改类属性的标记</span>
        MusicPlayer<span class="token punctuation">.</span>init_flag <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token comment"># 创建多个对象</span>
player1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span>
player2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","14_面向对象.html.vue"]]);export{k as default};
