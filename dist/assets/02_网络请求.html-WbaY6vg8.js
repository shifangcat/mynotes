import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const o={},p=e(`<h1 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h1><h2 id="urllib库" tabindex="-1"><a class="header-anchor" href="#urllib库" aria-hidden="true">#</a> urllib库</h2><ul><li><p><strong>request.urlopen函数</strong></p><p>在Python3的<code>urllib</code>库中，所有和网络请求相关的方法，都被集成到<code>urllib.request</code>模块下面了</p><p><code>urlopen</code>函数基本的使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request
res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>参数</strong></em>：</p><p><code>url</code>：请求的<code>url</code></p><p><code>data</code>：请求的<code>data</code>。如果设置了这个值，那么将变成<code>post</code>请求，默认是<code>get</code>请求</p><p><em><strong>返回值</strong></em>：</p><p>返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline()</code>、<code>readlines()</code>以及<code>getcode()</code>等方法</p></li><li><p><strong>request.urlretrieve函数</strong></p><p><em><strong>作用</strong></em>：将网页上的文件保存到本地</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request
request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baidu.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>parse.urlencode函数</strong></p><p><em><strong>作用</strong></em>：把数据转换为<code>URL</code>编码的数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse
params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;greet&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">}</span>
res <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>parse.parse_qs函数</strong></p><p><em><strong>作用</strong></em>：将经过编码后的<code>url</code>参数进行解码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse
qs <span class="token operator">=</span> <span class="token string">&quot;name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet=hello+world&amp;age=100&quot;</span>
res <span class="token operator">=</span> parse<span class="token punctuation">.</span>parse_qs<span class="token punctuation">(</span>qs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>parse.urlparse和parse.urlsplit函数</strong></p><p><em><strong>作用</strong></em>：<code>urlparse</code>和<code>urlsplit</code>函数可以将<code>url</code>中的各个组成部分进行分割</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse
url <span class="token operator">=</span> <span class="token string">&#39;http://www.baidu.com/s;hello?word=python&amp;username=tom#1&#39;</span>
res <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>urlparse</code>函数进行分割可以得到<code>scheme</code>(访问协议)、<code>netloc</code>(域名)、<code>path</code>(查找路径)、<code>params</code>(参数)、<code>query</code>(查询字符串)、<code>fragment</code>(锚点)等属性</p><p><code>urlsplit</code>函数和<code>urlparse</code>函数相比，没有<code>params</code>属性，其余属性和用法都相同</p></li><li><p><strong>request.Request类</strong></p><p><em><strong>作用</strong></em>：使用<code>request.Request</code>类实现在请求的时候增加一些请求头</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> parse
url <span class="token operator">=</span> <span class="token string">&#39;https://www.lagou.com/jobs/positionAjax.json?needAddtionalResult=false&#39;</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.62&#39;</span>
<span class="token punctuation">}</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;needAddtionalResult&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;false&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;5Eo7q9BrADL4o25y7H2zzv6RQrmREEWTafwaI3fxx2lr8Y9LhXD91r8ZAr6OJn9O&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span>
resp <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>ProxyHandler处理器（代理设置）</strong></p><p><em><strong>作用</strong></em>：设置代理服务器，更换访问的IP地址，防止IP被禁止访问</p><p><em><strong>原理</strong></em>：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，代理服务器拿到目的网站的数据之后，再转发给实际请求的代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request
url <span class="token operator">=</span> <span class="token string">&#39;http://httpbin.org/ip&#39;</span>
<span class="token comment"># 1.使用ProxyHandler，传入代理创建一个handler</span>
handler <span class="token operator">=</span> request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;106.15.197.250:8001&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 2.使用创建的handler构建一个opener</span>
opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
<span class="token comment"># 3.使用opener，调用open方法发送请求</span>
resp <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用代理：</p><p>快代理：http://www.kuaidaili.com/</p><p>代理云：http://www.dailiyun.com/</p><p><em><strong>注</strong></em>：http://httpbin.org网站可以方便地查看http请求的一些参数</p></li></ul><h2 id="urllib使用cookie" tabindex="-1"><a class="header-anchor" href="#urllib使用cookie" aria-hidden="true">#</a> urllib使用cookie</h2><ul><li><p><strong>cookie的格式</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Set-Cookie: NAME=VALUE；Expires/Max-age=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数意义：</p><p><code>NAME</code>：cookie的名字</p><p><code>VALUE</code>：cookie的值</p><p><code>Expires</code>：cookie的过期时间</p><p><code>Path</code>：cookie作用的路径</p><p><code>Domain</code>：cookie作用的域名</p><p><code>SECURE</code>：是否只在https协议下起作用</p></li><li><p><strong>使用http.cookiejar和HTTPCookieProcessor模拟登录</strong></p><p>对于一些需要登录后携带cookie才能访问的网页，有两种处理方法：</p><ul><li><p><em><strong>方法一：手动设置cookie</strong></em></p><p>使用浏览器访问，然后将cookie信息复制下来，放到headers中，访问时进行携带</p></li><li><p><em><strong>方法二：使用http.cookiejar模块自动登录</strong></em></p><p>在Python中处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib</code>模块的<code>HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块主要作用是提供用于存储<code>cookie</code>的对象；<code>HTTPCookieProcessor</code>处理器主要作用是处理这些<code>cookie</code>对象，并构建<code>handler</code>对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> parse
<span class="token keyword">from</span> http<span class="token punctuation">.</span>cookiejar <span class="token keyword">import</span> CookieJar
<span class="token comment"># 81zw网个人书架（需要登录后访问）：</span>
bookcase_url <span class="token operator">=</span> <span class="token string">&#39;https://www.81zw.com/bookcase.php&#39;</span>
login_url <span class="token operator">=</span> <span class="token string">&#39;https://www.81zw.com/login.php&#39;</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.62&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">get_opener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1.1 创建一个CookieJar的对象</span>
    cookiejar <span class="token operator">=</span> CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 1.2 使用CookieJar的对象创建一个HTTPCookieProcessor的对象（handler）</span>
    handler <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookiejar<span class="token punctuation">)</span>
    <span class="token comment"># 1.3 使用上一步创建的handler创建一个opener</span>
    opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
    <span class="token keyword">return</span> opener
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1.4 使用opener发送登录的请求（携带用户名和密码）</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;bamb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;bamb31415926&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
    req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">visit_bookcase</span><span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 2. 访问个人书架</span>
    <span class="token comment"># 访问个人书架的时候，不需要再新建一个opener，而应该使用上面创建的opener，因为上面创建的opener中已经包含了登录所需要的cookie信息</span>
    req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>bookcase_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    resp <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;81zw_me2.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    opener <span class="token operator">=</span> get_opener<span class="token punctuation">(</span><span class="token punctuation">)</span>
    login<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>
    visit_bookcase<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>http.cookiejar模块</strong></p><p>该模块主要的类有<code>CookieJar</code>、<code>FileCookieJar</code>、<code>MozillaCookieJar</code>、<code>LWPCookieJar</code>。作用如下：</p><p><em><strong>1&gt;</strong></em> <code>CookieJar</code>：管理<code>HTTP</code> <code>cookie</code>的值、存储<code>HTTP</code>请求生成的<code>cookie</code>、向传出的<code>HTTP</code>请求添加<code>cookie</code>的对象。整个<code>cookie</code>都存储在内存中，对<code>CookieJar</code>实例进行垃圾回收后<code>cookie</code>也将丢失</p><p><em><strong>2&gt;</strong></em> <code>FileCookieJar(filename,delayload=None,policy=None)</code>：从<code>CookieJar</code>派生而来，用来创建<code>FileCookieJar</code>实例，检索<code>cookie</code>信息并将<code>cookie</code>存储到文件中。<code>filename</code>是存储<code>cookie</code>的文件名；<code>delayload</code>为<code>True</code>时支持延迟访问文件，即只有在需要时才读取文件或在文件中存储数据</p><p><em><strong>3&gt;</strong></em> <code>MozillaCookieJar(filename,delayload=None,policy=None)</code>：从<code>FileCookieJar</code>派生而来，创建与<code>Mozilla</code>浏览器<code>cookies.txt</code>兼容的<code>FileCookieJar</code>实例</p><p><em><strong>4&gt;</strong></em> <code>LWPCookieJar(filename,delayload=None,policy=None)</code>：从<code>FileCookieJar</code>派生而来，创建与<code>libwww-perl</code>标准的<code>Set-Cookie3</code>文件格式兼容的<code>FileCookieJar</code>实例</p></li><li><p><strong>cookie的保存与加载</strong></p><p>保存<code>cookie</code>到本地，可以使用<code>MozillaCookieJar</code>对象的<code>save</code>方法，并且需要指定保存<code>cookie</code>的文件名</p><p>加载存储在本地的cookie，可以使用<code>MozillaCookieJar</code>对象的<code>load</code>方法，并且需要指定加载的文件名</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request
<span class="token keyword">from</span> http<span class="token punctuation">.</span>cookiejar <span class="token keyword">import</span> MozillaCookieJar
cookiejar <span class="token operator">=</span> MozillaCookieJar<span class="token punctuation">(</span><span class="token string">&#39;cookie.txt&#39;</span><span class="token punctuation">)</span>
handler <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookiejar<span class="token punctuation">)</span>
opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
resp <span class="token operator">=</span> opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com/&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># ignore_discard=True，表示能够保存和加载过期的cookie信息</span>
cookiejar<span class="token punctuation">.</span>save<span class="token punctuation">(</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
cookiejar<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="requests库" tabindex="-1"><a class="header-anchor" href="#requests库" aria-hidden="true">#</a> requests库</h2><p>安装：<code>pip install requests</code></p><p>中文文档：http://docs.python-requests.org/zh_CN/latest/index.html</p><p>github地址：https://github.com/requests/requests</p><ul><li><p><strong>requests发送GET请求</strong></p><ul><li><p><em><strong>直接调用requests.get发送get请求</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com/&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>添加headers和查询参数</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;中国&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;xxxxxxxx&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com/s&#39;</span><span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>get请求的一些属性</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 查看响应内容，返回的是Unicode格式的数据，可能会出现乱码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;bytes&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 查看响应内容，返回的是字节流数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 手动解码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment"># 查看完整url地址</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>  <span class="token comment"># 查看响应头部字符编码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment"># 查看响应状态码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：<code>response.text</code>和<code>response.content</code>的区别：</p><p><em><strong>1&gt;</strong></em> <code>response.content</code>：直接从网络上抓取的数据，没有经过任何解码的<code>bytes</code>类型的数据</p><p><em><strong>2&gt;</strong></em> <code>response.text</code>：<code>str</code>类型的数据，是<code>requests</code>按照自己猜测的编码方式将<code>request.content</code>进行解码后得到的字符串，可能会出现乱码。出现乱码就需要进行手动解码</p></li></ul></li><li><p><strong>requests发送POST请求</strong></p><p>直接调用<code>requests.post</code>方法即可</p><p>如果返回的是<code>json</code>数据，可以调用<code>response.json()</code>将字符串转换为字典或者列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com/&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>requests使用代理</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
proxy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;14.215.212.37:9168&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/ip&#39;</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>requests使用cookie和session</strong></p><ul><li><p><em><strong>cookie</strong></em></p><p>使用<code>response</code>的<code>cookie</code>属性即可获取请求返回的<code>cookie</code>信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 让cookie以字典的形式显示</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>session</strong></em></p><p><code>session</code>可以实现在多次请求中共享<code>cookie</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建session</span>
session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 使用session登录</span>
response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>bookcase_url<span class="token punctuation">)</span>  <span class="token comment"># 使用存储了登录信息的session访问页面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>requests处理不信任的SSL证书</strong></p><p>对于使用不信任的SSL证书的网站，可以通过添加<code>verify=False</code>参数正常地获取响应</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.tianya.cn/&#39;</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,10),t=[p];function c(i,l){return s(),a("div",null,t)}const d=n(o,[["render",c],["__file","02_网络请求.html.vue"]]);export{d as default};
