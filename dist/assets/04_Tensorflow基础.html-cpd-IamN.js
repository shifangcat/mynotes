import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as s,f as e}from"./app-VKLC1A-x.js";const a="/mynotes/assets/可视化学习中符号的意义-TVl0U94M.png",o={},p=e(`<h1 id="tensorflow基础" tabindex="-1"><a class="header-anchor" href="#tensorflow基础" aria-hidden="true">#</a> Tensorflow基础</h1><h3 id="tensorflow介绍" tabindex="-1"><a class="header-anchor" href="#tensorflow介绍" aria-hidden="true">#</a> Tensorflow介绍</h3><p>中文官网：https://tensorflow.google.cn/</p><p>API文档：https://tensorflow.google.cn/versions/r1.15/api_docs/python/tf</p><p>Github主页：https://github.com/tensorflow/tensorflow</p><p>Tensorflow安装：https://tensorflow.google.cn/install</p><p>（本次使用的是1.2版本的Tensorflow）</p><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h2><p>图默认已经注册，包含了一组表示计算单位的对象（tf.Operation）和表示操作之间流动的数据单元的对象（tf.Tensor），相当于是给程序分配了一段内存</p><h3 id="获取图" tabindex="-1"><a class="header-anchor" href="#获取图" aria-hidden="true">#</a> 获取图</h3><p><em><strong>1&gt;</strong></em> <code>tf.get_default_graph()</code></p><p><em><strong>2&gt;</strong></em> <code>op</code>、<code>sess</code>或者<code>tensor</code>的<code>graph</code>属性</p><h3 id="图的创建和使用" tabindex="-1"><a class="header-anchor" href="#图的创建和使用" aria-hidden="true">#</a> 图的创建和使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建图，包含了一组op和tensor</span>
<span class="token comment"># op：只要使用tensorflow的API定义的函数都是op</span>
<span class="token comment"># tensor：指代的是数据</span>
<span class="token comment"># 可以理解为op是载体，tensor是被携带的数据</span>
g <span class="token operator">=</span> tf<span class="token punctuation">.</span>Graph<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>

<span class="token comment"># 使用图</span>
<span class="token keyword">with</span> g<span class="token punctuation">.</span>as_default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="op是什么" tabindex="-1"><a class="header-anchor" href="#op是什么" aria-hidden="true">#</a> op是什么</h3><p>只要使用tensorflow的API定义的函数都是op</p><table><thead><tr><th><strong>类型</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>标量运算</td><td>Add、Sub、Mul、Div、Exp、Log、Greater、Less、Equal</td></tr><tr><td>向量运算</td><td>Concat、Slice、Splot、Constant、Rank、Shape、Shuffle</td></tr><tr><td>矩阵运算</td><td>Matmul、MatrixInverse、MatrixDeterminant</td></tr><tr><td>带状态的运算</td><td>Variable、Assign、AssignAdd</td></tr><tr><td>神经网络组件</td><td>SoftMax、Sigmoid、ReLU、Convolution2D、MaxPooling</td></tr><tr><td>存储、恢复</td><td>Save、Restore</td></tr><tr><td>队列及同步运算</td><td>Enqueue、Dequeue、MutexAcquire、MutexRelease</td></tr><tr><td>控制流</td><td>Merge、Switch、Enter、Leave、Nextlteration</td></tr></tbody></table><h2 id="会话" tabindex="-1"><a class="header-anchor" href="#会话" aria-hidden="true">#</a> 会话</h2><p>会话可能拥有很多资源，如：tf.Variable，tf.QueueBase和tf.ReaderBase，会话结束后需要进行资源释放</p><h3 id="使用会话" tabindex="-1"><a class="header-anchor" href="#使用会话" aria-hidden="true">#</a> 使用会话</h3><ul><li><p><strong>方式一</strong></p><p><code>sess = tf.Session()</code>：创建一个会话，默认使用默认注册的图，可以通过<code>graph</code>参数指定运行的图</p><p><code>sess.run(...)</code>：启动整个图</p><p><code>sess.close()</code>：关闭会话</p></li><li><p><strong>方式二</strong></p><p>使用上下文管理器</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span> 
	sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><code>config=tf.ConfigProto(log_device_placement=True)</code></p><p><code>tf.InteractiveSession()</code>：开启一个交互式的Session会话</p><h3 id="会话的run-方法" tabindex="-1"><a class="header-anchor" href="#会话的run-方法" aria-hidden="true">#</a> 会话的run()方法</h3><p><code>run(fetches, feed_dict=None, graph=None)</code></p><p><em><strong>1&gt;</strong></em> <code>run()</code>方法的<code>fetches</code>参数只能接收一个值，需要传递多个值时可以使用列表或元组</p><p><em><strong>2&gt;</strong></em> 单纯的Python变量不能在<code>run()</code>方法中运行，可以通过运算符<em><strong>重载</strong></em>的方式进行运行</p><p><em><strong>3&gt;</strong></em> 参数<code>feed_dict</code>是一个字典，允许调用者覆盖图中指定张量的值，通常配合<code>placeholder</code>使用，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># placeholder是一个占位符，第一个参数是数据类型，第二个参数是数据的形状</span>
plh <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 当形状不确定时可以用None代替</span>
plh <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plh <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>plh<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>plh<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>返回值异常</strong></p><p>RuntimeError：如Session处于无效状态（例如已关闭）</p><p>TypeError：如fetches或feed_dict的键是不合适的类型</p><p>ValueError：如fetches或feed_dict的键无效或引用的Tensor不存在</p></li></ul><h2 id="张量" tabindex="-1"><a class="header-anchor" href="#张量" aria-hidden="true">#</a> 张量</h2><p>张量是Tensorflow中的一种基本的数据格式，是一个类型化的N维度数组（tf.Tensor），由三部分组成，分别是：名字、形状、数据类型</p><h3 id="张量的阶" tabindex="-1"><a class="header-anchor" href="#张量的阶" aria-hidden="true">#</a> 张量的阶</h3><table><thead><tr><th><strong>阶</strong></th><th><strong>数学实例</strong></th><th><strong>Python</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>0</td><td>纯量</td><td>只有大小</td><td>s = 12</td></tr><tr><td>1</td><td>向量</td><td>大小和方向</td><td>a = [1, 2, 3]</td></tr><tr><td>2</td><td>矩阵</td><td>数据表</td><td>b = [[1, 2, 3], [4, 5, 6]]</td></tr><tr><td>3</td><td>3阶张量</td><td>数据立体</td><td>c = [[[1], [2], [3]],[[4], [5], [6]]]</td></tr><tr><td>n</td><td>n阶</td><td>...</td><td>...</td></tr></tbody></table><h3 id="张量的数据类型" tabindex="-1"><a class="header-anchor" href="#张量的数据类型" aria-hidden="true">#</a> 张量的数据类型</h3><table><thead><tr><th style="text-align:left;"><strong>数据类型</strong></th><th style="text-align:left;"><strong>Python类型</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">DT_FLOAT</td><td style="text-align:left;">tf.float32</td><td style="text-align:left;">32位浮点数</td></tr><tr><td style="text-align:left;">DT_DOUBLE</td><td style="text-align:left;">tf.float64</td><td style="text-align:left;">64位浮点数</td></tr><tr><td style="text-align:left;">DT_INT64</td><td style="text-align:left;">tf.int64</td><td style="text-align:left;">64位有符号整型</td></tr><tr><td style="text-align:left;">DT_INT32</td><td style="text-align:left;">tf.int32</td><td style="text-align:left;">32位有符号整型</td></tr><tr><td style="text-align:left;">DT_INT16</td><td style="text-align:left;">tf.int16</td><td style="text-align:left;">16位有符号整型</td></tr><tr><td style="text-align:left;">DT_INT8</td><td style="text-align:left;">tf.int8</td><td style="text-align:left;">8位有符号整型</td></tr><tr><td style="text-align:left;">DT_UINT8</td><td style="text-align:left;">tf.uint8</td><td style="text-align:left;">8位无符号整型</td></tr><tr><td style="text-align:left;">DT_STRING</td><td style="text-align:left;">tf.string</td><td style="text-align:left;">可变长度的字节数组，每一个张量元素都是一个字节数组</td></tr><tr><td style="text-align:left;">DT_BOOL</td><td style="text-align:left;">tf.bool</td><td style="text-align:left;">布尔型</td></tr><tr><td style="text-align:left;">DT_COMPLEX64</td><td style="text-align:left;">tf.complex64</td><td style="text-align:left;">由两个32位浮点数组成的复数:实数和虚数</td></tr><tr><td style="text-align:left;">DT_QINT32</td><td style="text-align:left;">tf.qint32</td><td style="text-align:left;">用于量化Ops的32位有符号整型</td></tr><tr><td style="text-align:left;">DT_QINT8</td><td style="text-align:left;">tf.qint8</td><td style="text-align:left;">用于量化Ops的8位有符号整型</td></tr><tr><td style="text-align:left;">DT_QUINT8</td><td style="text-align:left;">tf.quint8</td><td style="text-align:left;">用于量化Ops的8位无符号整型</td></tr></tbody></table><h3 id="张量的属性" tabindex="-1"><a class="header-anchor" href="#张量的属性" aria-hidden="true">#</a> 张量的属性</h3><p><code>graph</code>：张量所属的默认图</p><p><code>op</code>：张量的操作名</p><p><code>name</code>：张量的字符串描述</p><p><code>shape</code>：张量的形状</p><h3 id="张量的动态形状和静态形状" tabindex="-1"><a class="header-anchor" href="#张量的动态形状和静态形状" aria-hidden="true">#</a> 张量的动态形状和静态形状</h3><ul><li><p><strong>静态形状</strong></p><p>创建一个张量或者由操作推导出一个张量时，初始状态的形状</p><p><code>tf.Tensor.get_shape</code>：获取张量的静态形状</p><p><code>tf.Tensor.set_shape()</code>：修改张量的静态形状</p><p><em><strong>注</strong></em>：对于张量的静态形状来说，一旦静态形状固定了，则不能再进行修改；同时静态形状不能跨维度修改</p></li><li><p><strong>动态形状</strong></p><p>一种描述原始张量在执行过程中的形状</p><p><code>tf.reshape()</code>：创建一个具有不同动态形状的新张量</p><p><em><strong>注</strong></em>：通过动态形状进行修改会创建一个新的张量，需要注意元素的数量要匹配</p></li></ul><h3 id="生成张量" tabindex="-1"><a class="header-anchor" href="#生成张量" aria-hidden="true">#</a> 生成张量</h3><ul><li><p><strong>生成固定值张量</strong></p><p><em><strong>1&gt;</strong></em> <code>tf.zeros(shape, dtype=None, name=Name)</code>：生成值全为0，形状为shape的张量</p><p><em><strong>2&gt;</strong></em> <code>tf.zeros_like(tensor, dtype=None, name=Name)</code>：生成值全为0，形状和tensor相同的张量</p><p><em><strong>3&gt;</strong></em> <code>tf.ones(shape, dtype=None, name=Name)</code>：生成值全为1，形状为shape的张量</p><p><em><strong>4&gt;</strong></em> <code>tf.ones_like(tensor, dtype=None, name=Name)</code>：生成值全为1，形状和tensor相同的张量</p><p><em><strong>5&gt;</strong></em> <code>tf.fill(dims, value, name=Name)</code>：生成形状为dims，值全为value的张量</p><p><em><strong>6&gt;</strong></em> <code>tf.constant(value, dtype=None, shape=None, name=None)</code>：生成一个常数张量</p></li><li><p><strong>生成随机张量</strong></p><p><code>tf.truncated_normal(shape, mean=0, stddev=2, dtype=None, seed=None, name=None)</code></p><p><code>tf.random_normal(shape, mean=0, stddev=2, dtype=None, seed=None, name=None)</code></p><p>生成形状为shape，平均值为mean，标准差为stddev，符合正态分布的张量</p></li></ul><h3 id="张量变换" tabindex="-1"><a class="header-anchor" href="#张量变换" aria-hidden="true">#</a> 张量变换</h3><ul><li><p><strong>改变数据类型</strong></p><p><em><strong>1&gt;</strong></em> <code>tf.string_to_number(string_tensor, out_type=None, name=None)</code></p><p><em><strong>2&gt;</strong></em> <code>tf.to_double(tensor, name=None)</code></p><p><em><strong>3&gt;</strong></em> <code>tf.to_float(tensor, name=None)</code></p><p><em><strong>4&gt;</strong></em> <code>tf.to_bfloat(tensor, name=None)</code></p><p><em><strong>5&gt;</strong></em> <code>tf.to_int32(tensor, name=None)</code></p><p><em><strong>6&gt;</strong></em> <code>tf.to_int64(tensor, name=None)</code></p><p><em><strong>7&gt;</strong></em> <code>tf.cast(tensor, dtype, name=None)</code>：将张量tensor转换为数据类型为dtype的张量</p></li><li><p><strong>形状和变换</strong></p><p><em><strong>1&gt;</strong></em> <code>tf.shape(tensor, name=None)</code>：获取张量的形状</p><p><em><strong>2&gt;</strong></em> <code>tf.size(tensor, name=None)</code>：获取张量中数据的总数量</p><p><em><strong>3&gt;</strong></em> <code>tf.rank(tensor, name=None)</code>：获取张量的维度</p><p><em><strong>4&gt;</strong></em> <code>tf.reshape(tensor, shape, name=None)</code>：修改张量的动态形状</p><p><em><strong>5&gt;</strong></em> <code>tf.squeeze(tensor, squeeze_dims=None, name=None)</code></p><p><em><strong>6&gt;</strong></em> <code>tf.expand_dims(tensor, dim, name=None)</code></p></li><li><p><strong>切片与扩展</strong></p><p><code>tf.concat(values, axis, name=None)</code>：values是元组或列表，放入要合并的张量；axis指定合并的方向，0表示行合并，1表示列合并。如：<code>tf.concat((a, b), 0)</code></p></li></ul><p>（详细的API文档：https://tensorflow.google.cn/versions/r1.15/api_docs/python/tf）</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>变量也是一种OP，是一种特殊的张量，能够进行存储持久化，它的值就是张量，默认被训练</p><h3 id="创建变量" tabindex="-1"><a class="header-anchor" href="#创建变量" aria-hidden="true">#</a> 创建变量</h3><p><code>tf.Variable(initial_value=None, name=None, trainable=True)</code></p><blockquote><p><code>initial_value</code>：为变量指定一个初始值</p><p><code>trainable</code>：指定这个变量能否在训练时进行优化（默认为True，可以优化）</p></blockquote><p>当定义一个变量op的时候，一定要在会话当中运行初始化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 添加并开启初始化所有变量的op</span>
sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量的作用域" tabindex="-1"><a class="header-anchor" href="#变量的作用域" aria-hidden="true">#</a> 变量的作用域</h3><p>使用变量的作用域可以让模型代码更加清晰，作用分明</p><p><code>tf.variable_scope(&lt;scope_name&gt;)</code>：创建指定名字的 变量作用域，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;optimize&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增加变量显示" tabindex="-1"><a class="header-anchor" href="#增加变量显示" aria-hidden="true">#</a> 增加变量显示</h3><p><strong>目的</strong>：为了能够在Tensorboard中观察模型的参数、损失值等变量值的变化情况</p><p>在Tensorboard中增加变量的显示分为两步：</p><ul><li><p><strong>第一步：收集变量</strong></p><p><em><strong>1&gt;</strong></em> <code>tf.summary.scalar(name=None, tensor)</code>：收集损失函数和准确率等单值变量，name为变量在Tensorboard中显示的名字，tensor为要收集的变量</p><p><em><strong>2&gt;</strong></em> <code>tf.summary.histogram(name=None, tensor)</code>：收集高维度的变量</p><p><em><strong>3&gt;</strong></em> <code>tf.summary.image(name=None, tensor)</code>：收集输入的图片张量</p></li><li><p><strong>第二步：合并变量并写入事件文件</strong></p><p><code>merged = tf.summary.merge_all()</code>：合并所有已经收集的变量</p><p><code>summary = sess.run(merged)</code>：运行合并，每次迭代都需要运行</p><p><code>FileWriter.add_summary(summary, i)</code>：添加到事件文件中，i表示迭代的次数</p></li></ul><h2 id="可视化学习" tabindex="-1"><a class="header-anchor" href="#可视化学习" aria-hidden="true">#</a> 可视化学习</h2><p><em><strong>1&gt;</strong></em> <strong>数据序列化-events文件</strong>：TensorBoard通过读取TensorFlow的事件文件来运行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>filewriter <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>FileWriter<span class="token punctuation">(</span><span class="token string">&#39;./temp/summary/demo/&#39;</span><span class="token punctuation">,</span> graph<span class="token operator">=</span>sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>
<span class="token comment"># 返回filewriter，写入事件文件到指定目录(最好用绝对路径)，以提供给tensorboard使用</span>
<span class="token comment"># 绝对路径中最好不要有中文，否则可能会无法打开</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> <strong>在命令行开启</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tensorboard <span class="token operator">-</span><span class="token operator">-</span>logdir<span class="token operator">=</span><span class="token string">&quot;./temp/summary/demo/&quot;</span>
<span class="token comment"># 一般浏览器打开为127.0.0.1:6006</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：修改程序后，再保存一遍会产生新的事件文件，默认打开最新的</p><p>可视化学习中符号的意义：</p><img src="`+a+`" alt="可视化学习中符号的意义" style="zoom:67%;"><h2 id="运算api" tabindex="-1"><a class="header-anchor" href="#运算api" aria-hidden="true">#</a> 运算API</h2><p>矩阵运算：<code>tf.matmul(x, w)</code></p><p>平方：<code>tf.square()</code></p><p>均值：<code>tf.reduce_mean()</code></p><ul><li><p><strong>梯度下降的API</strong></p><p><code>tf.train.GradientDescentOptimizer(learning_rate)</code></p><blockquote><p><code>learning_rate</code>：学习率</p></blockquote><p><strong>方法</strong>：<code>minimize(loss)</code>：损失最小化</p><p><strong>返回值</strong>：梯度下降op</p></li><li><p><strong>梯度爆炸/梯度消失</strong></p><p>在极端情况下，权重的值变得非常大，以至于溢出，导致NaN值，深度神经网络（如RNN）中更容易出现</p><ul><li><p><em><strong>解决方法</strong></em>：</p><p><em><strong>1&gt;</strong></em> 重新设计网络</p><p><em><strong>2&gt;</strong></em> 调整学习率</p><p><em><strong>3&gt;</strong></em> 使用梯度截断（在训练过程中检查和限制梯度的大小）</p><p><em><strong>4&gt;</strong></em> 使用激活函数</p></li></ul></li></ul><h2 id="模型的保存与加载" tabindex="-1"><a class="header-anchor" href="#模型的保存与加载" aria-hidden="true">#</a> 模型的保存与加载</h2><p><strong>创建模型保存与加载的op</strong>：</p><p><code>saver = tf.train.Saver(var_list=None, max_to_keep=5)</code></p><blockquote><p><code>var_list</code>：指定要保存和还原的变量，可以是字典和列表</p><p><code>max_to_keep</code>：指定要保留的最近检查点文件的最大数量（默认保留5个）</p></blockquote><p><strong>保存</strong>：<code>saver.save(sess, &#39;./temp/ckpt/&lt;model_name&gt;&#39;)</code></p><p><strong>加载</strong>：<code>saver.restore(sess, &#39;./temp/ckpt/&lt;model_name&gt;&#39;)</code></p><h2 id="自定义命令行参数" tabindex="-1"><a class="header-anchor" href="#自定义命令行参数" aria-hidden="true">#</a> 自定义命令行参数</h2><p>当想要在命令行中运行tensorflow程序时，可以借助<code>tf.app.flags</code>来传递参数</p><p><em><strong>1&gt;</strong></em> 在<code>tf.app.flags</code>中可以定义多种类型的参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 参数分别为：名字、默认值、说明</span>
tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_integer<span class="token punctuation">(</span>flag_name<span class="token punctuation">,</span> default_value<span class="token punctuation">,</span> docstring<span class="token punctuation">)</span>
tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span>flag_name<span class="token punctuation">,</span> default_value<span class="token punctuation">,</span> docstring<span class="token punctuation">)</span>
tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_float<span class="token punctuation">(</span>flag_name<span class="token punctuation">,</span> default_value<span class="token punctuation">,</span> docstring<span class="token punctuation">)</span>
tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_boolean<span class="token punctuation">(</span>flag_name<span class="token punctuation">,</span> default_value<span class="token punctuation">,</span> docstring<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 使用<code>tf.app.flags.FLAGS</code>可以通过<code>flag_name</code>获取定义的命令行参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>FLAGS<span class="token punctuation">.</span>max_step
FLAGS<span class="token punctuation">.</span>model_dir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 在命令行中使用如下命令进行启动：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python demo<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>max_step<span class="token operator">=</span><span class="token number">300</span> <span class="token operator">-</span><span class="token operator">-</span>model_dir<span class="token operator">=</span><span class="token string">&quot;./temp/ckpt/testmodel&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,90),d=[p];function r(l,c){return t(),s("div",null,d)}const g=n(o,[["render",r],["__file","04_Tensorflow基础.html.vue"]]);export{g as default};
