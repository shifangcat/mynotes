import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const t={},p=e(`<h1 id="移动端页面开发" tabindex="-1"><a class="header-anchor" href="#移动端页面开发" aria-hidden="true">#</a> 移动端页面开发</h1><h2 id="移动端与pc端页面布局区别" tabindex="-1"><a class="header-anchor" href="#移动端与pc端页面布局区别" aria-hidden="true">#</a> 移动端与PC端页面布局区别</h2><ul><li><p><strong>视口</strong></p><p>视口是移动设备上用来显示网页的区域，一般会比移动设备可视区域大，宽度可能是980px或者1024px，目的是为了显示下整个为PC端设计的网页，这样带来的后果是移动端会出现横向滚动条。为了避免这种情况，移动端会将视口缩放到移动端窗口的大小，但是这样会让网页不容易观看</p><p>解决的办法是在head中使用meta标签，<code>name=&quot;viewport&quot;</code>来设置视口的大小，将视口的大小设置为和移动设备可视区域一样的大小，创建的快捷方式为：<code>meta:vp + tab</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, user-scalable=no,
 initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>视网膜屏幕（retina屏幕）清晰度解决方案</strong></p><p>使用比原来大一倍的图像，用CSS样式强制把图像的尺寸设为原来图像尺寸的大小</p></li><li><p><strong>背景图尺寸设置</strong></p><ul><li><code>background-size: x y;</code>x，y可以是像素数值也可以是百分比，用于设置背景图的尺寸或者为盒子长宽的百分之多少；一个值默认设置宽度，长度为背景图实际尺寸的等比缩放</li><li><code>background-size: auto;</code>背景图的真实大小，默认值</li><li><code>background-size: cover;</code>一张背景图等比缩放到刚好能够完全覆盖住盒子，背景图像有可能超出盒子</li><li><code>background-size: contain;</code>背景图等比缩放到刚好能够被盒子完全包含住，一个盒子里面可能有多张背景图</li></ul></li></ul><h2 id="适配布局类型" tabindex="-1"><a class="header-anchor" href="#适配布局类型" aria-hidden="true">#</a> 适配布局类型</h2><ul><li><p><strong>PC端及移动端页面适配方法</strong></p><ul><li><p>全适配：响应式布局+流体布局</p></li><li><p>移动端适配：</p><ul><li>流体布局+少量响应式</li><li>基于rem的布局</li></ul><p><em><strong>注</strong></em>：移动端布局时，用Photoshop测量的宽高都要除以2，使用rem插件时可以通过设置使其满足自动除2，省去人工计算</p></li></ul></li><li><p><strong>流体布局</strong></p><p>流体布局，就是使用百分比来设置元素的宽度，元素的高度按实际高度写固定值</p><p>流体布局中，元素的border无法用百分比，可以使用样式中的计算函数calc()来设置宽度，或者使用box-sizing属性将盒子设置为从边线计算盒子尺寸</p><ul><li><p><em><strong>calc()</strong></em></p><p>通过计算的方式给元素设置尺寸，如：<code>width: calc(25% - border占用的宽度);</code></p></li><li><p><em><strong>box-sizing属性</strong></em></p><ul><li><code>box-sizing: content-box;</code>默认的盒子尺寸计算方式：<code>盒子尺寸 = width/height + padding + border</code></li><li><code>box-sizing: border-box;</code>设置盒子的尺寸计算方式为从border开始，盒子的尺寸、border和padding计算在盒子尺寸内：<code>width/height = 内容尺寸 + padding + border</code></li></ul></li></ul></li><li><p><strong>响应式布局</strong></p><p>响应式布局就是使用媒体查询的方式，通过查询浏览器宽度，不同的宽度应用不同的样式块，每个样式块对应的是该宽度下的布局方式，从而实现响应式布局。</p><p>响应式布局的页面可以适配多种终端屏幕（PC、平板、手机）</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>800px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
    <span class="token selector">.con div</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 46%<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
    <span class="token selector">.con div</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 94%<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>基于rem的布局</strong></p><ul><li><p><em><strong>em单位</strong></em></p><p>em单位是参照元素自身的文字大小来设置尺寸，1em = 1文字大小</p></li><li><p><em><strong>rem单位</strong></em></p><p>rem单位是参照根节点html标签的文字大小来设置尺寸，1rem = 1文字大小</p></li></ul><p>rem相较于em有了统一的参照标准，改变html文字的大小，就会改变所有用rem设置尺寸的元素大小</p><ul><li><p><em><strong>cssrem安装</strong></em></p><p>Sublime Text的cssrem插件可以动态地将px尺寸换算成rem尺寸</p><p>下载及安装说明：https://github.com/flashlizi/cssrem</p></li></ul></li></ul>`,5),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","05_移动端页面开发.html.vue"]]);export{d as default};
