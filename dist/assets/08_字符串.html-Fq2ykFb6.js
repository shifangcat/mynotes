import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const p={},e=t(`<h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>java.lang.String</code> 类代表字符串，Java 程序中的所有字符串都是此类的对象</p><p><em><strong>注</strong></em>：字符串的<em><strong>内容是不会发生改变的</strong></em>，它的对象在创建后不能被更改</p><h2 id="字符串的创建" tabindex="-1"><a class="header-anchor" href="#字符串的创建" aria-hidden="true">#</a> 字符串的创建</h2><p><em><strong>1&gt;</strong></em> 直接赋值，如：<code>String name = &quot;zhangsan&quot;;</code></p><p><em><strong>2&gt;</strong></em> 通过 <code>new</code> 使用构造方法：</p><table><thead><tr><th style="text-align:left;"><strong>构造方法</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">public String()</td><td style="text-align:left;">创建空白字符串，不含任何内容</td></tr><tr><td style="text-align:left;">public String(String original)</td><td style="text-align:left;">根据传入的字符串创建字符串对象</td></tr><tr><td style="text-align:left;">public String(char[] chs)</td><td style="text-align:left;">根据字符数组创建字符串对象</td></tr><tr><td style="text-align:left;">public String(byte[] chs)</td><td style="text-align:left;">根据字节数组创建字符串对象</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo01</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 直接赋值创建字符串</span>
		<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>

		<span class="token comment">// 使用 new 的方式创建字符串</span>
		<span class="token comment">// 空参构造：可以获取一个空白的字符串对象</span>
		<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// @!</span>

		<span class="token comment">// 根据传入的字符串创建字符串对象</span>
		<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abcd</span>

		<span class="token comment">// 根据字符数组创建字符串对象</span>
		<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abcde</span>

		<span class="token comment">// 根据字节数组创建字符串对象</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abcdef</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串的比较" tabindex="-1"><a class="header-anchor" href="#字符串的比较" aria-hidden="true">#</a> 字符串的比较</h2><p><code>==</code> 号在比较基本数据类型时，比较的是<em><strong>数据值</strong></em>；比较引用数据类型时，比较的是<em><strong>地址值</strong></em></p><p><strong>字符串的比较方法</strong>：</p><p><em><strong>1&gt;</strong></em> <code>str1.equals(str2)</code>：大小写敏感，相同返回 <code>true</code>，不同返回 <code>false</code></p><p><em><strong>2&gt;</strong></em> <code>str1.equalsIgnoreCase(str2)</code>：忽略大小写，相同返回 <code>true</code>，不同返回 <code>false</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo02</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建两个字符串对象</span>
		<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;Abc&quot;</span><span class="token punctuation">;</span>

		<span class="token comment">// 使用 == 比较</span>
		<span class="token comment">// 比较基本数据类型时，比较的是数据值</span>
		<span class="token comment">// 比较引用数据类型时，比较的是地址值</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

		<span class="token comment">// 比较内容是否相同</span>
		<span class="token comment">// equals：大小写敏感</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

		<span class="token comment">// equalsIgnoreCase：忽略大小写</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串的遍历" tabindex="-1"><a class="header-anchor" href="#字符串的遍历" aria-hidden="true">#</a> 字符串的遍历</h2><p><code>str.length()</code>：获取字符串的长度</p><p><code>str.charAt(index)</code>：通过索引获取字符串中的字符</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo04</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>

		<span class="token comment">// 遍历字符串</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串截取" tabindex="-1"><a class="header-anchor" href="#字符串截取" aria-hidden="true">#</a> 字符串截取</h2><p><code>str.substring(start, end)</code>：截取索引从 <code>start</code> 到 <code>end-1</code> 的字符，即 <code>[start, end)</code></p><p><code>str.substring(start)</code>：从索引 <code>start</code> 开始，一直截取到字符串末尾</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo05</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> tel <span class="token operator">=</span> <span class="token string">&quot;13712345678&quot;</span><span class="token punctuation">;</span>

		<span class="token comment">// 截取手机号码前 3 位</span>
		<span class="token class-name">String</span> start <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 截取手机号码后 4 位</span>
		<span class="token class-name">String</span> end <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 加密拼接</span>
		<span class="token class-name">String</span> result <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token string">&quot;****&quot;</span> <span class="token operator">+</span> end<span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 137****5678</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串替换" tabindex="-1"><a class="header-anchor" href="#字符串替换" aria-hidden="true">#</a> 字符串替换</h2><p><code>str.replace(oldstr, newstr)</code>：将字符串的 <code>oldstr</code> 替换为 <code>newstr</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo06</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello Java</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder</h2><p>StringBuilder 可以看成是一个容器，创建之后<em><strong>里面的内容是可变的</strong></em></p><p><strong>作用</strong>：提高字符串的操作效率，<em><strong>常用于字符串的拼接和反转</strong></em></p><p><strong>构造方法</strong>：</p><table><thead><tr><th style="text-align:left;"><strong>方法名</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">public StringBuiler()</td><td style="text-align:left;">创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td style="text-align:left;">public StringBuilder(String str)</td><td style="text-align:left;">根据字符串的内容创建可变字符串对象</td></tr></tbody></table><p><strong>常用成员方法</strong>：</p><table><thead><tr><th style="text-align:left;"><strong>方法名</strong></th><th style="text-align:left;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:left;">public StringBuilder append(任意类型)</td><td style="text-align:left;">添加数据，并返回对象本身</td></tr><tr><td style="text-align:left;">public StringBuilder reverse()</td><td style="text-align:left;">反转容器中的内容</td></tr><tr><td style="text-align:left;">public int length()</td><td style="text-align:left;">返回长度（字符的个数）</td></tr><tr><td style="text-align:left;">public String toString()</td><td style="text-align:left;">将 StringBuilder 对象转换为 String 对象</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo01</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建对象</span>
		<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 因为 StringBuilder 是 Java 已经写好的类</span>
		<span class="token comment">// Java 在底层对他做了一些处理，所以打印对象显示的不是地址值，而是属性值</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>

		<span class="token comment">// 添加元素</span>
		sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc13.14true</span>

		<span class="token comment">// 反转内容</span>
		sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eurt41.31cba</span>

		<span class="token comment">// 获取长度</span>
		<span class="token keyword">int</span> len <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>

		<span class="token comment">// 将 StringBuilder 对象转换为 String 对象</span>
		<span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eurt41.31cba</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringjoiner" tabindex="-1"><a class="header-anchor" href="#stringjoiner" aria-hidden="true">#</a> StringJoiner</h2><p>StringJoiner 和 StringBuilder 一样，也可以看成是一个容器，创建之后里面的内容是可变的</p><p><strong>作用</strong>：提高字符串的操作效率，<em><strong>常用于字符串的拼接</strong></em></p><p>JDK8 出现的</p><p><strong>构造方法</strong>：</p><table><thead><tr><th style="text-align:left;"><strong>方法名</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">public StringJoiner(间隔符号)</td><td style="text-align:left;">创建 StringJoiner 对象，指定拼接时的间隔符号</td></tr><tr><td style="text-align:left;">public StringJoiner(间隔符号, 开始符号, 结束符号)</td><td style="text-align:left;">创建 StringJoiner 对象，指定拼接时的间隔符号、开始和结束的符号</td></tr></tbody></table><p><strong>常用成员方法</strong>：</p><table><thead><tr><th style="text-align:left;"><strong>方法名</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">public StringJoiner add(添加的字符串)</td><td style="text-align:left;">添加数据，并返回对象本身（只能添加字符串）</td></tr><tr><td style="text-align:left;">public int length()</td><td style="text-align:left;">返回长度（拼接后的字符个数）</td></tr><tr><td style="text-align:left;">public String toString()</td><td style="text-align:left;">将 StringJoiner 对象转换为 String 对象</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringJoinerDemo01</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建 StringJoiner 对象，并指定间隔符号</span>
		<span class="token class-name">StringJoiner</span> sj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 向 StringJoiner 容器中添加内容，只能添加字符串</span>
		sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 打印结果</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa-bbb-ccc</span>

		<span class="token comment">// 创建 StringJoiner 对象，并指定间隔符号、开始符号、结束符号</span>
		<span class="token class-name">StringJoiner</span> sj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		sj2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;yyy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;zzz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// @xxx-yyy-zzz&amp;</span>

		<span class="token comment">// 获取长度（拼接后的长度）</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sj2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span>

		<span class="token comment">// 将 StringJoiner 对象转换为 String 对象</span>
		<span class="token class-name">String</span> str <span class="token operator">=</span> sj2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// @xxx-yyy-zzz&amp;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串原理" tabindex="-1"><a class="header-anchor" href="#字符串原理" aria-hidden="true">#</a> 字符串原理</h2><p><em><strong>1&gt;</strong></em> <strong>字符串存储的内存原理</strong>：</p><ul><li>直接赋值会复用字符串常量池中已有的字符串</li><li><code>new</code> 出来的不会复用，而是会开辟一个新的空间</li></ul><p><em><strong>2&gt;</strong></em> <strong>== 号比较的是什么</strong>：</p><ul><li>基本数据类型比较数据值</li><li>引用数据类型比较地址值</li></ul><p><em><strong>3&gt;</strong></em> <strong>字符串拼接的底层原理</strong>：</p><ul><li><p>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会利用串池中的字符串</p></li><li><p>如果有变量参与，每一行拼接代码，都会在内存中创建新的字符串，浪费内存</p></li></ul><p><em><strong>4&gt;</strong></em> <strong>StringBuilder 提高效率的原理</strong>：</p><ul><li>所有要拼接的内容都会放在 StringBuilder 中，不会创建很多无用空间，节约内存</li></ul><p><em><strong>5&gt;</strong></em> <strong>StringBuilder 源码分析</strong>：</p><ul><li>默认会创建一个长度为 16 的字节数组，添加的内容长度小于 16，则会直接存储</li><li>添加内容的长度大于 16，则会进行扩容（扩容为原来容量*2+2的容量）</li><li>如果扩容之后还不够，则以实际长度为准</li></ul>`,54),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","08_字符串.html.vue"]]);export{k as default};
