import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const t={},p=e(`<h1 id="django-模板" tabindex="-1"><a class="header-anchor" href="#django-模板" aria-hidden="true">#</a> Django-模板</h1><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h2><ul><li><p><strong>功能</strong></p><p>产生HTML，控制页面上展示的内容。模板文件不仅仅是一个HTML文件，它包含两部分内容：</p><p>1&gt; <em><strong>静态内容</strong></em>：css、js、html</p><p>2&gt; <em><strong>动态内容</strong></em>：通过模板语言动态地产生一些网页内容</p></li><li><p><strong>模板文件的使用</strong></p><p>通常是在视图函数中使用模板产生HTML内容返回给客户端</p><p>1&gt; <em><strong>加载模板文件</strong></em>：<code>loader.get_template</code></p><p>​ 获取模板文件的内容，产生一个模板对象</p><p>2&gt; <em><strong>定义模板上下文</strong></em>：<code>RequeseContext</code></p><p>​ 给模板文件传递数据</p><p>3&gt; <em><strong>模板渲染产生HTML页面内容</strong></em>：<code>render</code></p><p>​ 用传递的数据替换相应的变量，产生一个替换后的标准的HTML内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_render</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> template_path<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp <span class="token operator">=</span> loader<span class="token punctuation">.</span>get_template<span class="token punctuation">(</span>template_path<span class="token punctuation">)</span>
    context <span class="token operator">=</span> RequestContext<span class="token punctuation">(</span>request<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    res_html <span class="token operator">=</span> temp<span class="token punctuation">.</span>render<span class="token punctuation">(</span>context<span class="token punctuation">)</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>res_html<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>模板文件的加载顺序</strong></p><p>1&gt; 先去配置的模板目录下面去找模板文件，因为是列表，所以可以按需设置多个目录</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;DIRS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;templates&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2&gt; 找不到就去<code>INSTALLED_APPS</code>下面的每个应用的<code>templates</code>文件夹下去找模板文件，前提是应用中必须有<code>templates</code>文件夹</p></li></ul><h2 id="模板语言" tabindex="-1"><a class="header-anchor" href="#模板语言" aria-hidden="true">#</a> 模板语言</h2><p>模板语言简称为DTL（Django Template Language）</p><ul><li><p><strong>模板变量</strong></p><p>模板变量由数字、字母、下划线和点组成，不能以下划线开头</p><p>使用模板变量：<code>{{ 模板变量名 }}</code></p><p><strong>模板变量解析顺序</strong>：</p><ul><li><p><em><strong>实例一：<code>{{ book.btitle }}</code></strong></em></p><p>1&gt; 先把<code>book</code>当成一个字典，把<code>btitle</code>当成键名进行取值：<code>book[&#39;btitle&#39;]</code></p><p>2&gt; 再把<code>book</code>当成一个对象，把<code>btitle</code>当成属性进行取值：<code>book.btitle</code></p><p>3&gt; 最后把<code>book</code>当成一个对象，把<code>btitle</code>当成对象的方法进行取值：<code>book.btitle</code></p></li><li><p><em><strong>实例二：<code>{{ book.0 }}</code></strong></em></p><p>1&gt; 先把<code>book</code>当成一个字典，把<code>0</code>当成键名进行取值：<code>book[0]</code></p><p>2&gt; 最后把<code>book</code>当成一个列表，把<code>0</code>当成下标进行取值：<code>book[0]</code></p></li></ul><p>如果解析失败，则产生内容时用<em><strong>空字符串</strong></em>填充模板变量</p><p>使用模板变量时，<code>.</code>前面可能是一个字典，或者是一个对象，还可能是一个列表</p></li><li><p><strong>模板标签</strong></p><p>使用模板标签：<code>{% 代码段 %}</code></p><ul><li><p><em><strong>实例一：for循环</strong></em></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% for x in 列表 %}
  <span class="token comment">&lt;!-- 列表不为空时执行 --&gt;</span>
{% empty %}
  <span class="token comment">&lt;!-- 列表为空时执行 --&gt;</span>
{% endfor %}
<span class="token comment">&lt;!-- 可以通过{{ forloop.counter }}得到for循环遍历到了第几次 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>实例二：if...else条件判断</strong></em></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% if 条件 %}
{% elif 条件 %}
{% else %}
{% endif %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较运算符：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code></p><p><em><strong>注</strong></em>：使用比较运算符时，比较运算符两边必须有空格，否则报错</p><p>逻辑运算：<code>not</code>、<code>and</code>、<code>or</code></p></li></ul><p>参考文档：https://docs.djangoproject.com/zh-hans/2.0/ref/templates/builtins/</p></li><li><p><strong>过滤器</strong></p><p>作用：用于对模板变量进行操作</p><p>使用格式：<code>模板变量｜过滤器:参数</code>，<code>:</code>和参数之间不能有空格</p><p><code>date</code>：改变日期的显示格式</p><p><code>length</code>：求长度，字符串、列表的长度</p><p><code>default</code>：如果模板变量为False，使用设置的参数作为默认值</p><p>参考文档：https://docs.djangoproject.com/zh-hans/2.0/ref/templates/builtins/</p><ul><li><p><em><strong>自定义过滤器</strong></em></p><p>过滤器的本质就是Python函数</p><p>自定义过滤器需要在应用中新建一个名为<code>templatetags</code>的Python包，在包中新建的<code>.py</code>文件中进行过滤器的自定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> Library
register <span class="token operator">=</span> Library<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个Library类的对象</span>
<span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>filter</span>  <span class="token comment"># 使用Library类的对象的filter方法对函数进行装饰</span>
<span class="token keyword">def</span> <span class="token function">mod</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;判断num是否是偶数&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：<em><u>自定义的过滤器至少有一个参数，最多有两个参数</u></em></p><p>一个参数时，使用时不需要传递参数，<code>|</code>前面的模板变量会自动作为参数</p><p>两个参数时，<code>|</code>前面的模板变量会自动成为第一个参数，<code>:</code>后面需要手动传递第二个参数</p></li><li><p><em><strong>使用定义过滤器</strong></em></p><p>在模板中使用自定义过滤器需要先在<code>head</code>上方通过<code>{% load filters %}</code>导入存放自定义过滤器的文件（<code>filters</code>为存放自定义过滤器的文件名）</p><p>使用格式和内置过滤器相同：<code>模板变量|自定义过滤器名:参数</code></p></li></ul></li><li><p><strong>模板注释</strong></p><p>单行注释：<code>{# 注释内容 #}</code></p><p>多行注释：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% comment %}
注释内容
{% endcomment %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><em><strong>注</strong></em>：模板语言（模板变量、模板标签、过滤器、模板注释）使用浏览器查看网页源代码时都不可见，HTML自身的注释<code>&lt;!-- 注释 --&gt;</code>是可见的</p><h2 id="模板继承" tabindex="-1"><a class="header-anchor" href="#模板继承" aria-hidden="true">#</a> 模板继承</h2><p>模板继承是为了重用HTML页面中相同的内容</p><p>继承格式：<code>{% extends 父模板文件路径 %}</code>，继承时需要将子模板里面的内容清空</p><p>对于页面中内容不同的部分，可以通过块标签来解决：</p><p><em><strong>在父模板中定义块</strong></em>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% block 块名 %}
块中间可以写内容，也可以不写
{% endblock 块名 %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>在子模板中重写块中的内容</strong></em>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% extends 父模板文件路径 %}  {# 先继承父模板中的内容 #}
{% block 块名 %}
{{ block.super }}  {# 获取父模板中这一个块里面的内容，不需要可以不写 #}
重写父模板中的内容
{% endblock 块名 %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把所有页面中相同的内容放到父模板文件中，不需要放在块里面；对于页面中内容不同的位置，需要在父模板中预留块，然后在子模板中对相应的块进行重写</p><h2 id="html转义" tabindex="-1"><a class="header-anchor" href="#html转义" aria-hidden="true">#</a> HTML转义</h2><p>在模板上下文中的HTML标记默认是会被转义的，即通过视图函数传递给模板文件的数据默认是会被转义的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>小于号&lt; 转换为&amp;lt;
大于号&gt; 转换为&amp;gt;
单引号&#39; 转换为&amp;#39;
双引号&quot; 转换为&amp;quot;
与符号&amp; 转换为&amp;amp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>关闭转义</strong></p><p>使用<code>safe</code>过滤器关闭转义：<code>{{ 模板变量|safe }}</code></p><p>使用<code>autoescape</code>关闭转义：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% autoescape off %}  {# off表示关闭转义，on表示打开转义 #}
	模板语言代码
{% endautoescape %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>两者区别</strong></em>：<code>safe</code>只能关闭一个模板变量的转义，<code>autoescape</code>可以关闭多个模板变量的转义</p></li></ul><p>模板硬编码中的字符串默认不会经过转义，如果需要转义，需要手动进行转义：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ test|default:&#39;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>&#39; }}  {# 显示hello #}
{{ test|default:&#39;<span class="token entity named-entity" title="&lt;">&amp;lt;</span>h3<span class="token entity named-entity" title="&gt;">&amp;gt;</span>hello<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/h3<span class="token entity named-entity" title="&gt;">&amp;gt;</span>&#39; }}  {# 显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span> #}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="csrf攻击" tabindex="-1"><a class="header-anchor" href="#csrf攻击" aria-hidden="true">#</a> CSRF攻击</h2><p>只有用户登录之后才能访问一些页面，需要增加<em><strong>登录装饰器函数</strong></em>判断是否已经登录</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">login_required</span><span class="token punctuation">(</span>view_func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>view_args<span class="token punctuation">,</span> <span class="token operator">**</span>view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span><span class="token string">&#39;islogin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> view_func<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>view_args<span class="token punctuation">,</span> <span class="token operator">**</span>view_kwargs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>CSRF防护</strong></p><p>在项目的<code>settings.py</code>文件的<code>MIDDLEWARE_CLASSES</code>中，Django默认启用了CSRF防护，只针对<code>POST</code>提交</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Django防止CSRF的方式：</p><p>1&gt; 默认打开CSRF的中间件（如上）</p><p>2&gt; 表单采用<code>POST</code>方式提交数据时，加上<code>{% csrf_token %}</code>标签可关闭针对本网站的防护，第三方网站的防护不受影响</p></li><li><p><strong>Django的CSRF防护原理</strong></p><p>1&gt; 渲染模板文件时，通过<code>{% csrf_token %}</code>标签生成一个名字叫做<code>csrfmiddlewaretoken</code>的隐藏域</p><p>2&gt; 服务器交给浏览器保存一个名字为<code>csrftoken</code>的cookie信息</p><p>3&gt; 提交表单时，隐藏域的值和cookie的值都会发送给服务器，服务器进行比较，如果一样，则CSRF验证通过，否则失败</p></li></ul><h2 id="验证码" tabindex="-1"><a class="header-anchor" href="#验证码" aria-hidden="true">#</a> 验证码</h2><p>在用户注册、登录页面，为了防止暴力请求，可以加入验证码功能，以减轻服务器压力</p><ul><li><p><strong>实现验证码</strong></p><p>1&gt; 安装<code>Pillow</code>的包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install Pillow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2&gt; 在<code>booktest/views.py</code>文件中，创建视图函数<code>verify_code</code>，在其中创建验证码，具体代码网上搜索即可</p><p>3&gt; 打开<code>booktest/urls.py</code>文件，配置<code>url</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^verify_code$&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>verify_code<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4&gt; 在模板文件中，使用<code>img</code>标签访问验证码所在的网址，以在页面上显示验证码</p><p>5&gt; 通过获取对比用户输入的验证码和<code>session</code>中存储的验证码是否匹配来判断输入是否正确</p></li></ul><h2 id="url反向解析" tabindex="-1"><a class="header-anchor" href="#url反向解析" aria-hidden="true">#</a> url反向解析</h2><p><strong>作用</strong>：根据正则表达式的配置动态的生成url，使得当某一个url配置的地址发生变化时，页面上使用反向解析生成的地址的位置不需要发生变化</p><ul><li><p><strong>配置方法</strong></p><p>1&gt; 在项目的<code>urls.py</code>文件中包含具体应用的<code>urls.py</code>文件时指定<code>namespace</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;booktest.urls&#39;</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">&#39;booktest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2&gt; 在应用的<code>urls.py</code>文件中配置时指定<code>name</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^index$&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3&gt; 在模板文件中使用时，格式如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% url &#39;booktest:index&#39; %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% url &#39;booktest:show_args&#39; 1 2 %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>/show_args/1/2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% url &#39;booktest:show_kwargs&#39; c=3 d=4 %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>/show_kwargs/3/4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4&gt; 在视图函数重定向的时候使用反向解析：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>urlresolvers <span class="token keyword">import</span> reverse
url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;booktest:index&#39;</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;booktest:show_args&#39;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;booktest:show_kwargs&#39;</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,32),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","04_Django-模板.html.vue"]]);export{r as default};
