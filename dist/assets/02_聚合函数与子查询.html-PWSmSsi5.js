import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const p={},o=e(`<h1 id="聚合函数与子查询" tabindex="-1"><a class="header-anchor" href="#聚合函数与子查询" aria-hidden="true">#</a> 聚合函数与子查询</h1><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h2><h3 id="普通聚合" tabindex="-1"><a class="header-anchor" href="#普通聚合" aria-hidden="true">#</a> 普通聚合</h3><p>聚合函数：可以同时对多行进行操作，并返回一个结果。常用的聚合函数有：</p><p><code>SUM()</code> → 求和</p><p><code>AVG()</code> → 平均值</p><p><code>MAX()</code> → 最大值</p><p><code>MIN()</code> → 最小值</p><p><code>COUNT()</code> → 计数(统计非空行数)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 取EMP表的总薪资、平均薪资、最高薪资、最低薪资、总人数</span>
<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span>   总薪资<span class="token punctuation">,</span>
       <span class="token function">AVG</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span>   平均薪资<span class="token punctuation">,</span>
       <span class="token function">MAX</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span>   最高薪资<span class="token punctuation">,</span>
       <span class="token function">MIN</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span>   最低薪资<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     总人数<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> 总人数
<span class="token keyword">FROM</span> EMP E<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>COUNT(1)</code>、<code>COUNT(*)</code>、<code>COUNT(字段)</code>区别？</p><p><code>COUNT(1)</code>&amp;<code>COUNT(*)</code>都是统计行数，得到的结果都是一样的，但是<code>COUNT(1)</code>比<code>COUNT(*)</code>性能要好一点，因为<code>COUNT(*)</code>需要先得到表的字段信息然后再计数，而<code>COUNT(1)</code>差不多是直接计数。<code>COUNT(字段)</code>是统计该字段非空的行数（不把为空的行统计进去）</p></li></ul><h3 id="分组聚合" tabindex="-1"><a class="header-anchor" href="#分组聚合" aria-hidden="true">#</a> 分组聚合</h3><p>使用<code>GROUP BY 字段名</code>进行分组聚合</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询每个部门的总薪资、最高薪资、人数、平均薪资、最低薪资</span>
<span class="token keyword">SELECT</span> E<span class="token punctuation">.</span>DEPTNO   部门<span class="token punctuation">,</span>
       <span class="token function">SUM</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> 总薪资<span class="token punctuation">,</span>
       <span class="token function">MAX</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> 最高薪资<span class="token punctuation">,</span>
       <span class="token function">MIN</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> 最低薪资<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 平均薪资<span class="token punctuation">,</span>  <span class="token comment">-- ROUND()保留两位小数</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   人数
<span class="token keyword">FROM</span> EMP E
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> E<span class="token punctuation">.</span>DEPTNO<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：分组的字段数量一定要多于<code>SELECT</code>后面的字段数量（不包括聚合函数），也就是未进行分组的字段不能在<code>SELECT</code>后面进行查询</p><p><em><strong>注</strong></em>：可以使用多个字段进行分组，如：<code>GROUP BY DEPTNO, JOB</code></p><h3 id="聚合函数的过滤" tabindex="-1"><a class="header-anchor" href="#聚合函数的过滤" aria-hidden="true">#</a> 聚合函数的过滤</h3><p>使用<code>HAVING</code>关键字实现聚合函数的过滤</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 找出所有部门的平均薪资，并且筛选出平均薪资高于2000的部门</span>
<span class="token keyword">SELECT</span> E<span class="token punctuation">.</span>DEPTNO<span class="token punctuation">,</span>
       <span class="token function">AVG</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> EMP E
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> E<span class="token punctuation">.</span>DEPTNO
<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注：</strong></em><code>HAVING</code>后面只能跟分组的字段和聚合函数</p><ul><li><p><strong><code>HAVING</code>和<code>WHERE</code>的区别</strong></p><p><code>HAVING</code>只能过滤聚合函数和分组字段，其他字段无法过滤</p><p><code>WHERE</code>可以过滤所有的字段，但是无法过滤聚合函数</p><p><code>ORDER BY</code>后面也只能跟分组字段和聚合函数</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 找出 每个部门 每个工种 的最高薪资、最低薪资 且 最高薪资要高于1500，最低薪资高于800 且 人数大于2个 且 岗位不是老板</span>
<span class="token keyword">SELECT</span> E<span class="token punctuation">.</span>DEPTNO<span class="token punctuation">,</span> E<span class="token punctuation">.</span>JOB<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> EMP E
<span class="token keyword">WHERE</span> E<span class="token punctuation">.</span>JOB <span class="token operator">!=</span> <span class="token string">&#39;PRESIDENT&#39;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> E<span class="token punctuation">.</span>DEPTNO<span class="token punctuation">,</span> E<span class="token punctuation">.</span>JOB
<span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1500</span> <span class="token operator">AND</span> <span class="token function">MIN</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span>SAL<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">800</span> <span class="token operator">AND</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql语句执行顺序" tabindex="-1"><a class="header-anchor" href="#sql语句执行顺序" aria-hidden="true">#</a> SQL语句执行顺序</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 输出字段    <span class="token comment">-- 5</span>
<span class="token keyword">FROM</span> 表           <span class="token comment">-- 1</span>
<span class="token keyword">WHERE</span> 过滤条件<span class="token number">1</span>    <span class="token comment">-- 2</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段  <span class="token comment">-- 3</span>
<span class="token keyword">HAVING</span> 过滤条件<span class="token number">2</span>   <span class="token comment">-- 4</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段  <span class="token comment">-- 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h2><p>当某个条件不确定的时候，就需要用到子查询</p><h3 id="where后面接子查询" tabindex="-1"><a class="header-anchor" href="#where后面接子查询" aria-hidden="true">#</a> WHERE后面接子查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询EMP，找出哪些人薪资比SCOTT用户高</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP
<span class="token keyword">WHERE</span> SAL <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> SAL <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> ENAME <span class="token operator">=</span> <span class="token string">&#39;SCOTT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="from后面接子查询" tabindex="-1"><a class="header-anchor" href="#from后面接子查询" aria-hidden="true">#</a> FROM后面接子查询</h3><p>某个结果集是源表，筛选一部分数据后再做处理，可以将筛选之后的SELECT结果集当作一个临时表，然后再做进一步的处理</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询不是20号部门，工作不是文员的员工所属部门的平均薪资。输出：部门、平均薪资</span>
<span class="token comment">-- 找出不是20号部门，工作不是文员的员工</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> DEPTNO <span class="token operator">!=</span> <span class="token number">20</span> <span class="token operator">AND</span> JOB <span class="token operator">!=</span> <span class="token string">&#39;CLERK&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询每个部门的平均薪资</span>
<span class="token keyword">SELECT</span> DEPTNO<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>SAL<span class="token punctuation">)</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> DEPTNO<span class="token punctuation">;</span>

<span class="token comment">-- 将两者合并</span>
<span class="token keyword">SELECT</span> DEPTNO<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>SAL<span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> DEPTNO <span class="token operator">!=</span> <span class="token number">20</span> <span class="token operator">AND</span> JOB <span class="token operator">!=</span> <span class="token string">&#39;CLERK&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> DEPTNO<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),t=[o];function c(l,i){return s(),a("div",null,t)}const k=n(p,[["render",c],["__file","02_聚合函数与子查询.html.vue"]]);export{k as default};
