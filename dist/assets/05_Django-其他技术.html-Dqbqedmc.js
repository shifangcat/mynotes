import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const e="/mynotes/assets/中间件函数先后顺序-xR0ToriQ.jpeg",p={},o=t(`<h1 id="django-其他技术" tabindex="-1"><a class="header-anchor" href="#django-其他技术" aria-hidden="true">#</a> Django-其他技术</h1><h2 id="静态文件" tabindex="-1"><a class="header-anchor" href="#静态文件" aria-hidden="true">#</a> 静态文件</h2><p>在网页上使用的css文件、js文件和图片叫做静态文件</p><ul><li><p><strong>使用</strong></p><p>1&gt; 新建静态文件夹<code>static</code>，并在文件夹中创建<code>css</code>、<code>js</code>和<code>images</code>文件夹</p><p>2&gt; 在项目的<code>settings.py</code>文件中，配置静态文件存放的位置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>STATIC_URL <span class="token operator">=</span> <span class="token string">&#39;/static/&#39;</span>
STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：<code>STATIC_URL</code>设置在模板文件中访问静态文件时对应的<code>url</code>地址，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>STATIC_URL <span class="token operator">=</span> <span class="token string">&#39;/static/&#39;</span>
<span class="token comment"># 模板文件：&lt;img src=&quot;/static/images/mm.jpg&quot; alt=&quot;图片&quot;&gt;，直接通过物理目录读取</span>
STATIC_URL <span class="token operator">=</span> <span class="token string">&#39;/abc/&#39;</span>
<span class="token comment"># 模板文件：&lt;img src=&quot;/abc/images/mm.jpg&quot; alt=&quot;图片&quot;&gt;，通过url地址读取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>STATICFILES_DIRS</code>设置静态文件所在的物理目录，因为是列表，所以可以按需设置多个目录</p></li><li><p><strong>加载目录（了解）</strong></p><p>通过<code>settings.STATICFILES_FINDERS</code>查看</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;, &#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Django加载静态文件时，会先去配置的静态文件目录中查找，找不到后会去应用目录下进行查找</p></li><li><p><strong>动态生成静态文件路径</strong></p><p>1&gt; 先在<code>head</code>标签上方使用<code>{% load staticfiles %}</code>进行加载</p><p>2&gt; 使用文件路径时，写法如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% load staticfiles %}
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;images/mm.jpg/&#39; %}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>图片<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此，静态文件加载时，将会动态地获取<code>STATIC_URL</code>，拼接出完整的静态文件路径</p></li></ul><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h2><p>中间件函数是Django框架预留的函数接口，在其中可以干预请求和应答的过程</p><ul><li><p><strong>获取浏览器端的ip地址</strong></p><p>使用<code>request</code>对象的<code>META</code>属性即可获取浏览器端的ip地址</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">&#39;REMOTE_ADDR&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>使用中间件</strong></p><img src="`+e+`" style="zoom:20%;"><p>1&gt; 在应用目录下新建<code>middleware.py</code>文件</p><p>2&gt; 在<code>middleware.py</code>文件中定义中间件类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BlockedIPSMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;中间件类&quot;&quot;&quot;</span>
    EXCLUDE_IPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;172.16.179.152&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 被阻止的ip地址列表</span>
    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> <span class="token operator">*</span>view_args<span class="token punctuation">,</span> <span class="token operator">**</span>view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;中间件函数，视图函数调用之前会被调用&quot;&quot;&quot;</span>
        user_ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">&#39;REMOTE_ADDR&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 获取用户的ip地址</span>
        <span class="token keyword">if</span> user_ip <span class="token keyword">in</span> BlockedIPSMiddleware<span class="token punctuation">.</span>EXCLUDE_IPS<span class="token punctuation">:</span>
            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">&#39;&lt;h3&gt;Forbidden&lt;/h3&gt;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在类中定义中间件预留的函数：</p><p><code>__init__</code>：服务器重启之后，响应第一个请求的时候调用</p><p><code>process_request</code>：在产生request对象之后，进行url匹配之前调用</p><p><code>process_view</code>：url匹配之后，调用视图函数之前调用</p><p><code>process_response</code>：视图函数调用之后，内容返回给浏览器之前调用</p><p><code>process_exception</code>：视图函数出现异常，会调用这个函数</p><p><em><strong>注</strong></em>：如果注册的多个中间件类中包含<code>process_exception</code>函数的时候，调用的顺序跟注册的顺序是相反的</p><p>3&gt; <em><strong>注册中间件类</strong></em>：在项目的<code>settings.py</code>文件的<code>MIDDLEWARE_CLASSES</code>中注册中间件类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token string">&#39;booktest.middleware.BlockedIPSMiddleware&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 注册中间件类</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：<code>middleware.py</code>文件的名字和中间件类的名字<code>BlockedIPSMiddleware</code>是可以自定义的，<u><em>中间件类中的函数的名字和参数是固定的</em></u>，具体参数如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> <span class="token operator">*</span>view_args<span class="token punctuation">,</span> <span class="token operator">**</span>view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="后台管理" tabindex="-1"><a class="header-anchor" href="#后台管理" aria-hidden="true">#</a> 后台管理</h2><p>后台管理登录页面：<code>http://域名:端口/admin</code></p><ul><li><p><strong>使用</strong></p><p>1&gt; <em><strong>本地化</strong></em>：修改项目的<code>settings.py</code>文件进行语言和时区的本地化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">&#39;zh-hans&#39;</span>
TIME_ZONE <span class="token operator">=</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2&gt; <em><strong>创建超级管理员</strong></em>：<code>python mange.py createsuperuser</code></p><p>3&gt; <em><strong>注册模型类</strong></em>：在应用的<code>admin.py</code>文件中进行注册</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> booktest<span class="token punctuation">.</span>models <span class="token keyword">import</span> AreaInfo
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>AreaInfo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4&gt; <em><strong>自定义管理页面</strong></em>：自定义模型管理类，注册模型类的时候给<code>register</code>函数添加第二个参数，就是自定义模型管理类的名字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AreaInfoAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;地区模型管理类&quot;&quot;&quot;</span>
    <span class="token comment"># 管理页面相关设置</span>
    list_per_page <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 设定管理页面每页显示10条数据</span>
    <span class="token comment"># 设定管理页面显示哪几列，模型类中的方法也可以显示</span>
    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;atitle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parent&#39;</span><span class="token punctuation">]</span>    
    actions_on_bottom <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 在管理页面下方也增加一个下拉操作框</span>
    actions_on_top <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 去除管理页面上方的下拉操作框</span>
    list_filter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;atitle&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 显示管理页面右侧的过滤栏，过滤字段为atitle</span>
    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;atitle&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 显示管理页面上方的搜索框，搜索字段为atitle</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>AreaInfo<span class="token punctuation">,</span> AreaInfoAdmin<span class="token punctuation">)</span>  <span class="token comment"># 绑定模型管理类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5&gt; <em><strong>在模型类中自定义管理页面</strong></em>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AreaInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;地区模型类&quot;&quot;&quot;</span>
    <span class="token comment"># 地区名称，verbose_name指定字段在后台管理页面显示的列标题</span>
    atitle <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">&#39;名称&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 自关联属性</span>
    aParent <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">&#39;self&#39;</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 指定每一条数据在管理页面显示的内容</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>atitle
    <span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>atitle
    <span class="token comment"># 使title方法在后台管理页面也可以实现点击排序，排序依据为atitle</span>
    title<span class="token punctuation">.</span>admin_order_field <span class="token operator">=</span> <span class="token string">&#39;atitle&#39;</span>
    <span class="token comment"># 指定title方法在后台管理页面中显示的列标题</span>
    title<span class="token punctuation">.</span>short_description <span class="token operator">=</span> <span class="token string">&#39;地区名称&#39;</span>
    <span class="token keyword">def</span> <span class="token function">parent</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>aParent <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>aParent<span class="token punctuation">.</span>atitle
    parent<span class="token punctuation">.</span>short_description <span class="token operator">=</span> <span class="token string">&#39;上级地区名称&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编辑页的相关设置</strong></p><p>进入具体数据的编辑页面的相关设置也是在模型管理类中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AreaInfoAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;地区模型管理类&quot;&quot;&quot;</span>
    <span class="token comment"># 编辑页面相关设置</span>
    <span class="token comment"># fields = [&#39;aParent&#39;, &#39;atitle&#39;]  # 设置编辑页面内容的显示顺序</span>
    <span class="token comment"># 实现分组显示，和fields只能二选一</span>
    fieldsets <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token string">&#39;高级&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;fields&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;aParent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&#39;基本&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;fields&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;atitle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><em><strong>关联对象显示</strong></em></p><p>在一对多的关系中，可以在一类的编辑页面中编辑多类的对象，嵌入多类对象的方式包括表格、块两种</p><p>类型<code>InlineModelAdmin</code>：表示在一类的编辑页面嵌入关联的多类的编辑，它的：</p><p>子类<code>StackedInline</code>：表示以块的形式嵌入</p><p>子类<code>TabularInline</code>：表示以表格的形式嵌入</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AreaStackedInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>StackedInline<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 以块的形式嵌入</span>
    model <span class="token operator">=</span> AreaInfo  <span class="token comment"># 关联的多类的名字</span>
    extra <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 底部额外编辑的对象的数量</span>
<span class="token keyword">class</span> <span class="token class-name">AreaTabularInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>TabularInline<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 以表格的形式嵌入</span>
    model <span class="token operator">=</span> AreaInfo  <span class="token comment"># 关联的多类的名字</span>
    extra <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 底部额外编辑的对象的数量</span>
<span class="token keyword">class</span> <span class="token class-name">AreaInfoAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 模型管理类</span>
    <span class="token comment"># 关联实现在一类的编辑页面中显示对应的多类的数据的类</span>
    <span class="token comment"># inlines = [AreaStackedInline]  # 以块的形式嵌入</span>
    inlines <span class="token operator">=</span> <span class="token punctuation">[</span>AreaTabularInline<span class="token punctuation">]</span>  <span class="token comment"># 以表格的形式嵌入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>自定义后台管理页面</strong></p><p>1&gt; 在<code>templates</code>目录下创建<code>admin</code>目录</p><p>2&gt; 打开当前虚拟环境中Django的目录，再向下找到admin的模板</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>D:\\virtualenv_file\\djangotest\\Lib\\site-packages\\django\\contrib\\admin\\templates\\admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3&gt; 将需要更改的文件拷贝到第一步建好的目录里，然后针对需要修改的内容进行编辑即可</p><p><em><strong>原理</strong></em>：利用模板的加载顺序，使用自定义的页面覆盖Django自带的页面</p></li></ul><h2 id="上传图片" tabindex="-1"><a class="header-anchor" href="#上传图片" aria-hidden="true">#</a> 上传图片</h2><ul><li><p><strong>配置上传文件保存目录</strong></p><p>1&gt; <em><strong>新建</strong></em>上传文件保存目录，如：在<code>static</code>目录下新建<code>media</code>文件夹</p><p>2&gt; <em><strong>配置</strong></em>上传文件保存目录，在项目的<code>settings.py</code>文件中增加：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;static/media&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>后台管理页面上传图片</strong></p><p>1&gt; 在应用的<code>models.py</code>文件中<em><strong>设计模型类</strong></em>，<code>upload_to</code>指定上传目录</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PicTest</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    goods_pic <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">&#39;booktest&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2&gt; <em><strong>迁移</strong></em>生成数据库中的表格</p><p>3&gt; 在应用的<code>admin.py</code>文件中<em><strong>注册模型类</strong></em></p></li><li><p><strong>用户自定义页面上传文件</strong></p><p>1&gt; 创建用户上传文件的页面，必须是一个表单，并且<code>method=&quot;post&quot;</code>、<code>enctype=&quot;multipart/form-data&quot;</code>、<code>input</code>标签的<code>type=&quot;file&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/upload_handle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {% csrf_token %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上传<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2&gt; 定义接收文件的视图函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upload_handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;上传文件处理&quot;&quot;&quot;</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">[</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 获取上传文件的处理对象</span>
    <span class="token comment"># file.name，获取上传文件的名字</span>
    <span class="token comment"># file.chunks()，获取上传文件的内容，类型是一个生成器，可以通过遍历获取文件内容</span>
    save_path <span class="token operator">=</span> <span class="token string">&#39;%s/booktest/%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">for</span> content <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>chunks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取上传文件的内容并写到创建的文件中</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token comment"># 将上传记录写入数据库</span>
    PicTest<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>goods_pic<span class="token operator">=</span><span class="token string">&#39;booktest/%s&#39;</span> <span class="token operator">%</span> <span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：在Django中，上传文件不大于2.5M时，文件放在内存中；上传文件大于2.5M时，文件内容写到一个临时文件中</p><p>Django处理上传文件的两个类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 文件不大于2.5M：django.core.files.uploadedfile.InMemoryUploadedFile</span>
<span class="token comment"># 文件大于2.5M：django.core.files.uploadedfile.TemporaryUploadedFile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/http/file-uploads/</p><h2 id="分页" tabindex="-1"><a class="header-anchor" href="#分页" aria-hidden="true">#</a> 分页</h2><p>Django提供了数据分页的类，类<code>Paginator</code>用于对列进行一页n条数据的分页运算。类<code>Page</code>用于表示第m页的数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginator
paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>areas<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 对areas查询集进行分页，每页显示10条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><em><strong>Paginator类的实例对象的属性和方法</strong></em>：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>paginator.count</td><td>返回查询集中数据的总数量</td></tr><tr><td>paginator.num_pages</td><td>返回分页后的总页数</td></tr><tr><td>paginator.page_range</td><td>返回分页后页码的列表</td></tr><tr><td><strong>方法</strong></td><td><strong>说明</strong></td></tr><tr><td>paginator.page(number)</td><td>返回第number页的Page类的实例对象</td></tr></tbody></table></li><li><p><em><strong>Page类的实例对象的属性和方法</strong></em>：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>page.number</td><td>返回当前页的页码</td></tr><tr><td>page.object_list</td><td>返回当前页数据的查询集</td></tr><tr><td>page.paginator</td><td>返回对应的Paginator类的实例对象</td></tr><tr><td><strong>方法</strong></td><td><strong>说明</strong></td></tr><tr><td>page.has_previous()</td><td>判断当前页是否有上一页</td></tr><tr><td>page.has_next()</td><td>判断当前页是否有下一页</td></tr><tr><td>page.previous_page_number()</td><td>返回上一页的页码</td></tr><tr><td>page.next_page_number()</td><td>返回下一页的页码</td></tr><tr><td>page.len()</td><td>返回当前页面数据的数量</td></tr></tbody></table></li></ul><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/ref/paginator/#django.core.paginator.Paginator</p>`,18),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","05_Django-其他技术.html.vue"]]);export{k as default};
