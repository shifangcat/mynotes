import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as t}from"./app-VKLC1A-x.js";const p={},a=t(`<h1 id="redis数据库" tabindex="-1"><a class="header-anchor" href="#redis数据库" aria-hidden="true">#</a> Redis数据库</h1><h2 id="nosql介绍" tabindex="-1"><a class="header-anchor" href="#nosql介绍" aria-hidden="true">#</a> NoSQL介绍</h2><p>NoSQL是一类新出现的数据库（not only sql）</p><ul><li><p><strong>特点</strong></p><p>1&gt; 不支持SQL语法</p><p>2&gt; 存储结构和传统的关系型数据库的关系表不同，NoSQL中存储的数据是KV形式的</p><p>3&gt; NoSQL没有一种通用的语言，每种NoSQL数据库都有自己的API和语法以及擅长的业务场景</p><p>4&gt; NoSQL产品种类多：Mongodb、Redis、Hbase hadoop、Cassandra hadoop</p></li><li><p><strong>NoSQL和SQL数据库的比较</strong></p><p>1&gt; 适用场景不同：SQL数据库适合用于关系特别复杂的数据查询场景，NoSQL反之</p><p>2&gt; “事务”特性的支持：SQL对事务的支持非常完善，而NoSQL基本不支持事务</p><p>3&gt; 两者在不断地取长补短，呈现融合趋势</p></li></ul><h2 id="redis介绍" tabindex="-1"><a class="header-anchor" href="#redis介绍" aria-hidden="true">#</a> Redis介绍</h2><p>官方中文网站：http://redis.cn/</p><p>中文命令文档：http://doc.redisfans.com/</p><p>Python中使用Redis：https://redis-py.readthedocs.io/en/latest/</p><ul><li><p><strong>Redis特性</strong></p><p>1&gt; Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时可以再次加载使用</p><p>2&gt; Redis不仅支持key-value类型的数据，同时还提供list、set、zset、hash等数据结构的存储</p><p>3&gt; Redis支持数据的备份，即master-slave模式的数据备份</p></li><li><p><strong>Redis优势</strong></p><p>1&gt; 性能高：Redis读的速度是110000次/s，写的速度是81000次/s</p><p>2&gt; 丰富的数据类型：Redis支持二进制案例的Strings、Lists、Hashes、Sets及Ordered Sets数据类型操作</p><p>3&gt; 原子性：Redis的所有操作都是原子性的，还支持对几个操作全并后的原子性执行</p><p>4&gt; 丰富的特性：Redis支持publish/subscribe、通知、key过期等特性</p></li><li><p><strong>Redis应用场景</strong></p><p>1&gt; 用来做缓存(ehcache/memcached)：Redis的所有数据是放在内存中的（内存数据库）</p><p>2&gt; 在某些特定应用场景下替代传统数据库：如社交类应用</p><p>3&gt; 在一些大型系统中，巧妙地实现一些特定的功能：session共享、购物车等</p></li></ul><p>官方中文网站：http://redis.cn/</p><h2 id="redis安装与配置" tabindex="-1"><a class="header-anchor" href="#redis安装与配置" aria-hidden="true">#</a> Redis安装与配置</h2><ul><li><p><strong>安装</strong></p><p>windows下载地址：https://github.com/tporadowski/redis/releases</p><p>windows安装教程参考：https://www.runoob.com/redis/redis-install.html</p><p>https://www.cnblogs.com/liuqingzheng/p/9831331.html</p></li><li><p><strong>配置</strong></p><p>Redis的配置文件位于Redis安装目录下，文件名为<code>redis.conf</code>(Windows名为<code>redis.windows.conf</code>)，可以通过修改配置文件修改配置</p><ul><li><p><em><strong>核心配置项</strong></em></p><ul><li><p><em><strong>绑定ip</strong></em>：如果需要远程访问，可将此行注释，或绑定一个真实ip</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bind 127.0.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>端口</strong></em>：默认为6379</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>port 6379
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>是否以守护进程运行</strong></em></p><p>以守护进程运行，则不会在命令行阻塞，类似于服务</p><p>以非守护进程运行，则当前终端被阻塞</p><p>设置为<code>yes</code>表示守护进程，<code>no</code>表示非守护进程，推荐设置为<code>yes</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>daemonize yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>数据文件名称</strong></em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dbfilename dump.rdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>数据文件存储路径</strong></em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dir ./redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>日志文件</strong></em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>logfile &quot;./redis/redis-server.log&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>数据库</strong></em>，默认有16个</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>database 16
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>主从配置</strong></em>，类似于双机备份</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slaveof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><p>配置参考资料：https://blog.csdn.net/ljphilp/article/details/52934933</p></li></ul><h2 id="服务端和客户端" tabindex="-1"><a class="header-anchor" href="#服务端和客户端" aria-hidden="true">#</a> 服务端和客户端</h2><ul><li><p><strong>服务端</strong></p><p>启动命令：<code>redis-server</code>，windows环境需要在cmd下进入Redis的安装目录启动</p><p>查看帮助文档：<code>redis-server --help</code></p></li><li><p><strong>客户端</strong></p><p>启动命令：<code>redis-cli</code>，在服务端开启的情况下，新建一个cmd页面进行启动</p><p>查看帮助文档：<code>redis-cli --help</code></p><p>测试命令：<code>ping</code>，结果回复<code>PONG</code>表示可以进行通信</p><p>切换数据库：<code>select index</code>，数据库没有名称，默认有16个，通过0-15来标识，默认连接第一个数据库</p></li></ul><h2 id="数据操作" tabindex="-1"><a class="header-anchor" href="#数据操作" aria-hidden="true">#</a> 数据操作</h2><ul><li><p><strong>数据结构</strong></p><p>Redis是key-value的数据结构，每条数据都是一个键值对</p><p>键的类型是字符串，且键不能重复</p><p>值的类型有五种：字符串string、哈希hash、列表list、集合set、有序集合zset</p><p>中文命令文档：http://doc.redisfans.com</p></li><li><p><strong>string类型</strong></p><p>字符串类型是Redis中最为基础的数据存储类型，它在Redis中是二进制安全的，这便意味着该类型可以接受任何格式的数据，如JPEG图像数据或Json对象描述信息等。在Redis中字符串类型的Value最多可以容纳的数据长度是512M</p><ul><li><p><em><strong>设置</strong></em></p><p><code>set key value</code>：设置的键不存在则为添加，设置的键已经存在则为修改</p><p><code>setex key seconds value</code>：设置键值及过期时间，以秒为单位</p><p><code>mset key1 value1 key2 value2 ...</code>：一次设置多个键值</p><p><code>append key value</code>：追加值</p></li><li><p><em><strong>获取</strong></em></p><p><code>get key</code>：根据键获取值，如果不存在此键则返回<code>nil</code></p><p><code>mget key1 key2 ...</code>：根据多个键获取多个值</p></li></ul></li><li><p><strong>键命令</strong></p><p><code>keys pattern</code>：查找键，参数⽀持正则表达式</p><p><code>keys *</code>：查看所有键</p><p><code>exists key</code>：判断键是否存在，存在返回1，不存在返回0</p><p><code>type key</code>：查看键对应的value的类型</p><p><code>del key1 key2 ...</code>：删除键及对应的值</p><p><code>expire key seconds</code>：给键设置过期时间，以秒为单位</p><p><code>ttl key</code>：查看键的有效时间，以秒为单位</p></li><li><p><strong>hash类型</strong></p><p>hash⽤于存储对象，对象的结构为属性、值，值的类型必须为string</p><ul><li><p><em><strong>设置</strong></em></p><p><code>hset key field value</code>：设置单个属性</p><p><code>hmset key field1 value1 field2 value2 ...</code>：一次设置多个属性</p></li><li><p><em><strong>获取</strong></em></p><p><code>hkeys key</code>：获取指定键的所有属性</p><p><code>hget key field</code>：获取指定键⼀个属性的值</p><p><code>hmget key field1 field2 ...</code>：获取指定键多个属性的值</p><p><code>hvals key</code>：获取所有属性的值</p><p><code>hexists key field</code>：判断键中的属性是否存在</p></li><li><p><em><strong>删除</strong></em></p><p>删除整个hash键和值，使⽤del命令</p><p><code>hdel key field1 field2 ...</code>：删除属性，属性对应的值会被⼀起删除</p></li></ul></li><li><p><strong>list类型</strong></p><p>列表的元素类型为string，按照插⼊顺序排序</p><ul><li><p><em><strong>设置</strong></em></p><p><code>lpush key value1 value2 ...</code>：在左侧插⼊数据</p><p><code>rpush key value1 value2 ...</code>：在右侧插⼊数据</p><p><code>linsert key before或after 现有元素 新元素</code>：在指定元素的前或后插⼊新元素</p></li><li><p><em><strong>获取</strong></em></p><p><code>lrange key start stop</code>：获取列表⾥指定范围内的元素</p><blockquote><p>1&gt; start、stop为元素的下标索引，取值时两端都包括</p><p>2&gt; 索引从左侧开始，第⼀个元素为0</p><p>3&gt; 索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素</p><p>4&gt; <code>lrange a1 0 -1</code>，表示获取键为&#39;a1&#39;的列表中所有元素</p></blockquote></li><li><p><em><strong>修改</strong></em></p><p><code>lset key index value</code>：修改指定索引位置的元素值</p></li><li><p><em><strong>删除</strong></em></p><p><code>lrem key count value</code>：将列表中前count次出现的值为value的元素移除</p><blockquote><p>count &gt; 0：从前往后移除</p><p>count &lt; 0：从后往前移除</p><p>count = 0：移除所有</p></blockquote></li></ul></li><li><p><strong>set类型</strong></p><p>set类型为无序集合，元素为string类型并且具有唯一性，不得重复；对于集合没有修改操作</p><ul><li><p><em><strong>设置</strong></em></p><p><code>sadd key member1 member2 ...</code>：添加元素</p></li><li><p><em><strong>获取</strong></em></p><p><code>smembers key</code>：获取所有的元素</p><p><code>scard key</code>：获取元素的数量</p><p><code>sinter set1 set2</code>：获取集合的交集</p><p><code>sunion set1 set2</code>：获取集合的并集</p><p><code>sdiff set1 set2</code>：获取集合的差集</p></li><li><p><em><strong>删除</strong></em></p><p><code>srem key member1 member2</code>：删除指定元素</p></li></ul></li><li><p><strong>zset类型</strong></p><p>zset类型为有序集合，元素为string类型并且具有唯一性，不得重复；没有修改操作</p><p>每个元素都会关联⼀个double类型的score，表示权重，通过权重将元素从⼩到⼤排序</p><ul><li><p><em><strong>增加</strong></em></p><p><code>zadd key score1 member1 score2 member2 ...</code>：向集合中添加元素</p></li><li><p><em><strong>获取</strong></em></p><p><code>zrange key start stop</code>：获取指定范围内的元素</p><blockquote><p>1&gt; start、stop为元素的下标索引，取值时两端都包括</p><p>2&gt; 索引从左侧开始，第⼀个元素为0</p><p>3&gt; 索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素</p><p>4&gt; <code>zrange a4 0 -1</code>，表示获取键为&#39;a4&#39;的集合中所有元素</p></blockquote><p><code>zrangebyscore key min max</code>：获取score值在min和max之间的元素，包括min和max</p><p><code>zscore key member</code>：获取成员member的score值</p></li><li><p><em><strong>删除</strong></em></p><p><code>zrem key member1 member2 ...</code>：删除指定元素</p><p><code>zremrangebyscore key min max</code>：删除权重在min和max之间的元素，包括min和max</p></li></ul></li></ul><h2 id="redis与python交互" tabindex="-1"><a class="header-anchor" href="#redis与python交互" aria-hidden="true">#</a> Redis与Python交互</h2><p><strong>准备</strong>：进入虚拟环境，使用命令<code>pip install redis</code>安装Redis的包，包中提供了StrictRedis类(Strict严格)，其实例对象可以⽤于连接Redis服务器，进行交互操作</p><ul><li><p><strong>StrictRedis类</strong></p><p>通过<code>StrictRedis</code>类的<code>__init__()</code>方法创建对象，参数<code>host</code>、<code>port</code>和<code>db</code>指定服务器地址、端⼝和连接的数据库，<code>host</code>默认为<code>localhost</code>，<code>port</code>默认为<code>6379</code>，<code>db</code>默认为<code>0</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sr <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
sr <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 所有参数都是默认值可以简写为此</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>StrictRedis</code>类的实例对象根据不同的数据类型，拥有不同的实例方法，与Redis命令对应，⽅法需要的参数与命令的参数⼀致。常用方法如下：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>方法</strong></th></tr></thead><tbody><tr><td>string</td><td>set、setex、mset、append、get、mget</td></tr><tr><td>keys</td><td>keys、exists、type、delete、expire、getrange、ttl</td></tr><tr><td>hash</td><td>hset、hmset、hkeys、hget、hmget、hvals、hdel</td></tr><tr><td>list</td><td>lpush、rpush、linsert、lrange、lset、lrem</td></tr><tr><td>set</td><td>sadd、smembers、srem</td></tr><tr><td>zset</td><td>zadd、zrange、zrangebyscore、zscore、zrem、zremrangebyscore</td></tr></tbody></table><p>参考文档：http://python.jobbole.com/87305/</p></li><li><p><strong>Redis使用pipeline</strong></p><p>Redis中使用pipeline可以一次执行多个语句，同时pipeline中的语句会一起成功或失败，能够保证数据的正确性</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> redis

redis_store <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
pipeline <span class="token operator">=</span> redis_store<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 开启多个语句的记录</span>
pipeline<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 向pipeline中添加语句</span>
pipeline<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">&#39;h_key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;this is a test&#39;</span><span class="token punctuation">)</span>
pipeline<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token string">&#39;h_key&#39;</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token comment"># 执行语句</span>
pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Django存储session</strong></p><p>Django的session默认是存储在数据库中的，也可以把session存储在Redis里面</p><p><strong>准备</strong>：在虚拟环境中安装包：<code>pip install django-redis-sessions==0.5.6</code></p><p>在项目的<code>settings.py</code>文件中增加如下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>SESSION_ENGINE <span class="token operator">=</span> <span class="token string">&#39;redis_sessions.session&#39;</span>
SESSION_REDIS_HOST <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span>  <span class="token comment"># redis服务的ip地址</span>
SESSION_REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>  <span class="token comment"># redis服务的端口号</span>
SESSION_REDIS_DB <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 使用redis中的哪一个数据库</span>
SESSION_REDIS_PASSWORD <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>  <span class="token comment"># redis数据库的密码</span>
SESSION_REDIS_PREFIX <span class="token operator">=</span> <span class="token string">&#39;session&#39;</span>  <span class="token comment"># 设置redis数据库中键的前缀，键名为session:唯一标识码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="redis主从" tabindex="-1"><a class="header-anchor" href="#redis主从" aria-hidden="true">#</a> Redis主从</h2><ul><li><p><strong>主从概念</strong></p><p>1&gt; ⼀个master可以拥有多个slave，⼀个slave⼜可以拥有多个slave，如此下去，形成了强⼤的多级服务器集群架构</p><p>2&gt; master用来写数据，slave用来读数据，实现读写分离</p><p>3&gt; master和slave都是一个Redis实例(Redis服务)</p></li><li><p><strong>主从配置</strong></p><ul><li><p><em><strong>配置主</strong></em></p><p>（参考Redis安装时的配置）</p></li><li><p><em><strong>配置从</strong></em></p><p>1&gt; 将配置文件<code>redis.conf</code>（windows下为<code>redis.windows.conf</code>）复制一份，命名为<code>slave.conf</code></p><p>2&gt; 修改<code>slave.conf</code>配置信息中绑定的ip和端口（ip可以和master相同，端口不能相同），以及主从配置信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slaveof master的ip master的端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3&gt; <code>redis-server slave.conf</code>通过slave的配置文件启动从服务</p><p>4&gt; 查看主从关系：<code>redis-cli -h ip -p port info Replication</code></p><p>5&gt; 启动从服务客户端：<code>redis-cli -h 从服务的ip -p 从服务的端口</code></p></li></ul></li></ul><h2 id="redis集群" tabindex="-1"><a class="header-anchor" href="#redis集群" aria-hidden="true">#</a> Redis集群</h2><ul><li><p><strong>集群的概念</strong></p><p>集群是一组相互独立、通过网络连接的计算机，以单一系统的模式加以管理。用户与集群相互作用时，集群像是一个独立的服务器。集群的作用是用于提高可用性和可缩放性。</p></li><li><p><strong>Redis集群</strong></p><p><em><strong>软件层面</strong></em>：只有一台电脑，电脑上启动多个Redis服务</p><p><em><strong>硬件层面</strong></em>：存在多台电脑，每台电脑上都启动了一个或多个Redis服务</p><p>Redis集群搭建参考资料：https://www.cnblogs.com/wuxl360/p/5920330.html</p><p>https://blog.csdn.net/vtopqx/article/details/49246521</p></li></ul>`,23),o=[a];function i(d,l){return s(),n("div",null,o)}const u=e(p,[["render",i],["__file","07_Redis数据库.html.vue"]]);export{u as default};
