import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const t={},p=e(`<h1 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>元组是 Python 内置的数据结构之一，是一个<em><strong>不可变序列</strong></em></p><p><strong>不可变序列与可变序列</strong>：</p><p><em><strong>1&gt;</strong></em> 不可变序列：字符串、元组等；没有增、删、改的操作</p><p><em><strong>2&gt;</strong></em> 可变序列：列表、字典等；可以对序列进行增、删、改，对象地址不发生更改</p><p><strong>为什么要将元组设计成不可变序列</strong>：</p><p>在多任务环境下，同时操作对象时不需要加锁，因此，在程序中尽量使用不可变序列</p><p><em><strong>注</strong></em>：元组中存储的是对象的引用</p><p><em><strong>1&gt;</strong></em> 如果元组中对象本身是不可变对象，则不能再引用其他对象</p><p><em><strong>2&gt;</strong></em> 如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变</p><p>格式化字符串中 <code>%</code> 后面的内容实际上就是一个元组</p><p>函数或方法返回多个值时，也是一个元组</p><h2 id="创建元组" tabindex="-1"><a class="header-anchor" href="#创建元组" aria-hidden="true">#</a> 创建元组</h2><p>使用小括号 <code>()</code> 和 <code>tuple()</code> 函数创建元组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
t2 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：只包含一个元素的元组也需要加逗号 <code>,</code>，如：<code>t = (10,)</code></p><h2 id="元组的遍历" tabindex="-1"><a class="header-anchor" href="#元组的遍历" aria-hidden="true">#</a> 元组的遍历</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过元组交换变量的值" tabindex="-1"><a class="header-anchor" href="#通过元组交换变量的值" aria-hidden="true">#</a> 通过元组交换变量的值</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">11</span>
b <span class="token operator">=</span> <span class="token number">22</span>
a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 22 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[p];function c(i,r){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","08_元组.html.vue"]]);export{u as default};
