import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,f as d}from"./app-VKLC1A-x.js";const i="/mynotes/assets/Git工作区和暂存区-TUDn1dIG.jpeg",c={},s=d(`<h1 id="git版本管理" tabindex="-1"><a class="header-anchor" href="#git版本管理" aria-hidden="true">#</a> Git版本管理</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><ul><li><p><strong>Git的特点</strong></p><p><em><strong>版本控制</strong></em>：可以解决多人同时开发的代码问题，也可以找回历史代码</p><p><em><strong>分布式</strong></em>：Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。首先找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。可以自己搭建这台服务器，也可以使用GitHub网站</p></li><li><p><strong>安装与配置</strong></p><p>1&gt; Linux安装命令：<code>sudo apt-get install git</code></p><p>​ windows直接下载软件安装：https://git-scm.com/downloads</p><p>2&gt; 安装成功后，运行命令<code>git</code>可以查看常用命令，windows可直接在cmd使用</p><p>3&gt; 创建目录<code>git_test</code>，进入目录，运行命令<code>git init</code>创建版本库，目录下新增了一个<code>.git</code>的隐藏目录，这就是版本库目录</p></li></ul><h2 id="版本创建与回退" tabindex="-1"><a class="header-anchor" href="#版本创建与回退" aria-hidden="true">#</a> 版本创建与回退</h2><ul><li><p><strong>配置账户</strong></p><p>在正式使用前需要配置远程仓库账户（如：GitHub账户）的邮箱和用户名</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git config --global user.email &quot;email&quot;
git config --global user.name &quot;username&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接在<code>C:\\Users\\username</code>目录中修改<code>.gitconfig</code>文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[user]
	name = username
	email = useremail@email.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用</strong></p><ul><li><p>为文件<em><strong>创建</strong></em>一个版本，需要执行如下两个命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add 文件名/文件夹名 文件名/文件夹名 ...
git commit -m &#39;版本1&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git add</code>后面可以跟多个文件名/文件夹名，然后使用<code>git commit</code>统一创建一个版本</p></li><li><p><em><strong>查看版本记录</strong></em>：<code>git log</code>；查看简略记录：<code>git log --pretty=oneline</code></p></li><li><p><em><strong>回到前面某一版本</strong></em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset --hard HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：其中<code>HEAD</code>表示当前最新版本，<code>HEAD^</code>表示当前版本的前一个版本，<code>HEAD^^</code>表示当前版本的前两个版本，也可以使用<code>HEAD~1</code>表示当前版本的前一个版本，<code>HEAD~100</code>表示当前版本的前100个版本</p><blockquote><p>在cmd中<code>^</code>是转义符号，当出现在行尾的时候含义是这行还没写完，无视行尾的换行符，下行的内容实际执行的时候理解为直接接在上一行尾上，所以<code>^</code>在行末尾时会提示你More，就是让你输入下一行的内容。解决方法一是用双引号括上强行指定为字符串内容<code>&quot;^&quot;</code>；二是用两个<code>^</code>，即<code>^^</code>，前一个转义后一个，代表一个没有特殊含义的字符<code>^</code>本身，如果你要用n个<code>^</code>，实际中就要写2n个<code>^</code></p></blockquote></li><li><p><em><strong>回到后面某一版本</strong></em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset --hard 版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>查看操作记录</strong></em>：<code>git reflog</code></p></li><li><p><em><strong>查看当前工作树的状态</strong></em>：<code>git status</code></p></li></ul></li><li><p><strong>工作区和暂存区</strong></p><p><strong>工作区</strong>：电脑中的目录，一个文件夹就是一个工作区</p><p><strong>版本库</strong>：工作区的隐藏目录<code>.git</code>，就是Git的版本库。版本库中的<code>stage</code>（或者叫<code>index</code>）叫暂存区，还有Git自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code></p><p><code>git commit</code>命令就是向<code>master</code>分支上提交版本更改</p><img src="`+i+`" style="zoom:20%;"></li><li><p><strong>管理修改</strong></p><p>使用<code>git commit</code>创建版本的时候，只会对提交到暂存区的修改创建版本，未提交到暂存区的修改无法创建版本</p></li><li><p><strong>撤销修改</strong></p><ul><li><p>对<em><strong>未放入暂存区</strong></em>的文件修改进行撤销：<code>git checkout -- 文件名</code></p></li><li><p>对<em><strong>已放入暂存区</strong></em>的文件修改进行撤销：首先使用<code>git reset HEAD 文件名</code>将暂存区的修改撤销，重新放回工作区，然后使用<code>git checkout -- 文件名</code>撤销修改</p></li><li><p>修改已经<em><strong>提交到版本库</strong></em>，则需要进行版本回退来撤销修改</p></li></ul></li><li><p><strong>对比文件的不同</strong></p><ul><li><p><em><strong>对比某个文件工作区中的和某个版本的不同</strong></em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff HEAD -- 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：可在<code>HEAD</code>后面跟上<code>^</code>或<code>~</code>指定对比的版本</p></li><li><p><em><strong>对比某个文件两个版本之间的不同</strong></em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff HEAD HEAD^ -- 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：两个<code>HEAD</code>后面都可以跟上<code>^</code>或<code>~</code>指定对比的版本</p></li></ul></li><li><p><strong>删除文件</strong></p><p>删除文件命令：<code>rm 文件名</code>（cmd命令为：<code>del 文件名</code>）</p><p>删除文件也是对工作区的修改，可以使用<code>git checkout -- 文件名</code>和<code>git reset HEAD 文件名</code>进行撤销删除，或者使用版本回退撤销删除</p><p>确实要删除某一文件：先用命令删除文件，然后使用<code>git rm文件名</code>和<code>git commit创建版本</code></p></li></ul><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><p>Git把提交的版本串成一条时间线，这条时间线就是一个分支。默认开始只有一个主分支<code>master</code>分支，<code>HEAD</code>指向的就是当前分支</p><ul><li><p><strong>创建与使用分支</strong></p><p>查看当前有几个分支：<code>git branch</code>，结果中的<code>*</code>表示当前所在的分支</p><p>创建分支：<code>git branch 分支名</code></p><p>切换分支：<code>git checkout 分支名</code></p><p>创建并切换分支：<code>git checkout -b 分支名</code></p><p>把其他分支上的修改合并到当前分支：<code>git merge 分支名</code>，结果中的<code>Fast-forward</code>表示快速合并</p><p>删除分支：<code>git branch -d 分支名</code></p></li><li><p><strong>解决冲突</strong></p><p>当两个分支都对同一个文件进行修改并保存版本后，将两个分支进行合并时，会产生合并冲突</p><p><em><strong>解决方法</strong></em>：当冲突发生后，手动进入文件并修改其中的内容，然后再将文件添加到暂存区后保存版本</p><p>解决冲突后，使用命令：<code>git log --graph --pretty=oneline</code>，可以查看分支的合并情况</p></li><li><p><strong>分支管理策略</strong></p><p>通常，合并分支时，如果可能，Git会使用<code>Fast-forward</code>模式，但是有些快速合并并不能成功，并且合并时没有冲突，此时Git会在合并之后做一次新的提交，但这种模式下，删除分支之后，会丢掉分支信息</p><p>合并之后，同样可以使用<code>git log --graph --pretty=oneline</code>查看分支的合并情况</p><p><em><strong>禁用快速合并</strong></em>：<code>git merge --no-ff -m &#39;版本说明&#39; 分支名</code></p><blockquote><p><code>--no-ff</code>表示no Fast-forward，禁用快速合并</p><p>同时，因为此种合并会创建一个新的commit，所以需要加上<code>-m</code>进行版本说明</p></blockquote></li><li><p><strong>Bug分支</strong></p><p>实际开发中，修复bug时可以通过一个新的临时分支来修复，修复后，合并分支并删除临时分支。具体步骤如下：</p><p>1&gt; 在正在工作的分支上使用<code>git stash</code>命令保存工作现场</p><p>2&gt; 切换到出现bug的分支上，创建并切换到修复bug的临时分支上</p><p>3&gt; 修复bug并在临时分支上进行<code>commit</code>提交</p><p>4&gt; 切换回到出现bug的分支上，使用<code>no-ff</code>模式将修复bug的分支合并到出现bug的分支上</p><p>5&gt; 删除修复bug的临时分支</p><p>6&gt; 切换回到最初工作的分支上，使用<code>git stash list</code>命令可以查看保存的工作现场</p><p>7&gt; 使用<code>git stash pop</code>即可恢复工作现场继续工作</p></li></ul><h2 id="github使用" tabindex="-1"><a class="header-anchor" href="#github使用" aria-hidden="true">#</a> GitHub使用</h2><ul><li><p><strong>创建仓库</strong></p><p>1&gt; 注册并登录GitHub账户，点击<code>New repository</code>或者<code>Create repository</code>创建仓库</p><p>2&gt; 在创建页面中输入仓库名字、描述、可见性等信息，最后选择<code>Add a README file</code>和<code>Add .gitignore</code>，创建成功后可在这两个文件中增加说明信息和不被跟踪的文件</p></li><li><p><strong>添加SSH公钥</strong></p><p>机器想要与GitHub上的仓库进行交互，需要把机器的SSH公钥添加到GitHub账户上</p><ul><li><p><em><strong>添加步骤</strong></em></p><p>1&gt; 点击账户头像后的下拉三角，选择<code>Settings</code></p><p>2&gt; 新页面中找到并点击<code>SSH and GPG keys</code>，添加新的SSH公钥</p><p>3&gt; 编辑名称和公钥后提交即可</p></li><li><p><em><strong>创建SSH公钥</strong></em></p><p>首先查看<code>C:\\Users\\username\\.ssh</code>中是否有<code>id_rsa</code>、<code>id_rsa.pub</code>文件，有的话直接将<code>id_rsa.pub</code>文件中的内容添加为公钥即可，没有则需要创建公钥：</p><p>1&gt; 找到并编辑<code>.gitconfig</code>文件，将内容修改为GitHub账户的用户名和邮箱</p><p>2&gt; 使用命令<code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code>生成SSH公钥，在Git Bash和cmd下都行</p><p>3&gt; 按步骤输入密码等（可直接回车表示密码为空，不需要密码）</p><p>4&gt; 生成结束后，可在<code>C:\\Users\\username\\.ssh</code>下看到<code>id_rsa</code>（私钥）、<code>id_rsa.pub</code>（公钥）文件，将公钥内容全部复制添加到GitHub网站即可</p><p>参考资料：https://www.jianshu.com/p/2790a860f151</p></li></ul></li><li><p><strong>克隆项目</strong></p><p>1&gt; 进入需要克隆的仓库页面，点击<code>Code</code>按钮，找到<code>Clone</code>下的<code>SSH</code>，复制链接</p><p>2&gt; 在cmd下进入项目存放的目录，使用命令<code>git clone 链接</code>，即可克隆</p><p><em><strong>注</strong></em>：若克隆出错，执行如下命令后再重新执行克隆命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eval &quot;$(ssh-agent -s)&quot;
ssh-add
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>推送分支</strong></p><p>推送分支就是把该分支上的所有本地提交推送到远程库，推送时要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。</p><p>推送分支的命令：<code>git push origin 分支名</code></p></li><li><p><strong>本地分支跟踪远程分支</strong></p><p>命令：<code>git branch --set-upstream-to=origin/远程分支名 本地分支名</code></p><p>本地分支跟踪远程分支后，可直接使用<code>git push</code>进行分支推送</p></li><li><p><strong>从远程分支上拉取代码</strong></p><p>从远程分支上拉取代码会把远程分支上的代码下载并合并到本地所在分支上</p><p>拉取命令：<code>git pull origin 远程分支名</code></p></li></ul><h2 id="工作使用git" tabindex="-1"><a class="header-anchor" href="#工作使用git" aria-hidden="true">#</a> 工作使用Git</h2><ul><li><p><strong>项目经理</strong></p><p>1&gt; 搭建项目的框架</p><p>2&gt; 搭建完项目框架之后，把项目框架代码放到服务器上</p></li><li><p><strong>普通员工</strong></p><p>1&gt; 在自己电脑上，生成SSH公钥并交给项目经理，由项目经理将公钥添加到服务器上面</p><p>2&gt; 项目经理给每个成员项目的克隆地址，成员把代码下载到自己的电脑上</p><p>3&gt; 创建本地分支dev，在本地分支上进行每天的开发</p><p>4&gt; 本地分支上的代码开发完成后，将代码发布到远程的dev分支上</p></li></ul><p><u><em>master分支：用于保存发布的项目代码，如：V1.0，V2.0</em></u></p><p><u><em>dev分支：用于保存开发过程中的代码</em></u></p>`,14),n=[s];function p(r,g){return o(),t("div",null,n)}const u=e(c,[["render",p],["__file","06_Git版本管理.html.vue"]]);export{u as default};
