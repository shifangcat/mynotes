import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const e="/mynotes/assets/Django-ORM框架-yXP0smMV.png",o="/mynotes/assets/重定向-d0wBb2hY.png",p={},c=t('<h1 id="django-模型" tabindex="-1"><a class="header-anchor" href="#django-模型" aria-hidden="true">#</a> Django-模型</h1><h2 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h2><ul><li><p><strong>Django ORM</strong></p><p>O（objects）：类和对象</p><p>R（relation）：关系，关系数据库中的表格</p><p>M（mapping）：映射</p><img src="'+e+`" style="zoom:50%;"><p><em><strong>Django ORM的功能</strong></em>：</p><p>1&gt; 建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库</p><p>2&gt; 根据设计的模型类生成数据库中的表格</p><p>3&gt; 通过方便的配置就可以进行数据库的切换</p></li><li><p><strong>Django数据库配置</strong></p><p><em><strong>1&gt; 在MySQL中创建数据库</strong></em></p><p><em><strong>2&gt; 在Django项目中开始配置</strong></em></p><p>修改项目中的<code>settings.py</code>文件中的<code>DATABASES</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.mysql&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;djtest&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 使用的数据库的名字，需要事先手动创建完成</span>
        <span class="token string">&#39;USER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 链接MySQL的用户名</span>
        <span class="token string">&#39;PASSWORD&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 用户对应的密码</span>
        <span class="token string">&#39;HOST&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 指定MySQL数据库所在电脑的ip，localhost表示本地</span>
        <span class="token string">&#39;PORT&#39;</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token comment"># 指定MySQL数据库对应的端口</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt; 切换MySQL数据库后不能启动的问题</strong></em></p><p>a) 虚拟环境中需要安装pymysql的包，<code>pip install pymysql</code></p><p>b) 在项目中的<code>__init__.py</code>文件中增加如下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql
pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>重定向</strong></p><p>服务器不返回页面，而是告诉浏览器再去请求其他的url地址</p><p>设置方式为在视图函数中返回重定向的网页地址</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># return HttpResponseRedirect(&#39;/index&#39;)</span>
<span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 上下同种方法都行，一般用下面的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+o+`" style="zoom:25%;"></li></ul><h2 id="字段属性和选项" tabindex="-1"><a class="header-anchor" href="#字段属性和选项" aria-hidden="true">#</a> 字段属性和选项</h2><ul><li><p><strong>模型类属性命名规则</strong></p><p>1&gt; 不能是Python的保留关键字</p><p>2&gt; 不允许使用连续的下划线，这是由Django的查询方式决定的</p><p>3&gt; 定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如：<code>属性名=models.字段类型(选项)</code></p></li><li><p><strong>字段类型</strong></p><p>使用时需要引入<code>django.db.models</code>的包，字段类型如下：</p><table><thead><tr><th style="text-align:left;"><strong>类型</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">AutoField</td><td style="text-align:left;">自动增长的IntegerField，通常不用指定。不指定时Django会自动创建属性名为id的自动增长属性</td></tr><tr><td style="text-align:left;">BooleanField</td><td style="text-align:left;">布尔字段，值为True或False</td></tr><tr><td style="text-align:left;">NullBooleanField</td><td style="text-align:left;">支持Null、True、False三种值</td></tr><tr><td style="text-align:left;">CharField(max_length=最大长度)</td><td style="text-align:left;">字符串，参数max_length表示最大字符个数</td></tr><tr><td style="text-align:left;">TextField</td><td style="text-align:left;">大文本字段，一般超过4000个字符时使用</td></tr><tr><td style="text-align:left;">IntegerField</td><td style="text-align:left;">整数</td></tr><tr><td style="text-align:left;">DecimalField(max_digits=None, decimal_places=None)</td><td style="text-align:left;">十进制浮点数，参数max_digits表示总位；参数decimal_places表示小数位数</td></tr><tr><td style="text-align:left;">FloatField</td><td style="text-align:left;">浮点数，参数同上，精度小于DecimalField</td></tr><tr><td style="text-align:left;">DateField([auto_now=False, auto_now_add=False])</td><td style="text-align:left;">日期（年月日）<br>1) 参数auto_now为True表示每次修改对象时，自动将日期更新为修改的日期。用于“最后一次修改”的时间戳，总是使用当前日期，默认为False<br>2) 参数auto_now_add为True表示当对象第一次被创建时自动将日期设置为创建的日期。用于“创建”的时间戳，总是使用当前日期，默认为False。<br>3) auto_now_add和auto_now是相互排斥的，可以都不使用或只使用一个，同时使用会出错</td></tr><tr><td style="text-align:left;">TimeField</td><td style="text-align:left;">时间（时分秒），参数同DateField</td></tr><tr><td style="text-align:left;">DateTimeField</td><td style="text-align:left;">日期时间（年月日时分秒），参数同DateField</td></tr><tr><td style="text-align:left;">FileField</td><td style="text-align:left;">上传文件字段</td></tr><tr><td style="text-align:left;">ImageField</td><td style="text-align:left;">继承于FileField，对上传的内容进行校验，确保是有效的图片</td></tr></tbody></table></li><li><p><strong>选项</strong></p><p>通过选项实现对字段的约束，选项如下：</p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>default</td><td>设置默认值</td></tr><tr><td>primary_key</td><td>若值为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用</td></tr><tr><td>unique</td><td>若值为True，则这个字段在表中必须有唯一值，默认值是False</td></tr><tr><td>db_index</td><td>若值为True，则在表中会为此字段创建索引，默认值是False</td></tr><tr><td>db_column</td><td>字段在数据库中显示的名称，如果未指定，则使用属性的名称</td></tr><tr><td>null</td><td>若值为True，表示允许为空，默认值是False</td></tr><tr><td>blank</td><td>若值为True，则该字段允许为空白，默认值是False</td></tr></tbody></table><p><em><strong>null和blank</strong></em>：<code>null</code>是数据库范畴的概念，<code>blank</code>是后台管理页面表单验证范畴的</p><p><em><strong>注</strong></em>：当修改模型类之后，如果添加的选项不影响表的结构，则不需要重新做迁移（如<code>default</code>和<code>blank</code>）；否则需要重新迁移</p><p>参考文档：https://docs.djangoproject.com/zh-hans/2.0/</p></li></ul><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h2><ul><li><p><strong>MySQL日志文件</strong></p><p>MySQL日志文件默认没有产生，开启步骤如下：</p><p>1&gt; 使用命令<code>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</code>打开MySQL的配置文件，去除68、69行的注释，然后保存</p><p>2&gt; 重启MySQL服务，命令：<code>sudo service mysql restart</code></p><p>3&gt; 打开MySQL日志文件：<code>/var/log/mysql/mysql.log</code>是MySQL日志文件所在的位置，使用命令<code>sudo tail -f /var/log/mysql/mysql.log</code>可以实时查看MySQL的日志文件</p></li><li><p><strong>查询函数</strong></p><p>通过<code>模型类.objects.函数名()</code>可以调用查询函数，实现对模型类对应的数据表的查询</p><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能</strong></th><th><strong>返回值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>get</td><td>返回表中满足条件的一条且只能有一条数据</td><td>模型类对象</td><td>参数写查询条件<br>1) 查到多条数据，抛异常MultipleObjectsReturned<br>2) 查询不到数据，抛异常DoesNotExist</td></tr><tr><td>all</td><td>返回表中所有数据</td><td>返回值是QuerySet类型</td><td>不用参数，返回结果是查询集</td></tr><tr><td>filter</td><td>返回满足条件的数据</td><td>返回值是QuerySet类型</td><td>参数写查询条件</td></tr><tr><td>exclude</td><td>返回不满足条件的数据</td><td>返回值是QuerySet类型</td><td>参数写查询条件</td></tr><tr><td>order_by</td><td>对查询结果进行排序</td><td>返回值是QuerySet类型</td><td>参数写排序所依据的字段，默认升序，降序在字段前加“-”</td></tr></tbody></table><ul><li><p><em><strong>filter方法条件格式</strong></em>：<code>模型类属性名__条件名=值</code></p><ul><li><p><strong>判等</strong>，<code>exact</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id为1的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id__exact<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id为1的图书，作用和上面相同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>模糊查询</strong>，包含：<code>contains</code>，开头：<code>startswith</code>，结尾：<code>endswith</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>btitle__contains<span class="token operator">=</span><span class="token string">&#39;传&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查询书名包含&#39;传&#39;的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>btitle__endswith<span class="token operator">=</span><span class="token string">&#39;部&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查询书名以&#39;部&#39;结尾的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>空查询</strong>，<code>isnull</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>btitle__isnull<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 查询书名为空的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>范围查询</strong>，<code>in</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__in <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id为1、3、4的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>比较查询</strong>，大于：<code>gt</code>(greate than)，小于：<code>lt</code>(less than)，大于等于：<code>gte</code>(equal) ，小于等于： <code>lte</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id大于3的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__lte<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id小于等于2的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>日期查询</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>bpub_date__year<span class="token operator">=</span><span class="token number">1980</span><span class="token punctuation">)</span>  <span class="token comment"># 查询1980年出版的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>bpub_date__month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 查询7月份出版的图书</span>
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> date
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>bpub_date__gt <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询1980.1.1后出版的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><em><strong>order_by方法示例</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查询所有图书，按照id从小到大排序</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;-id&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查询所有图书，按照id从大到小排序</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;-bread&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id大于3的图书，按照阅读量从大到小排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：查询所有并排序可以省略<code>.all()</code>，如：<code>BookInfo.objects.order_by(&#39;bread&#39;)</code></p></li></ul></li></ul><h2 id="q对象" tabindex="-1"><a class="header-anchor" href="#q对象" aria-hidden="true">#</a> Q对象</h2><p><strong>作用</strong>：用于查询时设置条件之间的逻辑关系，and(<code>&amp;</code>)、or(<code>|</code>)、not(<code>~</code>)</p><p>使用前需要先导入：<code>from django.db.models import Q</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> bread__gt<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id大于3，并且阅读量大于30的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Q<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Q<span class="token punctuation">(</span>bread__gt<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id大于3，并且阅读量大于30的图书，效果和上面相同</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Q<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>Q<span class="token punctuation">(</span>bread__gt<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id大于3，或者阅读量大于30的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token operator">~</span>Q<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询id不等于3的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="f对象" tabindex="-1"><a class="header-anchor" href="#f对象" aria-hidden="true">#</a> F对象</h2><p><strong>作用</strong>：用于类属性之间的比较</p><p>使用前需要先导入：<code>from django.db.models import F</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>bread__gt<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">&#39;bcomment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询阅读量大于评论量的图书</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>bread__gt<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">&#39;bcomment&#39;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 查询阅读量大于评论量2倍的图书</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h2><p><strong>作用</strong>：对查询结果进行聚合操作</p><p>使用前需要先导入要使用的聚合类：<code>from django.db.models import Sum, Count, Max, Min, Avg</code></p><p><strong>aggregate()</strong>：使用这个函数进行聚合，返回值是一个字典，格式为：<code>查询结果.aggregate(Count(&#39;id&#39;))</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Count<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询图书数量</span>
<span class="token comment"># 返回结果为字典 {&#39;id__count&#39;: 5}</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Count<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询所有并聚合可以省略.all()</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Sum<span class="token punctuation">(</span><span class="token string">&#39;bread&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查询所有图书的阅读量总和，{&#39;bread__sum&#39;: 126}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>count()函数</strong>：作用：统计满足条件的数据的数量，返回值是一个数字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 统计图书数量，返回5</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询所有可以省略.all()，返回5</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 统计id大于3的图书的数量，返回2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询集" tabindex="-1"><a class="header-anchor" href="#查询集" aria-hidden="true">#</a> 查询集</h2><p>调用<code>all()</code>、<code>filter()</code>、<code>exclude()</code>、<code>order_by()</code>函数时，会产生一个QuerySet查询集，QuerySet类对象可以继续调用上面的所有函数</p><ul><li><p><strong>查询集特性</strong></p><p>1&gt; 惰性查询：只有在实际使用查询集中的数据时，才会对数据库真正进行查询</p><p>2&gt; 缓存：当使用的是同一个查询集时，第一次使用数据的时候会发生实际数据库的查询，然后把结果缓存起来，之后再使用这个查询集时，使用的是缓存中的结果，而不会再次进行查询</p></li><li><p><strong>限制查询集</strong></p><p>可以对一个查询集进行取下标或者切片操作来限制查询集的结果</p><p>对一个查询集进行切片操作会产生一个新的查询集，下标不允许为负数</p><p>取出查询集第一条数据的两种方式：</p><table><thead><tr><th>b[0]</th><th>如果b[0]不存在，抛出IndexError</th></tr></thead><tbody><tr><td>b[0:1].get()</td><td>如果b[0:1].get()不存在，抛出DoesNotExist</td></tr></tbody></table></li></ul><p><strong>exists()函数</strong>：判断查询集中是否有数据，格式：<code>查询集.exists()</code>，返回<code>True</code>或<code>False</code></p><h2 id="模型类关系" tabindex="-1"><a class="header-anchor" href="#模型类关系" aria-hidden="true">#</a> 模型类关系</h2><p><em><strong>1&gt; 一对多关系</strong></em>：<code>models.ForeignKey(&#39;对应的类名&#39;)</code>，定义在多的类中</p><p><em><strong>2&gt; 多对多关系</strong></em>：<code>models.ManyToManyField(&#39;对应的类名&#39;)</code>，定义在哪个类中都可以</p><p><em><strong>3&gt; 一对一关系</strong></em>：<code>models.OneToOneField(&#39;对应的类名&#39;)</code>，定义在哪个类中都可以</p><h2 id="关联查询-一对多" tabindex="-1"><a class="header-anchor" href="#关联查询-一对多" aria-hidden="true">#</a> 关联查询（一对多）</h2><ul><li><p><strong>查询和对象关联的数据</strong></p><p>在一对多关系中，一对应的类叫做<em><strong>一类</strong></em>，多对应的类叫做<em><strong>多类</strong></em>，多类中定义的建立关联的类属性叫做<em><strong>关联属性</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查询id为1的图书关联的英雄的信息。</span>
b<span class="token operator">=</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>heroinfo_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 通过模型类查询</span>
HeroInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>hbook__id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 查询id为1的英雄关联的图书信息。</span>
h <span class="token operator">=</span> HeroInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
h<span class="token punctuation">.</span>hbook
<span class="token comment"># 通过模型类查询</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>heroinfo__id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过一类的对象查询多类：<code>一类的对象.多类名小写_set.all()</code></p><p>通过多类的对象查询一类：<code>多类的对象.关联属性</code></p><p>通过多类的对象查询一类对象的id：<code>多类的对象.关联属性_id</code></p></li><li><p><strong>通过模型类实现关联查询</strong></p><p>1&gt; 通过模型类实现关联查询时，要查哪个表中的数据，就通过哪个类来查</p><p>2&gt; 写关联查询条件时，如果类中没有关系属性，条件需要写对应类的名字；如果类中有关联属性，直接写关联属性</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查询图书信息，要求图书关联的英雄的描述包含&#39;八&#39;</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>heroinfo__hcomment__contains<span class="token operator">=</span><span class="token string">&#39;八&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 查询图书信息，要求图书中的英雄的id大于3</span>
BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>heroinfo__id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># 查询书名为“天龙八部”的所有英雄</span>
HeroInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>hbook__btitle<span class="token operator">=</span><span class="token string">&#39;天龙八部&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过多类的条件查询一类的数据：<code>一类名.objects.filter(多类名小写__多类属性名__条件)</code></p><p>通过一类的条件查询多类的数据：<code>多类名.objects.filter(关联属性__一类属性名__条件)</code></p></li></ul><h2 id="插入、更新和删除" tabindex="-1"><a class="header-anchor" href="#插入、更新和删除" aria-hidden="true">#</a> 插入、更新和删除</h2><p>调用一个模型类对象的<code>save()</code>方法，就可以实现对模型类对应的数据表进行插入和更新</p><p>调用一个模型类对象的<code>delete()</code>方法，就可以实现对模型类对应的数据表进行删除</p><h2 id="自关联" tabindex="-1"><a class="header-anchor" href="#自关联" aria-hidden="true">#</a> 自关联</h2><p>自关联是一种特殊的一对多关系</p><p>实现自关联语句：<code>models.ForeignKey(&#39;self&#39;)</code></p><p>自关联查询和普通的由一查多、由多查一相同</p><h2 id="模型管理器" tabindex="-1"><a class="header-anchor" href="#模型管理器" aria-hidden="true">#</a> 模型管理器</h2><p><code>BookInfo.objects.all()</code>中的<code>objects</code>是Django通过<code>models.Manager</code>类自动生成的管理器对象，通过这个管理器可以实现对数据的查询等操作，自定义管理器之后Django不再自动生成默认的<code>objects</code>管理器</p><ul><li><p><strong>自定义模型管理器类</strong></p><p>1&gt; 自定义一个管理器类，这个类继承<code>models.Manager</code>类</p><p>2&gt; 在具体的模型类里定义一个自定义管理器类的对象</p></li><li><p><strong>自定义模型管理器类的应用场景</strong></p><p>1&gt; 重写查询方法，改变查询的结果集</p><p>2&gt; 添加额外的方法，操作模型类对应的数据表（增删改查），使用<code>self.model()</code>可以创建一个自定义管理器对应的模型类的对象</p></li></ul><h2 id="元选项" tabindex="-1"><a class="header-anchor" href="#元选项" aria-hidden="true">#</a> 元选项</h2><p><strong>作用</strong>：指定模型类对应的表名</p><p>Django默认生成的表名：<code>应用名小写_模型类名小写</code></p><p>元选项的使用：在模型类中定义一个元类<code>Meta</code>，在里面定义一个类属性<code>db_table</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
    db_table <span class="token operator">=</span> <span class="token string">&#39;bookinfo&#39;</span>  <span class="token comment"># 指定模型类对应的表名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,47),l=[c];function i(d,u){return s(),a("div",null,l)}const m=n(p,[["render",i],["__file","02_Django-模型.html.vue"]]);export{m as default};
