import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as p,b as o,e as i,w as l,f as n,d as c}from"./app-VKLC1A-x.js";const u={},r=n(`<h1 id="爱家租房项目" tabindex="-1"><a class="header-anchor" href="#爱家租房项目" aria-hidden="true">#</a> 爱家租房项目</h1><h2 id="restful风格" tabindex="-1"><a class="header-anchor" href="#restful风格" aria-hidden="true">#</a> Restful风格</h2><p>REST：是Representational State Transfer（具象状态传输）的缩写，一般解释为“表现层状态转换”，是一种设计风格而不是标准，指客户端和服务器的交互形式</p><ul><li><p><strong>REST的特点</strong></p><ul><li><em><strong>具象的</strong></em>：一般指表现层，要表现的对象就是资源。如：客户端访问服务器，获取的数据就是资源</li><li><em><strong>表现</strong></em>：资源的表现形式。txt格式、html格式、json格式、jpg格式等。浏览器通过URL确定资源的位置，但是需要在HTTP请求头中，用Accept和Content-Type字段指定，这两个字段是对资源表现的描述</li><li><em><strong>状态转换</strong></em>：客户端和服务器交互的过程。在这个过程中，一定会有数据和状态的转化，这种转化叫做状态转换。其中，GET表示获取资源，POST表示新建资源，PUT表示更新资源，DELETE表示删除资源。HTTP协议中最常用的就是这四种操作方式</li></ul></li><li><p><strong>RESTful架构</strong></p><ul><li>每个URL代表一种资源</li><li>客户端和服务器之间，传递这种资源的某种表现层</li><li>客户端通过四个http动词，对服务器资源进行操作，实现表现层状态转换</li></ul></li></ul><h3 id="设计符合restful风格的api" tabindex="-1"><a class="header-anchor" href="#设计符合restful风格的api" aria-hidden="true">#</a> 设计符合RESTful风格的API</h3><ul><li><p><strong>域名</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 将api部署在专用域名下：
http://api.example.com
# 将api放在主域名下：
http://www.example.com/api/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>版本</strong></p><p>将API的版本号放在url中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://www.example.com/app/1.0/info
http://www.example.com/app/1.2/info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>路径</strong></p><p>路径表示API的具体网址。每个网址代表一种资源。 资源作为网址，网址中不能有动词只能有名词，一般名词要与数据库的表名对应。而且名词要使用复数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 获取单个商品
http://www.example.com/app/goods/1
# 获取所有商品
http://www.example.com/app/goods
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用标准的HTTP方法</strong></p><p>对于资源的具体操作类型，由HTTP动词表示，常用的HTTP动词有四个：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET     SELECT ：从服务器获取资源
POST    CREATE ：在服务器新建资源
PUT     UPDATE ：在服务器更新资源
DELETE  DELETE ：从服务器删除资源
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>过滤信息</strong></p><p>如果资源数据较多，服务器不能将数据一次全部返回给客户端，API应该提供参数，过滤返回结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 指定返回数据的数量
http://www.example.com/goods?limit=10
# 指定返回数据的开始位置
http://www.example.com/goods?offset=10
# 指定第几页，以及每页数据的数量
http://www.example.com/goods?page=2&amp;per_page=20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>状态码</strong></p><p>服务器向用户返回的状态码和提示信息，常用的有：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>200 OK ：服务器成功返回用户请求的数据
201 CREATED ：用户新建或修改数据成功
202 Accepted ：表示请求已进入后台排队
400 INVALID REQUEST ：用户发出的请求有错误
401 Unauthorized ：用户没有权限
403 Forbidden ：访问被禁止
404 NOT FOUND ：请求针对的是不存在的记录
406 Not Acceptable ：用户请求的的格式不正确
500 INTERNAL SERVER ERROR ：服务器发生错误
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>错误信息</strong></p><p>一般来说，服务器返回的错误信息，以键值对的形式返回</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    error:&#39;Invalid API KEY&#39;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>响应结果</strong></p><p>针对不同结果，服务器向客户端返回的结果应符合以下规范</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 返回商品列表
GET    http://www.example.com/goods
# 返回单个商品
GET    http://www.example.com/goods/cup
# 返回新生成的商品
POST   http://www.example.com/goods
# 返回一个空文档
DELETE http://www.example.com/goods
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用链接关联相关的资源</strong></p><p>在返回响应结果时提供链接其他API的方法，使客户端很方便的获取相关联的信息</p><p>服务器返回的数据格式，应该尽量使用JSON，避免使用XML</p></li></ul><h2 id="接口文档" tabindex="-1"><a class="header-anchor" href="#接口文档" aria-hidden="true">#</a> 接口文档</h2><p>接口文档需要包括：接口名字、 描述（描述清楚接口的功能）、 url、 请求方式、 传入参数、 返回值，示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.接口：获取图片验证码
2.描述：前端访问可以获取到验证码图片
3.url：/api/v1.0/image_codes/&lt;image_code_id&gt;
4.请求方式：GET
5.传入参数：
    格式：路径参数（参数是查询字符串，还是请求体的表单、json、xml等）

    名字            类型  是否必须       说明
    image_code_id   str     是     验证码图片的编号
6.返回值：
    格式：正常：验证码图片；异常：json数据

    名字     类型   是否必须    说明
    errno    str      否     错误代码
    errmsg   str      否     错误内容

    示例：
    &#39;{&quot;errno&quot;: &quot;4001&quot;, &quot;errmsg&quot;: &quot;保存图片验证码到redis中失败&quot;}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发送短信" tabindex="-1"><a class="header-anchor" href="#发送短信" aria-hidden="true">#</a> 发送短信</h2><p>平台：容联云：https://www.yuntongxun.com/</p><h2 id="文件存储" tabindex="-1"><a class="header-anchor" href="#文件存储" aria-hidden="true">#</a> 文件存储</h2><p>常用解决方案：</p><p><em><strong>1&gt;</strong></em> 自行搭建文件存储系统：</p><p>​ FastDFS：快速分布式文件存储系统，常用于电商图片存储</p><p>​ HDFS：Hadoop分布式文件系统，适用于多种类型的文件存储</p><p><em><strong>2&gt;</strong></em> 第三方服务：七牛云存储：https://www.qiniu.com/（按流量，访问次数收费）</p><h3 id="多媒体表单的使用" tabindex="-1"><a class="header-anchor" href="#多媒体表单的使用" aria-hidden="true">#</a> 多媒体表单的使用</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- enctype=&quot;multipart/form-data&quot;表明是多媒体表单 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-avatar<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    选择头像：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>avatar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-success<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上传<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多媒体表单可以使用<code>jquery.form.min.js</code>插件帮助向后端传输文件，原理是在浏览器向后端发送文件数据时，还可以同时自定义回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form-avatar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 阻止表单的默认行为</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用jquery.form.min.js提供的ajaxSubmit对表单进行异步提交</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajaxSubmit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api/v1.0/users/avatar&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;X-CSRFToken&#39;</span><span class="token operator">:</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;csrf_token&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>errno <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 上传成功</span>
                    <span class="token keyword">var</span> avatarUrl <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>avatar_url<span class="token punctuation">;</span>
                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#user-avatar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> avatarUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓存数据" tabindex="-1"><a class="header-anchor" href="#缓存数据" aria-hidden="true">#</a> 缓存数据</h2><p>保证MySQL与Redis数据一致的问题：</p><p>方法一：在操作MySQL时删除缓存数据</p><p>方法二：给Redis中的缓存数据设置有效期，让缓存数据能够自动更新</p><h2 id="前端js模板" tabindex="-1"><a class="header-anchor" href="#前端js模板" aria-hidden="true">#</a> 前端js模板</h2><p>art-template：http://aui.github.io/art-template/zh-cn/index.html</p><p>当后端向前端发送的数据太多时，为了便于数据的传输可以使用前端的js模板</p><p>art-template使用示例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>area-id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>area_id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/html<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>area-temp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token punctuation">{</span><span class="token punctuation">{</span> each areas <span class="token keyword">as</span> area <span class="token punctuation">}</span><span class="token punctuation">}</span>
    	<span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;{{ area.aid }}&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> area<span class="token punctuation">.</span>aname <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>each <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 引入atr-template模板文件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/js/template.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用Ajax请求向后端获取数据</span>
$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;api/v1.0/areas&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>errno <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> areas <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token comment">// 使用js模板，将数据传递给html页面</span>
        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&quot;area-temp&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">areas</span><span class="token operator">:</span> areas<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#area-id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> celery</h2>`,32),d=n('<h2 id="项目优化" tabindex="-1"><a class="header-anchor" href="#项目优化" aria-hidden="true">#</a> 项目优化</h2><h3 id="数据库优化" tabindex="-1"><a class="header-anchor" href="#数据库优化" aria-hidden="true">#</a> 数据库优化</h3><ul><li><p><strong>表结构设计</strong></p><p>表结构关系到表的扩展和查询的速度</p><p><strong>三范式</strong>：https://www.zhihu.com/question/24696366</p><p>设计表的时候就需要考虑可能会用到的查询，为方便查询而设计，比如用空间换时间，适当增加冗余字段以节省查询开销等</p></li><li><p><strong>建索引</strong></p><p>主键、唯一值(unique)、索引(key、index)、外键都可以看作是索引的一种，能够加快查询速度</p><p>MySQL索引的使用：http://www.jianshu.com/p/2b541c028157</p><p><strong>索引的优点</strong>：提升查询速度</p><p><strong>索引的缺点</strong>：降低增删改的速度</p></li><li><p><strong>SQL语句优化</strong></p><p>为了进一步进行数据库优化，可以抛弃掉框架和扩展自己生成的SQL语句，而改成自定义的SQL语句</p><p><em><strong>1&gt;</strong></em> <strong>最左原则</strong>：在写查询条件时，把建立了索引的字段放在前面</p><p><em><strong>2&gt;</strong></em> 不要使用<code>select *</code>，而要使用<code>select 具体的字段</code></p><p><em><strong>3&gt;</strong></em> 能使用联合查询，不使用嵌套查询（子查询）</p><p><em><strong>4&gt;</strong></em> 能不使用联合查询，尽量不用联合查询</p><p><em><strong>5&gt;</strong></em> 外键<code>cascade</code>级联（维护外键有额外开销，影响性能），数据量大的时候，不建议再使用外键</p><p><em><strong>6&gt;</strong></em> 使用分析工具分析效率低的SQL语句（慢查询工具）：</p><p>https://flyerboy.github.io/2016/12/23/mysql_slow/</p><p>https://yemengying.com/2016/05/24/mysql-tuning/</p></li><li><p><strong>其他优化方案</strong></p><p><em><strong>1&gt;</strong></em> 使用缓存减少直接从数据库中查询的次数，如：Redis缓存</p><p><em><strong>2&gt;</strong></em> 让数据库进行读写分离，主从热备份，主数据库用于写（增删改），从数据库用于读（查）</p><p><em><strong>3&gt;</strong></em> 分库分表：http://www.infoq.com/cn/articles/key-steps-and-likely-problems-of-split-table</p></li></ul><h2 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h2><p>账号分配</p><p>1、email</p><p>2、git/gitlab账号(用于代码存储和管理)、rsa</p><p>3、vpn(虚拟私有网络)</p><p>4、服务器：阿里云、腾讯云、aws、亚马逊</p><p>5、数据库账号</p>',10);function k(v,m){const s=t("RouterLink");return e(),p("div",null,[r,o("p",null,[i(s,{to:"/docs/Python/08_Flask%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/celery.html"},{default:l(()=>[c("celery笔记文件")]),_:1})]),d])}const h=a(u,[["render",k],["__file","05_爱家租房项目.html.vue"]]);export{h as default};
