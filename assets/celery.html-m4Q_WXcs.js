import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as e,f as a}from"./app-VKLC1A-x.js";const t="/mynotes/assets/celery的运行逻辑-Z3UkTdKh.jpeg",p="/mynotes/assets/以目录结构使用celery-7OuIjTP8.png",c={},o=a('<h1 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> celery</h1><p>安装：<code>pip install celery</code></p><h2 id="celery的运行逻辑" tabindex="-1"><a class="header-anchor" href="#celery的运行逻辑" aria-hidden="true">#</a> celery的运行逻辑</h2><img src="'+t+`" alt="celery的运行逻辑" style="zoom:33%;"><p>celery中客户端中定义任务的函数代码和worker中实际执行的函数代码可以不相同，只要保证两者的函数名相同即可，其中在实际执行中使用的是worker中的函数代码</p><h2 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题" aria-hidden="true">#</a> 遇到的问题</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Task handler raised error: ValueError(&#39;not enough values to unpack (expected 3, got 0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>报错原因</strong>：win10调用celery4.x版本的时候会出现这样的问题</p><p><strong>解决方法</strong>：</p><p><em><strong>1&gt;</strong></em> 安装eventlet</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install eventlet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 启动worker的时候加个参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>celery -A task worker -l info -P eventlet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="以目录结构使用celery" tabindex="-1"><a class="header-anchor" href="#以目录结构使用celery" aria-hidden="true">#</a> 以目录结构使用celery</h2><p>目录结构：<img src="`+p+`" alt="以目录结构使用celery" style="zoom:67%;"></p><p><em><strong>1&gt;</strong></em> <code>celery.py</code>是启动文件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery

<span class="token comment"># 定义celery对象</span>
celery_app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;ihome&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 引入配置信息</span>
celery_app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">&#39;ihome.tasks.celery_config&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 自动搜寻异步任务，指明包名后celery会自动找到包中的\`tasks.py\`文件</span>
celery_app<span class="token punctuation">.</span>autodiscover_tasks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;ihome.tasks.sms&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> <code>celery_config.py</code>是配置文件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 任务队列broker的存放位置</span>
BROKER_URL <span class="token operator">=</span> <span class="token string">&#39;redis://127.0.0.1:6379/1&#39;</span>

<span class="token comment"># 结果数据backend的存放位置</span>
CELERY_RESULT_BACKEND <span class="token operator">=</span> <span class="token string">&#39;redis://127.0.0.1:6379/2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 包<code>sms</code>用于存放这个任务相关的文件，其中需要有一个<code>task.py</code>文件，在其中定义任务的函数代码，在启动程序时celery会自动寻找到包中的<code>tasks.py</code>文件，并执行其中的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># tasks.py文件</span>

<span class="token keyword">from</span> ihome<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>celery <span class="token keyword">import</span> celery_app
<span class="token keyword">from</span> ihome<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>yuntongxun<span class="token punctuation">.</span>sms <span class="token keyword">import</span> SSDK

<span class="token decorator annotation punctuation">@celery_app<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">send_sms</span><span class="token punctuation">(</span>tels<span class="token punctuation">,</span> datas<span class="token punctuation">,</span> temp_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;发送短信的异步任务&quot;&quot;&quot;</span>
    ssdk <span class="token operator">=</span> SSDK<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ssdk<span class="token punctuation">.</span>send_message<span class="token punctuation">(</span>tels<span class="token punctuation">,</span> datas<span class="token punctuation">,</span> temp_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>4&gt;</strong></em> 启动命令，启动启动文件以启动celery程序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>celery -A ihome.tasks.celery worker -l info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="celery接收返回值" tabindex="-1"><a class="header-anchor" href="#celery接收返回值" aria-hidden="true">#</a> celery接收返回值</h2><p>当celery的任务函数有返回值时，可以在客户端进行获取</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用celery异步发送短信，delay函数不会堵塞，将会立即返回</span>
result <span class="token operator">=</span> send_sms<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">[</span>mobile<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sms_code<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 返回的异步执行的结果对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>  <span class="token comment"># 获取对象的id</span>
<span class="token comment"># 通过get()方法能获取celery异步执行的结果</span>
<span class="token comment"># get()方法默认是阻塞的行为，会等到有了执行结果之后才返回</span>
<span class="token comment"># 可以通过参数timeout来设置超时时间，超时时间结束还拿不到结果则直接返回</span>
ret <span class="token operator">=</span> result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),i=[o];function l(r,d){return s(),e("div",null,i)}const k=n(c,[["render",l],["__file","celery.html.vue"]]);export{k as default};
