import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,f as e}from"./app-VKLC1A-x.js";const p={},o=e(`<h1 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h1><h2 id="索引的原理-重点" tabindex="-1"><a class="header-anchor" href="#索引的原理-重点" aria-hidden="true">#</a> 索引的原理（重点）</h2><p>例如有一万条数据，表里有一个字段 ID，ID 存储的数据是从 1 到 10000 递增的数据 因为索引条目，ID 1 到 10 范围的数据会存储在第一个索引条目中，10 到 20 的数据会存储在第二个索引条目里，以此类推。在查找数据的时候，会根据索引条目返回被查找数据的 ROWID，然后根据 ROWID 快速定位到被查找的数据。例如要查找 ID = 5 的数据，就会到第一个索引条目里去找，再将找到的 ROWID 返回</p><h2 id="索引的使用" tabindex="-1"><a class="header-anchor" href="#索引的使用" aria-hidden="true">#</a> 索引的使用</h2><p>Oracle 数据库会为表的主键和包含唯一约束的列自动创建唯一索引</p><p>索引可以提高查询的效率</p><h3 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建唯一索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> 索引名称 <span class="token keyword">ON</span> 表名 <span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> UNI_EMPNO_818 <span class="token keyword">ON</span> EMP_818 <span class="token punctuation">(</span>EMPNO<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建普通索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> UNI_JOB_818 <span class="token keyword">ON</span> EMP_818 <span class="token punctuation">(</span>JOB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：创建唯一索引时，字段中不能存在相同的数据</p><p>向唯一索引的字段中插入重复数据时，会报错</p><p>向唯一索引中插入空值是可以的，同时可以存在多个空值</p><h3 id="主键字段和唯一索引的区别" tabindex="-1"><a class="header-anchor" href="#主键字段和唯一索引的区别" aria-hidden="true">#</a> 主键字段和唯一索引的区别</h3><p>主键字段是非空的，唯一索引的字段可以存在空值</p><p>两者的共同点就是只要有数据，那么数据一定不能重复</p><h3 id="执行计划" tabindex="-1"><a class="header-anchor" href="#执行计划" aria-hidden="true">#</a> 执行计划</h3><p>选中相应 SQL 语句按 <code>F5</code> 查看执行计划，当 <code>WHERE</code> 条件中用到索引字段时，就会走索引扫描，否则会走全表扫描</p><h3 id="什么时候创建索引" tabindex="-1"><a class="header-anchor" href="#什么时候创建索引" aria-hidden="true">#</a> 什么时候创建索引</h3><p><em><strong>1&gt;</strong></em> 如果表中的某些字段经常被作为查询的条件 (<code>WHERE</code>) 出现时，就应该考虑为该列创建索引</p><p><em><strong>2&gt;</strong></em> 经常作为关联条件的字段也可以考虑在这些字段上创建索引</p><p><em><strong>3&gt;</strong></em> 有一条基本的准则是：当任何单个查询要查询的行数少于或者等于整个表行数的 10% 时，索引就非常有用</p><h3 id="组合索引" tabindex="-1"><a class="header-anchor" href="#组合索引" aria-hidden="true">#</a> 组合索引</h3><p>当两个或多个列经常一起出现在 <code>WHERE</code> 条件中时，可以考虑为其创建组合索引</p><p>组合索引中列的顺序是任意的，也无需相邻，但是建议将最频繁访问的列放在列表的最前面</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建组合索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> 组合索引名称 <span class="token keyword">ON</span> 表名 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> INDEX_EMPNO_JOB_818 <span class="token keyword">ON</span> EMP_818 <span class="token punctuation">(</span>DEPTNO<span class="token punctuation">,</span> JOB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 唯一索引、普通索引、组合索引的删除方法是相同的</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名<span class="token punctuation">;</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> INDEX_EMPNO_JOB_818<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引失效" tabindex="-1"><a class="header-anchor" href="#索引失效" aria-hidden="true">#</a> 索引失效</h2><p>索引失效就是在 <code>WHERE</code> 后面用到了索引字段，但是没有走索引扫描，走的是全表扫描</p><p>索引失效主要存在以下几种情况：</p><p><em><strong>1&gt;</strong></em> 隐式转换导致索引失效。如对于字符串类型的字段，在查询时却将其当成了 NUMBER 类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TEST <span class="token keyword">WHERE</span> TU_MDN <span class="token operator">=</span> <span class="token number">13333333333</span><span class="token punctuation">;</span>   <span class="token comment">-- 错误使用</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TEST <span class="token keyword">WHERE</span> TU_MDN <span class="token operator">=</span> <span class="token string">&#39;13333333333&#39;</span><span class="token punctuation">;</span>  <span class="token comment">-- 正确使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 对索引列进行运算导致索引失效。运算包括：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 等</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TEST <span class="token keyword">WHERE</span> ID <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">-- 错误使用</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TEST <span class="token keyword">WHERE</span> ID <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">-- 正确使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 使用 ORACLE 内部函数导致索引失效。对于这样的情况应当创建基于函数的索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 错误使用，此时 ID 的索引已经不起作用了</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TEST <span class="token keyword">WHERE</span> <span class="token function">ROUND</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10.00</span><span class="token punctuation">;</span>

<span class="token comment">-- 正确使用的方法，应当先建立函数索引，然后再使用</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> TEST_ID_FBI_IDX <span class="token keyword">ON</span> TEST <span class="token punctuation">(</span><span class="token function">ROUND</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 建立函数索引</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TEST <span class="token keyword">WHERE</span> <span class="token function">ROUND</span><span class="token punctuation">(</span>ID<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>           <span class="token comment">-- 正确使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>4&gt;</strong></em> 以下使用会使索引失效，应避免使用：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 使用 &lt;&gt;、NOT IN、NOT EXISTS、!=</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP_818 T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>EMPNO <span class="token operator">&lt;&gt;</span> <span class="token comment">/*NOT IN 、NOT EXISTS、!=*/</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP_728 T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>EMPNO <span class="token operator">BETWEEN</span> <span class="token number">1</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">-- 2. LIKE &#39;%_&#39; 百分号在前会导致索引失效</span>
<span class="token comment">-- 可采用在建立索引时用 REVERSE(COLUMNNAME) 这种方法处理</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> UNI_EMPNO_JOB_1 <span class="token keyword">ON</span> EMP_818 <span class="token punctuation">(</span>REVERSE<span class="token punctuation">(</span>JOB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP_818 T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>JOB <span class="token operator">LIKE</span> <span class="token string">&#39;%__&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 3. 单独使用组合索引里非第一位置的索引列</span>
<span class="token comment">-- 应总是使用索引的第一个列，如果索引是建立在多个列上</span>
<span class="token comment">-- 只有在它的第一个列被 WHERE 子句引用时，优化器才会选择使用该索引</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),t=[o];function c(l,r){return n(),a("div",null,t)}const k=s(p,[["render",c],["__file","15_索引.html.vue"]]);export{k as default};
