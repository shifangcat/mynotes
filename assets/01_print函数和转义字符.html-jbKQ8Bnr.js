import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as a,f as s}from"./app-VKLC1A-x.js";const o={},t=s(`<h1 id="print-函数和转义字符" tabindex="-1"><a class="header-anchor" href="#print-函数和转义字符" aria-hidden="true">#</a> print 函数和转义字符</h1><h2 id="print-函数" tabindex="-1"><a class="header-anchor" href="#print-函数" aria-hidden="true">#</a> print 函数</h2><h3 id="输出不同内容" tabindex="-1"><a class="header-anchor" href="#输出不同内容" aria-hidden="true">#</a> 输出不同内容</h3><p><strong>数字</strong>：直接写在括号中，不用加引号。如：<code>print(520)</code></p><p><strong>字符串</strong>：需要加引号，单双引号都行。因为字符串的多样性，计算机无法理解，加引号意为不用理解，直接输出即可。如：<code>print(&#39;hello word&#39;)</code></p><p><strong>含有运算符的表达式</strong>：会直接输出表达式的结果。如：<code>print(3+1)</code>，将会直接输出 <code>4</code>，如果需要输出为 <code>3+1</code>，可写成 <code>print(&#39;3+1&#39;)</code></p><h3 id="输出不同位置" tabindex="-1"><a class="header-anchor" href="#输出不同位置" aria-hidden="true">#</a> 输出不同位置</h3><p><strong>显示器</strong></p><p><strong>文件</strong>：</p><p><em><strong>注</strong></em>：①指定的盘符需要存在；②需要使用 <code>file=fp</code>（<code>fp</code> 可以为 <code>a</code>、<code>b</code> 等，前后一致即可）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># a+：表示以只读的方式打开文件，存在文件则在文件内容后追加，不存在则创建后追加</span>
fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;D:/text.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a+&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># D:/text.txt：表示文件的位置和名称</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello word&#39;</span><span class="token punctuation">,</span> <span class="token builtin">file</span> <span class="token operator">=</span>fp<span class="token punctuation">)</span>
fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出的形式" tabindex="-1"><a class="header-anchor" href="#输出的形式" aria-hidden="true">#</a> 输出的形式</h3><p><strong>换行</strong><strong>不换行</strong>：用引号和逗号隔开。如：<code>print(&#39;hello&#39;, &#39;word&#39;, &#39;python&#39;)</code></p><h2 id="转义字符与原字符" tabindex="-1"><a class="header-anchor" href="#转义字符与原字符" aria-hidden="true">#</a> 转义字符与原字符</h2><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h3><p><strong>转义字符定义</strong>：<code>反斜杠\\+想要实现的转义功能首字母</code></p><p><strong>为什么需要转义字符</strong>：</p><p><em><strong>1&gt;</strong></em> 当字符串中包含反斜杠、单引号和双引号等有特殊用途的字符时，必须使用反斜杠对这些字符进行转义（转换一个含义）</p><p>反斜杠：<code>\\\\</code></p><p>单引号：<code>\\&#39;</code></p><p>双引号：<code>\\&quot;</code></p><p><em><strong>2&gt;</strong></em> 字符串中包含换行、回车、水平制表符或退格等无法直接表示的特殊字符时，也可以使用转义字符</p><p>换行：<code>\\n</code>（new line）</p><p>回车：<code>\\r</code>（return）</p><p>水平制表符：<code>\\t</code>（tab，四个制表位为一组，空格占几位看前面剩几个）</p><p>退格：<code>\\b</code>（backspace）</p><h3 id="原字符" tabindex="-1"><a class="header-anchor" href="#原字符" aria-hidden="true">#</a> 原字符</h3><p>不希望字符串中的转义字符起作用，就使用原字符，就是在字符串之前加上 <code>r</code> 或 <code>R</code>。如：<code>print(r&#39;hello\\nword&#39;)</code> 输出的是 <code>hello\\nword</code>，而不是换行输出</p><p><em><strong>注</strong></em>：最后的字符不能是单数的反斜线，双数的可以。想要在最后输出单数的反斜线，可以在反斜线后加空格</p>`,29),r=[t];function p(c,d){return e(),a("div",null,r)}const h=n(o,[["render",p],["__file","01_print函数和转义字符.html.vue"]]);export{h as default};
