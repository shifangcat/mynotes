import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as o,f as c}from"./app-VKLC1A-x.js";const a={},n=c(`<h1 id="input-函数和运算符" tabindex="-1"><a class="header-anchor" href="#input-函数和运算符" aria-hidden="true">#</a> input 函数和运算符</h1><h2 id="input-函数" tabindex="-1"><a class="header-anchor" href="#input-函数" aria-hidden="true">#</a> input 函数</h2><p><strong>作用</strong>：接受来自用户的输入</p><p><strong>返回值类型</strong>：输入值的数据类型永远都是 <code>str</code></p><p><strong>值的存储</strong>：使用 <code>=</code> 对输入的值进行存储，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入姓名：&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p><strong>标准算术运算符</strong>：加 <code>+</code>、减 <code>-</code>、乘 <code>*</code>、除 <code>/</code>、整除 <code>//</code></p><p><em><strong>注</strong></em>：整除一正一负向下取整。如：<code>9//-4</code> → <code>-3</code>，<code>-9//4</code> → <code>-3</code></p><p><strong>取余运算符</strong>：<code>%</code></p><p><em><strong>注</strong></em>：一正一负要用公式：余数=被除数-除数*商（商为整除的结果）</p><p><code>9%-4</code> → <code>-3</code>，因为 9-（-4）*（-3）=-3，商的 -3 来自于 <code>9//-4</code> → <code>-3</code></p><p><strong>幂运算符</strong>：<code>**</code></p><p>如：<code>4**2</code> → <code>16</code></p><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p>赋值运算符：<code>=</code></p><p>执行顺序：从右到左</p><p>支持链式赋值：<code>a = b = c = 20</code></p><p>支持参数赋值：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>//=</code>、<code>%=</code></p><p>支持系列解包赋值：<code>a, b, c = 20, 30, 40</code></p><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p>对变量或表达式的结果进行大小、真假等比较</p><p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code></p><p><code>==</code>：对象 value（值）的比较</p><p><code>is</code>、<code>is not</code>：对象 id（标识）的比较</p><p><em><strong>注</strong></em>：一个 <code>=</code> 称为赋值运算符；两个 <code>==</code> 称为比较运算符，比较变量的 value 是否相等</p><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符" aria-hidden="true">#</a> 布尔运算符</h3><p>对布尔值之间的运算</p><p><code>and</code>：并且，结果都为 <code>True</code>，最终才为 <code>True</code></p><p><code>or</code>：或者，任一结果为 <code>True</code>，最终都为 <code>True</code></p><p><code>not</code>：对 <code>bool</code> 类型的操作数取反，输出相反的结果</p><p><code>in</code>、<code>not in</code></p><h3 id="身份运算符" tabindex="-1"><a class="header-anchor" href="#身份运算符" aria-hidden="true">#</a> 身份运算符</h3><p>身份运算符用于比较两个对象的内存地址是否一致——是否是对同一个对象的引用</p><p><strong><code>is</code> 与 <code>==</code> 的区别</strong>：</p><p><code>is</code> 用于判断两个变量引用的对象是否是同一个</p><p><code>==</code> 用于判断引用变量的值是否相等</p><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><p>将数据转成二进制进行计算</p><p>位与 <code>&amp;</code>：对应数位都是 1，结果数位才是 1，否则为 0</p><p>位或 <code>|</code>：对应数位都是 0，结果数位才是 0，否则为 1</p><p>左移位运算符 <code>&lt;&lt;</code>：高位溢出舍弃，低位补 0</p><p>右移位运算符 <code>&gt;&gt;</code>：低位溢出舍弃，高位补 0</p><h3 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h3><p>算术运算（幂运算 &gt; 乘除 &gt; 加减）</p><p>→ 位运算（移位 &gt; 按位与 &gt; 按位或）</p><p>→ 比较运算</p><p>→ 布尔运算（and &gt; or）</p><p>→ 赋值运算</p><p>有括号先算括号里面的</p>`,51),p=[n];function t(r,s){return d(),o("div",null,p)}const l=e(a,[["render",t],["__file","03_input函数和运算符.html.vue"]]);export{l as default};
