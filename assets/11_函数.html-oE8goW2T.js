import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const p={},e=t(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>函数就是执行特定任何以完成特定功能的一段代码</p><p><strong>为什么需要函数</strong>：</p><p><em><strong>1&gt;</strong></em> 复用代码</p><p><em><strong>2&gt;</strong></em> 隐藏实现细节</p><p><em><strong>3&gt;</strong></em> 提高可维护性</p><p><em><strong>4&gt;</strong></em> 提高可读性便于调试</p><h2 id="创建函数" tabindex="-1"><a class="header-anchor" href="#创建函数" aria-hidden="true">#</a> 创建函数</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建函数</span>
<span class="token keyword">def</span> <span class="token function">q</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># a、b 称为形式参数，简称形参，形参的位置在函数定义处</span>
    c <span class="token operator">=</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> c

<span class="token comment"># 调用函数</span>
m <span class="token operator">=</span> q<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> q<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的参数传递" tabindex="-1"><a class="header-anchor" href="#函数的参数传递" aria-hidden="true">#</a> 函数的参数传递</h2><p><strong>位置实参</strong>：根据形参对应的位置进行实参传递</p><p><strong>关键字实参</strong>：根据形参名称进行实参传递</p><p><em><strong>注</strong></em>：在函数调用过程中，进行参数的传递：</p><p>如果是不可变对象，在函数体内的修改，不会影响实参外部的值</p><p>如果是可变对象，在函数体内的修改，会影响实参外部的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;arg1：&#39;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;arg2：&#39;</span><span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>
    arg1 <span class="token operator">=</span> <span class="token number">100</span>
    arg2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;arg1：&#39;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;arg2：&#39;</span><span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>

n1 <span class="token operator">=</span> <span class="token number">11</span>
n2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;n1：&#39;</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>  <span class="token comment"># n1： 11</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;n2：&#39;</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>  <span class="token comment"># n2： [22, 33, 44]</span>
fun<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;n1：&#39;</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>  <span class="token comment"># n1： 11</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;n2：&#39;</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>  <span class="token comment"># n2： [22, 33, 44, 10]</span>

<span class="token comment"># 在函数调用过程中，进行参数的传递：</span>
<span class="token comment"># 如果是不可变对象，在函数体内的修改，不会影响实参的值。n1 是不可变对象，arg1 修改为 100，不会影响 n1 的值</span>
<span class="token comment"># 如果是可变对象，在函数体内的修改，会影响实参的值。n2 是可变对象，arg2 的修改，会影响 n2 的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的返回值" tabindex="-1"><a class="header-anchor" href="#函数的返回值" aria-hidden="true">#</a> 函数的返回值</h2><p><em><strong>1&gt;</strong></em> 如果函数没有返回值（函数执行完毕后，不需要给调用处提供数据），<code>return</code> 可以省略不写</p><p><em><strong>2&gt;</strong></em> 如果函数有返回值，但是没有定义变量接收，程序不会报错，但是无法获得返回结果</p><p><em><strong>3&gt;</strong></em> 函数的返回值如果是 1 个，直接返回原类型</p><p><em><strong>4&gt;</strong></em> 函数的返回值是多个时，可以以逗号隔开，返回结果为元组，括号可以省略。同时可以定义多个变量进行接收。如：<code>name, age = info()</code></p><p><em><strong>注</strong></em>：变量的数量一定要和函数返回值的数量一致，否则报错</p><p><em><strong>注</strong></em>：函数在定义时，是否需要返回值是视情况而定的</p><h2 id="函数的参数定义" tabindex="-1"><a class="header-anchor" href="#函数的参数定义" aria-hidden="true">#</a> 函数的参数定义</h2><h3 id="默认值形参" tabindex="-1"><a class="header-anchor" href="#默认值形参" aria-hidden="true">#</a> 默认值形参</h3><p>函数定义时，如果给形参设置了默认值，只有与默认值不符的时候才传递实参</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

fun<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>     <span class="token comment"># 100 10</span>
fun<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span>  <span class="token comment"># 45 34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：默认值形参又叫缺省参数，调用函数时，不传递实际参数时会默认调用缺省参数的默认值；传递参数就会使用传递的实际参数，而不会使用缺省参数的默认值</p><p><em><strong>1&gt;</strong></em> 缺省参数应当使用最常见的值作为默认值，简化函数的调用</p><p><em><strong>2&gt;</strong></em> 必须保证带有默认值的缺省参数在参数列表的末尾</p><p><em><strong>3&gt;</strong></em> 调用带有多个缺省参数的函数时，如果需要给缺省参数赋值，则需要指定参数名，确保解释器明白参数的对应关系</p><h3 id="个数可变的位置形参" tabindex="-1"><a class="header-anchor" href="#个数可变的位置形参" aria-hidden="true">#</a> 个数可变的位置形参</h3><p><em><strong>1&gt;</strong></em> 定义函数时，无法事先确定需要传递的位置实参的个数时，使用可变的位置形参</p><p><em><strong>2&gt;</strong></em> 使用 <code>*</code> 定义个数可变的位置形参，且同一个函数只能有一个</p><p><em><strong>3&gt;</strong></em> 结果为一个元组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>

fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># (1,)</span>
fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># (1, 2, 3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="个数可变的关键字形参" tabindex="-1"><a class="header-anchor" href="#个数可变的关键字形参" aria-hidden="true">#</a> 个数可变的关键字形参</h3><p><em><strong>1&gt;</strong></em> 定义函数时，无法事先确定需要传递的关键字实参的个数时，使用可变的关键字形参</p><p><em><strong>2&gt;</strong></em> 使用 <code>**</code> 定义个数可变的关键字形参，且同一个函数只能有一个</p><p><em><strong>3&gt;</strong></em> 结果为一个字典</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>

fun<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment"># {&#39;a&#39;: 2}</span>
fun<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># {&#39;a&#39;: 2, &#39;b&#39;: 4, &#39;c&#39;: 8}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：个数可变的位置形参和个数可变的关键字形参可以同时使用，且要求个数可变的位置形参要放在个数可变的关键字形参之前</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>

fun<span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span>             <span class="token comment"># (234, 35) {}</span>
fun<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">54</span><span class="token punctuation">)</span>    <span class="token comment"># () {&#39;a&#39;: 23, &#39;b&#39;: 45, &#39;c&#39;: 54}</span>
fun<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">79</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>  <span class="token comment"># (23, 42) {&#39;a&#39;: 79, &#39;b&#39;: 90}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拆包" tabindex="-1"><a class="header-anchor" href="#拆包" aria-hidden="true">#</a> 拆包</h3><p>在调用带有多值参数的函数时，如果希望将一个元组变量直接传递给 <code>args</code>，或者将一个字典变量直接传递给 <code>kwargs</code>，就可以使用拆包，简化参数的传递，拆包的方式是：</p><p>在元组变量前，增加一个 <code>*</code></p><p>在字典变量前，增加两个 <code>**</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>

num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span>
demo<span class="token punctuation">(</span>num<span class="token punctuation">,</span> xiaoming<span class="token punctuation">)</span>
<span class="token comment"># ((1, 2, 3), {&#39;name&#39;: &#39;小明&#39;, &#39;age&#39;: 23})</span>
<span class="token comment"># {}</span>
demo<span class="token punctuation">(</span><span class="token operator">*</span>num<span class="token punctuation">,</span> <span class="token operator">**</span>xiaoming<span class="token punctuation">)</span>
<span class="token comment"># (1, 2, 3)</span>
<span class="token comment"># {&#39;name&#39;: &#39;小明&#39;, &#39;age&#39;: 23}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数总结" tabindex="-1"><a class="header-anchor" href="#参数总结" aria-hidden="true">#</a> 参数总结</h3><table><thead><tr><th style="text-align:left;"><strong>参数的类型</strong></th><th style="text-align:left;"><strong>在函数定义中</strong></th><th style="text-align:left;"><strong>在函数调用中</strong></th><th style="text-align:left;"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:left;">位置实参</td><td style="text-align:left;"></td><td style="text-align:left;">√</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">将序列中的每个元素都转换为位置实参</td><td style="text-align:left;"></td><td style="text-align:left;">√</td><td style="text-align:left;">使用 <code>*</code></td></tr><tr><td style="text-align:left;">关键字实参</td><td style="text-align:left;"></td><td style="text-align:left;">√</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">将字典中的每个键值对都转换为关键字实参</td><td style="text-align:left;"></td><td style="text-align:left;">√</td><td style="text-align:left;">使用 <code>**</code></td></tr><tr><td style="text-align:left;">默认值形参</td><td style="text-align:left;">√</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">关键字形参</td><td style="text-align:left;">√</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">个数可变的位置形参</td><td style="text-align:left;">√</td><td style="text-align:left;"></td><td style="text-align:left;">使用 <code>*</code></td></tr><tr><td style="text-align:left;">个数可变的关键字形参</td><td style="text-align:left;">√</td><td style="text-align:left;"></td><td style="text-align:left;">使用 <code>**</code></td></tr></tbody></table><h2 id="变量的作用域" tabindex="-1"><a class="header-anchor" href="#变量的作用域" aria-hidden="true">#</a> 变量的作用域</h2><p>程序代码能访问该变量的区域</p><p><strong>根据变量的有效范围可分为</strong>：</p><p><strong>局部变量</strong>：在函数内定义并使用的变量，只在函数内部有效；局部变量在函数内使用 <code>global</code> 声明之后，这个变量就会成为全局变量</p><p><strong>全局变量</strong>：函数体外定义的变量，可作用于函数内外</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 局部变量</span>
<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># a 是局部变量，因为 a 是在函数体内定义的变量</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
fun<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># NameError: name &#39;a&#39; is not defined</span>

<span class="token comment"># 全局变量</span>
n <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>  <span class="token comment"># n 的作用范围为函数内部和外部都可以使用，称为全局变量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># global 声明将局部变量变为全局变量</span>
<span class="token keyword">def</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> age
    age <span class="token operator">=</span> <span class="token number">20</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
fun3<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：在函数内部使用<em><strong>赋值语句</strong></em>对传递的参数进行修改时，无论参数是不是可变类型，都不会改变参数外部的值</p><p>但是，如果在函数内部使用<em><strong>方法</strong></em>对传递的可变参数进行修改，则会影响参数外部的值</p><p><em><strong>注</strong></em>：在开发时，习惯把模块中的全局变量定义在函数上方，这样可以保证所有函数都能正常访问</p><p><em><strong>注</strong></em>：为了避免局部变量和全局变量出现混淆，在定义全局变量时，一般会在全局变量名称前增加 <code>g_</code> 或 <code>gl_</code> 的前缀</p><h2 id="递归函数" tabindex="-1"><a class="header-anchor" href="#递归函数" aria-hidden="true">#</a> 递归函数</h2><p>如果在一个函数的函数体内调用了该函数本身，这个函数就称为递归函数</p><p><strong>组成部分</strong>：递归的调用与递归终止的条件。需要终止条件作为递归的出口，否则会出现死循环</p><p><strong>递归的调用过程</strong>：</p><p><em><strong>1&gt;</strong></em> 每递归调用一次函数，都会在栈内存分配一个栈帧</p><p><em><strong>2&gt;</strong></em> 每执行完一次函数，都会释放相应的空间</p><p><strong>递归的优缺点</strong>：</p><p><strong>缺点</strong>：占用内存多，效率低下</p><p><strong>优点</strong>：思路清晰，代码简单</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 计算阶乘</span>
<span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n<span class="token operator">*</span>fac<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 720</span>

<span class="token comment"># 计算斐波那契数列</span>
<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> fib<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res

<span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> lambda 表达式</h2><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 <code>lambda</code> 表达式简化</p><p><strong>语法结构</strong>：<code>lambda 参数列表:表达式</code></p><p><code>lambda</code> 表达式的参数可有可无，函数的参数在 <code>lambda</code> 表达式中完全适用</p><p><code>lambda</code> 表达式能接收任何数量的参数，但只能返回一个表达式的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># lambda 的参数形式</span>
<span class="token comment"># 1.无参数</span>
fun1 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 100</span>

<span class="token comment"># 2.一个参数</span>
fun2 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">*</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fun2<span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># hello worldhello world</span>

<span class="token comment"># 3.默认参数/缺省参数</span>
fun3 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
<span class="token keyword">print</span><span class="token punctuation">(</span>fun3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 103</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fun3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>

<span class="token comment"># 4.可变参数：*args</span>
fun4 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> args
<span class="token keyword">print</span><span class="token punctuation">(</span>fun4<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment"># (11,)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fun4<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment"># (11, 22)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fun4<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># (11, 22, 33, 44, 55)</span>

<span class="token comment"># 5.可变参数：**kwargs</span>
fun5 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> kwargs
<span class="token keyword">print</span><span class="token punctuation">(</span>fun5<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># {&#39;name&#39;: &#39;Tom&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fun5<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># {&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 23}</span>


<span class="token comment"># lambda 表达式的应用</span>
<span class="token comment"># 带判断的 lambda</span>
fun <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token keyword">else</span> b
<span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 对列表数据排序</span>
students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Marry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token comment"># 1.按 name 对应的值升序排序</span>
students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>

<span class="token comment"># 2.按 name 对应的值降序排序</span>
students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>

<span class="token comment"># 3.按 age 对应的值升序排序</span>
students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h2><p>把函数作为参数传入，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式</p><h3 id="map-函数" tabindex="-1"><a class="header-anchor" href="#map-函数" aria-hidden="true">#</a> map() 函数</h3><p><code>map(func, lst)</code>：将传入的函数变量 <code>func</code> 作用到 <code>lst</code> 变量的每个元素中，并将结果组成新的迭代器返回</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 1.准备列表数据</span>
lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>

<span class="token comment"># 2.准备 2 次方计算的函数</span>
<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num <span class="token operator">**</span> <span class="token number">2</span>

<span class="token comment"># 3.调用 map() 函数</span>
result <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> lst<span class="token punctuation">)</span>

<span class="token comment"># 4.验收成果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment"># 生成的迭代器的内存地址 &lt;map object at 0x0000026425965AF0&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [1, 4, 9, 16, 25, 36, 49]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reduce-函数" tabindex="-1"><a class="header-anchor" href="#reduce-函数" aria-hidden="true">#</a> reduce() 函数</h3><p><code>reduce(func, lst)</code>：其中函数变量 <code>func</code> 必须要有两个参数，每次 <code>func</code> 计算的结果继续和列表的下一个元素做累计计算</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 1.导入模块</span>
<span class="token keyword">import</span> functools

lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

<span class="token comment"># 2.定义功能函数</span>
<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b

<span class="token comment"># 3.调用 reduce() 函数，作用：功能函数计算的结果和序列的下一个数据做累计计算</span>
result <span class="token operator">=</span> functools<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># -13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-函数" tabindex="-1"><a class="header-anchor" href="#filter-函数" aria-hidden="true">#</a> filter() 函数</h3><p><code>filter(func, lst)</code>：用来过滤序列，过滤掉不符合条件的元素，返回一个 filter 对象。如果要转换为列表，可以使用 <code>list()</code> 函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>

<span class="token comment"># 1.定义功能函数</span>
<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>

<span class="token comment"># 2.调用 filter() 函数</span>
result <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment"># 返回的 filter 对象的内存地址 &lt;filter object at 0x00000179691F5AF0&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [2, 4, 6, 8, 10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,88),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","11_函数.html.vue"]]);export{d as default};
