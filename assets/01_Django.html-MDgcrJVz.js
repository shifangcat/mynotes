import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-VKLC1A-x.js";const p="/mynotes/assets/Web-MVC框架-XVDTH7Rg.png",t="/mynotes/assets/Django-MVT框架-2G9JNaA8.png",o="/mynotes/assets/ORM框架-GabNCw1-.png",c="/mynotes/assets/关联操作-YME8DRay.png",i="/mynotes/assets/url配置-gBOrFqkn.png",l="/mynotes/assets/url匹配的过程-4b0w3oMZ.png",d={},u=e('<h1 id="django" tabindex="-1"><a class="header-anchor" href="#django" aria-hidden="true">#</a> Django</h1><h2 id="mvc框架" tabindex="-1"><a class="header-anchor" href="#mvc框架" aria-hidden="true">#</a> MVC框架</h2><ul><li><p><strong>MVC简介</strong></p><p>理念：分工；核心思想：解耦</p></li><li><p><strong>Web MVC框架</strong></p><p>M：model，模型，和数据库进行交互</p><p>V：view，视图，产生HTML页面</p><p>C：controller，控制器，接收处理请求，与M和V进行交互，返回应答</p><img src="'+p+'" style="zoom:30%;"></li></ul><h2 id="django框架" tabindex="-1"><a class="header-anchor" href="#django框架" aria-hidden="true">#</a> Django框架</h2><p>Django框架遵循MVC设计，并且有一个专有名词：MVT</p><ul><li><p><strong>MVT功能介绍</strong></p><p>M：model，模型，和MVC中的M功能相同，和数据库进行交互，处理数据</p><p>V：view，视图，和MVC中的C功能相同，接收处理请求，与M和T进行交互，返回应答</p><p>T：template，模板，和MVC中的V功能相同，构造产生HTML页面</p><img src="'+t+`" style="zoom:30%;"></li></ul><h2 id="虚拟环境" tabindex="-1"><a class="header-anchor" href="#虚拟环境" aria-hidden="true">#</a> 虚拟环境</h2><ul><li><p><strong>概念</strong></p><p>在同一个Python环境中安装同一个包的不同版本，后安装的会覆盖原有的，如果同一机器上的不同项目依赖的同一包的不同版本，则可能导致项目运行失败，解决方法就是使用虚拟环境</p><p>虚拟环境是真实Python环境的复制版本，在虚拟环境中使用的Python是复制的Python，安装Python包也是安装在复制的Python中</p></li><li><p><strong>安装和配置</strong></p><p>安装虚拟环境包：<code>sudo pip install virtualenv</code></p><p>安装虚拟环境扩展包：<code>sudo pip install virtualenvwrapper</code></p><p>编辑家目录下的<code>.bashrc</code>文件，添加下面两行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>source .bashrc</code>使其生效一下</p></li><li><p><strong>使用</strong></p><p>创建虚拟环境命令：<code>mkvirtualenv 虚拟环境名</code></p><p>创建Python3虚拟环境：<code>mkvirtualenv -p python3 虚拟环境名</code></p><p>进入虚拟环境工作：<code>workon 虚拟环境名</code></p><p>查看虚拟环境数量：<code>workon + 空格 + 两个tab键</code></p><p>退出虚拟环境：<code>deactivate</code></p><p>删除虚拟环境：<code>rmvirtualenv 虚拟环境名</code></p><p>虚拟环境下安装包：<code>pip install 包名</code>，不能使用<code>sudo pip install 包名</code>进行安装，这个命令会把包安装到真实的主机环境上，而不是安装到虚拟环境中</p><p>查看安装了哪些Python包：<code>pip list</code>、<code>pip freeze</code></p><p>安装Django环境：<code>pip install django==1.8.2</code>（1.8.2是版本号）</p></li></ul><h2 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建" aria-hidden="true">#</a> 项目创建</h2><ul><li><p><strong>创建Django项目</strong></p><p>命令：<code>django-admin startproject 项目名</code>，创建项目需要先进入虚拟环境</p><p>项目目录说明：<code>__init__.py</code>：说明项目是一个Python包</p><p><code>settings.py</code>：项目的配置文件</p><p><code>urls.py</code>：进行url路由的设置</p><p><code>wsgi.py</code>：Web服务器和Django交互的入口</p><p><code>manage.py</code>：项目的管理文件</p></li><li><p><strong>创建Django应用</strong></p><p>一个项目由很多个应用组成，每一个应用完成一个模块</p><p>创建应用的命令：<code>python manage.py startapp 应用名</code>，创建应用需要先进入项目目录</p><p>应用目录说明：<code>__init__.py</code>：说明目录是一个Python模块</p><p><code>models.py</code>：写数据库项目的内容，设计模型类</p><p><code>views.py</code>：接收处理请求，与M和T进行交互，返回应答，定义处理函数，视图函数</p><p><code>tests.py</code>：写测试代码的文件</p><p><code>admin.py</code>：网站后台管理相关的文件</p></li><li><p><strong>应用注册和项目启动</strong></p><p>建立应用和项目之间的联系，需要在<code>settings.py</code>中的<code>INSTALLED_APPS</code>里面增加应用名，对应用进行注册</p><p>启动项目Web服务器的命令：<code>python manage.py runserver</code></p></li></ul><h2 id="模型类" tabindex="-1"><a class="header-anchor" href="#模型类" aria-hidden="true">#</a> 模型类</h2><ul><li><p><strong>ORM</strong></p><p>Django中内嵌了ORM框架，ORM框架可以将类和数据表进行对应起来，只需要通过类和对象就可以对数据表进行操作</p><p>在Django中主要是设计类：模型类</p><p>ORM另外一个作用：根据设计的类生成数据库中的表</p><img src="`+o+`" style="zoom:30%;"></li><li><p><strong>模型类设计</strong></p><p>在应用的<code>models.py</code>中设计模型类，且模型类必须继承自<code>models.Model</code>类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;图书模型类&quot;&quot;&quot;</span>
    <span class="token comment"># 主键id会自动生成</span>
    <span class="token comment"># 图书名称，CharField说明是一个字符串，max_length指定字符串的最大长度</span>
    btitle <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token comment"># 出版日期，DateFiele说明是一个日期类型</span>
    bpub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hbook = models.ForeignKey(&#39;BookInfo&#39;)</code>可以建立两个模型类之间一对多的关系，Django在生成表的时候，就会在多端的表中创建一列作为外键，建立两个表之间一对多的关系，关系属性对应的字段名格式：<code>关系属性名_id</code></p></li><li><p><strong>模型类生成表</strong></p><p>生成迁移文件，命令：<code>python manage.py makemigrations</code>，迁移文件是根据模型类生成的</p><p>执行迁移生成表，命令：<code>python mange.py migrate</code>，根据迁移文件生成表，表名的默认格式：<code>应用名_模型类名小写</code></p></li><li><p><strong>通过模型类操作数据表</strong></p><p>进入项目shell的命令：<code>python manage.py shell</code></p><ul><li><p><em><strong>向booktest_bookinfo表中插入一条数据</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> booktest<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo  <span class="token comment"># 首先导入模型类</span>
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> date
b <span class="token operator">=</span> BookInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个BookInfo类的实例对象</span>
b<span class="token punctuation">.</span>btitle <span class="token operator">=</span><span class="token string">&#39;天龙八部&#39;</span>  <span class="token comment"># 定义b对象的属性并赋值</span>
b<span class="token punctuation">.</span>bpub_date <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用save()方法才会将数据保存进数据库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>查询数据</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b2 <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>修改数据</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b2<span class="token punctuation">.</span>bpub_date <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">1989</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span>
b2<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用save()方法才会更新表格中的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>删除数据</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用delete()方法删除数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>向booktest_heroinfo表中插入一条关联数据</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>h <span class="token operator">=</span> HeroInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>
h<span class="token punctuation">.</span>hname <span class="token operator">=</span> <span class="token string">&#39;段誉&#39;</span>
h<span class="token punctuation">.</span>hgender <span class="token operator">=</span> <span class="token boolean">False</span>
h<span class="token punctuation">.</span>hcomment <span class="token operator">=</span> <span class="token string">&#39;六脉神剑&#39;</span>
h<span class="token punctuation">.</span>hbook <span class="token operator">=</span> b  <span class="token comment"># 给关系属性赋值，英雄对象所属的图书对象</span>
h<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>查询表中所有内容</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
HeroInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>关联操作</strong></p><img src="`+c+`" style="zoom:30%;"><ul><li><p><em><strong>查询id为2的图书中所有英雄人物的信息</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>heroinfo_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询出b图书中所有英雄人物的信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="后台管理" tabindex="-1"><a class="header-anchor" href="#后台管理" aria-hidden="true">#</a> 后台管理</h2><ul><li><p><strong>本地化</strong></p><p>通过修改<code>settings.py</code>文件，实现语言和时间的本地化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">&#39;zh-hans&#39;</span>  <span class="token comment"># 使用中文</span>
TIME_ZONE <span class="token operator">=</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>  <span class="token comment"># 中国时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建管理员</strong></p><p>创建命令：<code>python manage.py createsuperuser</code></p><p>创建后通过<code>http://127.0.0.1:8000/admin/</code>，即可登录管理后台</p></li><li><p><strong>注册模型类</strong></p><p>在应用下的<code>admin.py</code>文件中注册模型类，告诉Django框架根据注册的模型类来生成对应表管理页面</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>BookInfo<span class="token punctuation">)</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>HeroInfo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>自定义模型管理类</strong></p><p>在<code>admin.py</code>文件中自定义模型管理类，即告诉Django在生成的管理页面上显示哪些内容，同时需要修改注册模型类，增加匹配相对应的模型管理类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BookInfoAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;btitle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bpub_date&#39;</span><span class="token punctuation">]</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>BookInfo<span class="token punctuation">,</span> BookInfoAdmin<span class="token punctuation">)</span>  <span class="token comment"># 修改注册模型类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h2><ul><li><p><strong>定义视图函数</strong></p><p>在<code>views.py</code>文件中定义视图函数，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 进行处理，和M、T进行交互</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">&#39;欢迎访问...&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图函数必须有一个参数request，进行处理之后，需要返回一个HttpResponse的类对象，类对象的参数“欢迎访问...”就是返回给浏览器显示的内容</p></li><li><p><strong>进行url配置</strong></p><p>url配置的目的是建立url和视图函数的对应关系，url配置项定义在urlpatterns的列表中，每一个配置项都调用url函数</p><p>url函数有两个参数，第一个是正则表达式，第二个是对应的处理动作</p><p>配置url时，有两种语法格式：</p><p>1&gt; <code>url(正则表达式, 视图函数)</code></p><p>2&gt; <code>url(正则表达式, include(应用中的urls文件))</code></p><p>实际开发中，在项目的urls.py文件中添加配置项时，并不写具体的url和视图函数之间的对应关系，而是使用语法格式2书写包含具体应用中的urls.py文件（需要手动新建，且列表名需为<code>urlpatterns</code>），在应用中的urls.py文件中使用语法格式1书写具体的url和视图函数的对应关系</p><p><em><strong>注</strong></em>：语法格式1中，正则表达式<code>()</code>分组中匹配到的内容，将作为参数传递给视图函数</p></li></ul><img src="`+i+'" style="zoom:67%;"><ul><li><p><strong>url匹配的过程</strong></p><p>项目的urls.py文件中包含具体应用的urls.py文件，应用的urls.py文件写具体的url和视图函数的对应关系</p><img src="'+l+`" style="zoom:67%;"></li></ul><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h2><ul><li><p><strong>模板文件的使用</strong></p><p>1&gt; 创建模板文件夹，一般为<code>templates</code></p><p>2&gt; 在项目中的<code>settings.py</code>文件中配置模板目录</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
    <span class="token comment"># 设置模板文件目录，通过绝对路径进行拼接</span>
    <span class="token string">&#39;DIRS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;templates&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3&gt; 使用模板文件</p><p>​ a) 加载模板文件：去模板目录下面获取html文件的内容，得到一个模板对象</p><p>​ b) 定义模板上下文：向模板文件中传递数据</p><p>​ c) 模板渲染：得到一个标准的html内容</p><p>​ d) 返回数据给浏览器</p></li><li><p><strong>给模板文件传递数据</strong></p><p>模板变量的使用：<code>{{ 模板变量名 }}</code></p><p>模板代码段：<code>{% 代码段 %}</code></p><p>for循环示例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% for i in list %}
	<span class="token comment">&lt;!-- list不为空时执行的逻辑 --&gt;</span>
{% empty %}
	<span class="token comment">&lt;!-- list为空时执行的逻辑 --&gt;</span>
{% endfor %}  <span class="token comment">&lt;!-- 结束for循环 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,20),r=[u];function m(k,g){return s(),a("div",null,r)}const b=n(d,[["render",m],["__file","01_Django.html.vue"]]);export{b as default};
