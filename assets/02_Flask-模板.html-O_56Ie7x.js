import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const e={},p=t(`<h1 id="flask-模板" tabindex="-1"><a class="header-anchor" href="#flask-模板" aria-hidden="true">#</a> Flask-模板</h1><h2 id="使用模板" tabindex="-1"><a class="header-anchor" href="#使用模板" aria-hidden="true">#</a> 使用模板</h2><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><p>在Flask中使用<code>render_template</code>进行模板渲染</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：在Flask中向模板中传递变量时，不能使用字典，而是要使用 <code>变量名=值</code> 的方式；如需使用字典，需要使用 <code>**dict</code> 的方式进行解包</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>Flask中，在模板中使用变量的方式和Django相同，都是采用 <code>{{ 变量名 }}</code> 的方式</p><p>对于字典，可以使用 <code>{{ my_dict[&#39;key&#39;] }}</code> 或者 <code>{{ my_dict.key }}</code> 的方式获取值</p><p>对于列表，可以使用 <code>{{ my_list[index] }}</code> 的方式获取值</p><p>同时，在模板中可以直接进行运算和字符串的拼接</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
        <span class="token string">&#39;my_dict&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;beijing&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;my_list&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;my_int&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的模板内容为：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>name = {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 直接获取变量 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>age = {{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>my_dict: city = {{ my_dict }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>my_dict: city = {{ my_dict[&#39;city&#39;] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 获取字典对应键的值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>my_dict: city = {{ my_dict.city }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 获取字典对应键的值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>my_list: {{ my_list }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>my_list[{{ my_int }}]: {{ my_list[my_int] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 获取列表对应索引的值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>my_list[0] + my_list[1] = {{ my_list[0] + my_list[1] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 进行运算 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ &#39;hel&#39; + &#39;lo world&#39; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 字符串拼接 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><p>Flask中的过滤器使用方式如下，同时还支持链式使用：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>a{{ &#39;   flask world   &#39;|trim }}a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>a{{ &#39;   flask world   &#39;|trim|upper }}a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 链式使用 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串过滤器" tabindex="-1"><a class="header-anchor" href="#字符串过滤器" aria-hidden="true">#</a> 字符串过滤器</h3><p><em><strong>1&gt;</strong></em> <code>safe</code>：禁用转义</p><p><em><strong>2&gt;</strong></em> <code>capitalize</code>：把变量值的首字母转成大写，其余字母转小写</p><p><em><strong>3&gt;</strong></em> <code>lower</code>：把值转成小写</p><p><em><strong>4&gt;</strong></em> <code>upper</code>：把值转成大写</p><p><em><strong>5&gt;</strong></em> <code>title</code>：把值中的每个单词的首字母都转成大写</p><p><em><strong>6&gt;</strong></em> <code>trim</code>：把值的首尾空格去掉</p><p><em><strong>7&gt;</strong></em> <code>reverse</code>：字符串反转，<code>&lt;p&gt;{{ &#39;olleh&#39; | reverse }}&lt;/p&gt;</code></p><p><em><strong>8&gt;</strong></em> <code>format</code>：格式化输出，<code>&lt;p&gt;{{ &#39;%s is %d&#39; | format(&#39;name&#39;, 17) }}&lt;/p&gt;</code></p><p><em><strong>9&gt;</strong></em> <code>striptags</code>：渲染之前把值中所有的HTML标签都删掉</p><h3 id="列表过滤器" tabindex="-1"><a class="header-anchor" href="#列表过滤器" aria-hidden="true">#</a> 列表过滤器</h3><p><em><strong>1&gt;</strong></em> <code>first</code>：取第一个元素</p><p><em><strong>2&gt;</strong></em> <code>last</code>：取最后一个元素</p><p><em><strong>3&gt;</strong></em> <code>length</code>：获取列表长度</p><p><em><strong>4&gt;</strong></em> <code>sum</code>：列表求和</p><p><em><strong>5&gt;</strong></em> <code>sort</code>：列表排序</p><h3 id="自定义过滤器" tabindex="-1"><a class="header-anchor" href="#自定义过滤器" aria-hidden="true">#</a> 自定义过滤器</h3><p>自定义的过滤器名称如果和内置的过滤器重名，会覆盖内置的过滤器</p><ul><li><p><strong>方法一</strong>：使用函数：<code>app.add_template_filter(过滤器函数名, 模板中使用的过滤器名字)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">list_step_2</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment"># 注册过滤器，将自定义的过滤器添加到应用中</span>
app<span class="token punctuation">.</span>add_template_filter<span class="token punctuation">(</span>list_step_2<span class="token punctuation">,</span> <span class="token string">&#39;li2&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>方法二</strong>：使用装饰器：<code>app.template_filter(模板中使用的装饰器名字)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>template_filter</span><span class="token punctuation">(</span><span class="token string">&#39;li3&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">list_step_3</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用自定义的过滤器</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ my_list|li2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ my_list|li3 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="表单" tabindex="-1"><a class="header-anchor" href="#表单" aria-hidden="true">#</a> 表单</h2><p>在 Flask 中，为了处理表单，一般会使用 Flask-WTF 扩展，它封装了 WTForms，并且它有验证表单数据、快速定义表单模板、进行 <code>CSRF</code> 验证的功能</p><p>使用 Flask-WTF 需要配置参数 <code>SECRET_KEY</code></p><p><code>CSRF_ENABLED</code> 是为了 <code>CSRF</code>（跨站请求伪造）保护，<code>SECRET_KEY</code> 用来生成加密令牌，当 <code>CSRF</code> 激活的时候，该设置会根据设置的密匙生成加密令牌</p><p><strong>安装</strong>：<code>pip install Flask-WTF</code></p><h3 id="wtforms支持的html标准字段" tabindex="-1"><a class="header-anchor" href="#wtforms支持的html标准字段" aria-hidden="true">#</a> WTForms支持的HTML标准字段</h3><table><thead><tr><th style="text-align:left;"><strong>字段对象</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">StringField</td><td style="text-align:left;">文本字段</td></tr><tr><td style="text-align:left;">TextAreaField</td><td style="text-align:left;">多行文本字段</td></tr><tr><td style="text-align:left;">PasswordField</td><td style="text-align:left;">密码文本字段</td></tr><tr><td style="text-align:left;">HiddenField</td><td style="text-align:left;">隐藏文本字段</td></tr><tr><td style="text-align:left;">DateField</td><td style="text-align:left;">文本字段，值为datetime.date格式</td></tr><tr><td style="text-align:left;">DateTimeField</td><td style="text-align:left;">文本字段，值为datetime.datetime格式</td></tr><tr><td style="text-align:left;">IntegerField</td><td style="text-align:left;">文本字段，值为整数</td></tr><tr><td style="text-align:left;">DecimalField</td><td style="text-align:left;">文本字段，值为decimal.Decimal</td></tr><tr><td style="text-align:left;">FloatField</td><td style="text-align:left;">文本字段，值为浮点数</td></tr><tr><td style="text-align:left;">BooleanField</td><td style="text-align:left;">复选框，值为True和False</td></tr><tr><td style="text-align:left;">RadioField</td><td style="text-align:left;">一组单选框</td></tr><tr><td style="text-align:left;">SelectField</td><td style="text-align:left;">下拉列表</td></tr><tr><td style="text-align:left;">SelectMultipleField</td><td style="text-align:left;">下拉列表，可选择多个值</td></tr><tr><td style="text-align:left;">FileField</td><td style="text-align:left;">文本上传字段</td></tr><tr><td style="text-align:left;">SubmitField</td><td style="text-align:left;">表单提交按钮</td></tr><tr><td style="text-align:left;">FormField</td><td style="text-align:left;">把表单作为字段嵌入另一个表单</td></tr><tr><td style="text-align:left;">FieldList</td><td style="text-align:left;">一组指定类型的字段</td></tr></tbody></table><h3 id="wtforms常用的验证函数" tabindex="-1"><a class="header-anchor" href="#wtforms常用的验证函数" aria-hidden="true">#</a> WTForms常用的验证函数</h3><table><thead><tr><th style="text-align:left;"><strong>验证函数</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">DataRequired</td><td style="text-align:left;">确保字段中有数据</td></tr><tr><td style="text-align:left;">EqualTo</td><td style="text-align:left;">比较两个字段的值，常用于比较两次密码输入</td></tr><tr><td style="text-align:left;">Length</td><td style="text-align:left;">验证输入的字符串长度</td></tr><tr><td style="text-align:left;">NumberRange</td><td style="text-align:left;">验证输入的值在数字范围内</td></tr><tr><td style="text-align:left;">URL</td><td style="text-align:left;">验证URL</td></tr><tr><td style="text-align:left;">AnyOf</td><td style="text-align:left;">验证输入值在可选列表中</td></tr><tr><td style="text-align:left;">NoneOf</td><td style="text-align:left;">验证输入值不在可选列表中</td></tr></tbody></table><h3 id="表单的实际使用" tabindex="-1"><a class="header-anchor" href="#表单的实际使用" aria-hidden="true">#</a> 表单的实际使用</h3><p>视图函数如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> session
<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm
<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> PasswordField<span class="token punctuation">,</span> SubmitField
<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequired<span class="token punctuation">,</span> EqualTo

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment"># 添加SECRET_KEY</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SECRET_KEY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aldksf98asd76&#39;</span>

<span class="token comment"># 定义表单的模型类</span>
<span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># label：说明文字；validators：验证器，列表</span>
    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token string">&#39;用户名不能为空&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token string">&#39;密码不能为空&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    password2 <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;确认密码&#39;</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token string">&#39;确认密码不能为空&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> EqualTo<span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;两次密码不一致&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;提交&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/register&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建表单模型类的对象，</span>
    <span class="token comment"># 如果是post请求，前端发送的数据，flask会在构造form对象的时候，将数据自动存放到form对象中</span>
    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 判断form中的数据是否合理，数据全部合理则返回True，否则返回False</span>
    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 表示验证合格，提取数据</span>
        uname <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data
        pwd <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data
        pwd2 <span class="token operator">=</span> form<span class="token punctuation">.</span>password2<span class="token punctuation">.</span>data
        <span class="token keyword">print</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> pwd<span class="token punctuation">,</span> pwd2<span class="token punctuation">)</span>
        session<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> uname
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;register.html&#39;</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello %s&#39;</span> <span class="token operator">%</span> username

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ form.csrf_token }} <span class="token comment">&lt;!-- 设置csrf_token --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ form.username.label }}：{{ form.username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% for msg in form.username.errors %}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% endfor %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ form.password.label }}：{{ form.password }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% for msg in form.password.errors %}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% endfor %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ form.password2.label }}：{{ form.password2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% for msg in form.password2.errors %}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    {% endfor %}
    {{ form.submit }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句" aria-hidden="true">#</a> 控制语句</h2><h3 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句" aria-hidden="true">#</a> if语句</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% if %}
{% endif %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for语句" tabindex="-1"><a class="header-anchor" href="#for语句" aria-hidden="true">#</a> for语句</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% for item in samples %}
{% endfor %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="宏" tabindex="-1"><a class="header-anchor" href="#宏" aria-hidden="true">#</a> 宏</h2><p>类似于 Python 中的函数，宏的作用就是在模板中重复利用代码，避免代码冗余</p><h3 id="不带参数的宏" tabindex="-1"><a class="header-anchor" href="#不带参数的宏" aria-hidden="true">#</a> 不带参数的宏</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 定义宏 --&gt;</span>
{% macro input() %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>30<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
{% endmacro %}

<span class="token comment">&lt;!-- 使用宏 --&gt;</span>
{{ input() }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带参数的宏" tabindex="-1"><a class="header-anchor" href="#带参数的宏" aria-hidden="true">#</a> 带参数的宏</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 定义宏 --&gt;</span>
{% macro input2(type, size, value=&#39;abc&#39;) %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ type }}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ value }}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ size }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
{% endmacro %}

<span class="token comment">&lt;!-- 使用宏 --&gt;</span>
{{ input2(&#39;password&#39;, 50) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将宏封装在html文件中" tabindex="-1"><a class="header-anchor" href="#将宏封装在html文件中" aria-hidden="true">#</a> 将宏封装在HTML文件中</h3><p>创建一个 HTML 文件 <code>macro_input.html</code>，里面可以只存放宏</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% macro input3(type, size, value=&#39;abc&#39;) %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ type }}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ value }}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ size }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
{% endmacro %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从其他 HTML 文件中导入并使用宏</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% import &#39;macro_input.html&#39; as m_input %}
{{ m_input.input3(&#39;text&#39;, 20) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板的继承和包含" tabindex="-1"><a class="header-anchor" href="#模板的继承和包含" aria-hidden="true">#</a> 模板的继承和包含</h2><h3 id="模板继承" tabindex="-1"><a class="header-anchor" href="#模板继承" aria-hidden="true">#</a> 模板继承</h3><p>Flask 中模板的继承和 Django 中是相同的。父模板中可以通过 <code>{% block top %}{% endblock top %}</code> 在模板中预留位置；子模板可以使用 <code>extends</code> 指令调用父模板，同时可以使用 <code>super()</code> 使用父模板中的内容</p><p>父模板：base.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% block top %}
{% endblock top %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>子模板：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% extends &#39;base.html&#39; %}
{% block top %}
需要填充的内容
{% endblock top %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板包含" tabindex="-1"><a class="header-anchor" href="#模板包含" aria-hidden="true">#</a> 模板包含</h3><p>模板包含的作用是将另一个模板整个加载到当前模板中，并直接渲染，使用如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{\\% include &#39;hello.html&#39; %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：包含在使用时，如果包含的模板文件不存在时，程序会抛出 <code>TemplateNotFound</code> 异常，可以加上 <code>ignore missing</code> 关键字，如果包含的模板文件不存在，会忽略这条 <code>include</code> 语句，示例如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{\\% include &#39;hello.html&#39; ignore missing %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="flask模板中的特殊变量和方法" tabindex="-1"><a class="header-anchor" href="#flask模板中的特殊变量和方法" aria-hidden="true">#</a> Flask模板中的特殊变量和方法</h2><p>在 Flask 中，有一些特殊的变量和方法是可以在模板文件中直接访问的</p><h3 id="config对象" tabindex="-1"><a class="header-anchor" href="#config对象" aria-hidden="true">#</a> config对象</h3><p><code>config</code> 对象就是 Flask 的 <code>config</code> 对象，也就是 <code>app.config</code> 对象，可以在模板中直接访问</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ config.SQLALCHEMY_DATABASE_URI }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="request对象" tabindex="-1"><a class="header-anchor" href="#request对象" aria-hidden="true">#</a> request对象</h3><p>就是 Flask 中表示当前请求的 <code>request</code> 对象，<code>request</code> 对象中保存了一次 HTTP 请求的一切信息</p><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th><th><strong>类型</strong></th></tr></thead><tbody><tr><td>data</td><td>记录请求体中的数据，并转换为字符串</td><td>*</td></tr><tr><td>form</td><td>记录请求中的表单数据</td><td>MultiDict</td></tr><tr><td>args</td><td>记录请求中的查询参数</td><td>MultiDict</td></tr><tr><td>cookies</td><td>记录请求中的cookie信息</td><td>Dict</td></tr><tr><td>headers</td><td>记录请求中的报文头</td><td>EnvironHeaders</td></tr><tr><td>method</td><td>记录请求使用的HTTP方法</td><td>GET/POST</td></tr><tr><td>url</td><td>记录请求的URL地址</td><td>string</td></tr><tr><td>files</td><td>记录请求上传的文件</td><td>*</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ request.url }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="url-for-方法" tabindex="-1"><a class="header-anchor" href="#url-for-方法" aria-hidden="true">#</a> url_for()方法</h3><p><code>url_for()</code> 会返回传入的路由函数对应的 URL，所谓路由函数就是被 <code>app.route()</code> 路由装饰器装饰的函数。如果定义的路由函数是带有参数的，则可以将这些参数作为命名参数传入</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{{ url_for(&#39;index&#39;) }}
{{ url_for(&#39;post&#39;, post_id=1024) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-flashed-messages-方法" tabindex="-1"><a class="header-anchor" href="#get-flashed-messages-方法" aria-hidden="true">#</a> get_flashed_messages()方法</h3><p>返回之前在 Flask 中通过 <code>flash()</code> 传入的信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 <code>get_flashed_messages()</code> 方法取出</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{% for message in get_flashed_messages() %}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{% endfor %}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图函数内容如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> render_template

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token comment"># flash是存储在session中的，所以需要设置SECRET_KEY</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SECRET_KEY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;alkdd9a8s6d9898ad&#39;</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> flag
    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>
        flash<span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 添加闪现信息</span>
        flag <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;flash.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,95),l=[p];function o(c,i){return s(),a("div",null,l)}const r=n(e,[["render",o],["__file","02_Flask-模板.html.vue"]]);export{r as default};
