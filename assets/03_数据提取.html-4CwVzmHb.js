import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const e={},o=t(`<h1 id="数据提取" tabindex="-1"><a class="header-anchor" href="#数据提取" aria-hidden="true">#</a> 数据提取</h1><h2 id="xpath" tabindex="-1"><a class="header-anchor" href="#xpath" aria-hidden="true">#</a> XPath</h2><p>XPath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历</p><ul><li><p><strong>XPath开发工具</strong></p><p>Chrome插件：XPath Helper</p><p>Firefox插件：Try XPath</p></li><li><p><strong>XPath语法</strong></p><ul><li><p><em><strong>获取节点</strong></em></p><p>XPath使用路径表达式来获取XML文档中的节点或者节点集</p><table><thead><tr><th><strong>表达式</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>nodename</td><td>获取根元素中的此节点</td><td>html</td><td>获取根元素中的html节点</td></tr><tr><td>/</td><td>获取直接子节点</td><td>/div</td><td>获取根元素中直接的div子节点</td></tr><tr><td>//</td><td>获取所有子孙节点</td><td>//div</td><td>获取页面中所有的div节点</td></tr><tr><td>@</td><td>获取具有某个属性的节点</td><td>//div[@id]</td><td>获取页面中所有具有id属性的div节点</td></tr><tr><td>.</td><td>当前节点</td><td>.//a</td><td>获取当前节点下所有的a标签</td></tr></tbody></table></li><li><p><em><strong>谓词</strong></em></p><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中</p><table><thead><tr><th><strong>路径表达式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>//body/div[1]</td><td>获取body中直接的div子节点中的第一个</td></tr><tr><td>//body/div[last()]</td><td>获取body中直接的div子节点中的最后一个</td></tr><tr><td>//body/div[position()&lt;=3]</td><td>获取body中直接的div子节点中的前三个</td></tr><tr><td>//div[@class=&quot;list_item_top&quot;]</td><td>获取所有class属性为list_item_top的div节点</td></tr><tr><td>//div[contains(@class,&quot;modal&quot;)]</td><td>获取所有class属性中包含modal的div节点</td></tr></tbody></table></li><li><p><em><strong>通配符</strong></em></p><table><thead><tr><th><strong>通配符</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>*</td><td>匹配任意节点</td><td>//body/*</td><td>获取body的所有直接子节点</td></tr><tr><td>@*</td><td>匹配节点的任意属性</td><td>//div[@*]</td><td>获取所有拥有属性的div节点</td></tr></tbody></table></li><li><p><em><strong>获取多个路径</strong></em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//input[@id=&quot;serverTime&quot;] | //div[@id=&quot;content-container&quot;]
# 获取所有id为serverTime的input节点和所有id为content-container的div节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>运算符</strong></em></p><p><code>|</code>（计算两个节点集）、<code>+</code>、<code>-</code>、<code>*</code>、<code>div</code>（除）</p><p><code>=</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code></p><p><code>or</code>、<code>and</code>、<code>mod</code>（取余）</p></li></ul></li></ul><h2 id="lxml库" tabindex="-1"><a class="header-anchor" href="#lxml库" aria-hidden="true">#</a> lxml库</h2><p>lxml是一个HTML/XML的解析器，可以使用XPath语法快速解析和提取HTML/XML数据</p><p>安装：<code>pip install lxml</code></p><p>lxml官方文档：http://lxml.de/index.html</p><ul><li><p><strong>lxml使用</strong></p><ul><li><p><em><strong>解析HTML代码</strong></em></p><p>使用<code>lxml</code>中的<code>etree</code>库解析<code>HTML</code>代码，会自动补上<code>html</code>和<code>body</code>标签</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
text <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;&lt;div&gt;这是一段HTML代码&lt;/div&gt;&quot;&quot;&quot;</span>
html_element <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
html_str <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html_element<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>解析文件中的HTML代码</strong></em></p><p>文件中的<code>HTML</code>代码不规范时不会补全，并且会报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
html_element <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">&#39;lxml_test.html&#39;</span><span class="token punctuation">)</span>
html_str <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html_element<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>etree.parse</code>在解析代码时默认使用的<code>XML</code>的解析器，这会导致在解析一些不规范的<code>HTML</code>代码时会报错，为了避免这种情况，需要设置并指定解析器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
parser <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置HTML的解析器</span>
html_element <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">&#39;lxml_lagou_test.html&#39;</span><span class="token punctuation">,</span> parser<span class="token operator">=</span>parser<span class="token punctuation">)</span>
html_str <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html_element<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>在lxml中使用XPath语法</strong></p><p>使用<code>Element.xpath()</code>方法即可在<code>lxml</code>中使用<code>XPath</code>语法，且<code>xpath</code>函数返回的永远是一个列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
parser <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
html <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">&#39;lxml_lagou_test.html&#39;</span><span class="token punctuation">,</span> parser<span class="token operator">=</span>parser<span class="token punctuation">)</span>
li_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//li&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有li标签</span>
div_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//div[@class=&quot;ligt&quot;]&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有class值为ligt的div标签</span>
a_href_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//a/@href&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有a标签href属性的值</span>
title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//h3/text()&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取li中所有h3标签包裹的内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="beautifulsoup4库" tabindex="-1"><a class="header-anchor" href="#beautifulsoup4库" aria-hidden="true">#</a> BeautifulSoup4库</h2><p>Beautiful Soup和lxml一样，也是一个HTML/XML的解析器</p><p>lxml只会局部遍历，而Beautiful Soup是基于HTML DOM（Document Object Model）的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml</p><p>安装：<code>pip install bs4</code></p><p>中文文档：https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</p><ul><li><p><strong>解析工具对比</strong></p><table><thead><tr><th><strong>解析工具</strong></th><th><strong>解析速度</strong></th><th><strong>使用难度</strong></th></tr></thead><tbody><tr><td>BeautifulSoup</td><td>最慢</td><td>最简单</td></tr><tr><td>lxml</td><td>快</td><td>简单</td></tr><tr><td>正则</td><td>最快</td><td>最难</td></tr></tbody></table></li><li><p><strong>解析器</strong></p><p>Beautiful Soup支持的解析器有：Python标准库、lxml HTML解析器、lxml XML解析器、html5lib</p><p>推荐使用lxml作为解析器,因为效率更高</p><p>参考文档：https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#id9</p></li><li><p><strong>使用bs4</strong></p><p><code>bs4</code>只能解析字符串，不能从文件中读取内容进行解析</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token comment"># 使用格式：BeautifulSoup(需要解析的文本, 解析器)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>

lis <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有li标签，返回值是一个结果集（可以当成列表对待）</span>
li <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取第一个li标签，返回值是一个字符串</span>

<span class="token comment"># limit=2 表示在find_all时只获取前两个结果即可，以节约资源</span>
li <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 获取第2个li标签</span>

<span class="token comment"># class后面加下划线是为了和python的class关键字进行区分，其他不冲突的属性可以直接写</span>
divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">&#39;libr&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有class值为libr的div标签</span>
divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;libr&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment"># 和上面效果相同</span>

<span class="token comment"># 获取所有id为test、class为libr的div标签，使用attrs={}时，class不用防止冲突</span>
divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">&#39;libr&#39;</span><span class="token punctuation">)</span>
divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;libr&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 获取属性值</span>
href <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 通过下标的方式获取属性值</span>
href <span class="token operator">=</span> a<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 使用attrs属性获取属性值</span>

<span class="token comment"># 获取标签包裹的内容，string、strings、stripped_strings和get_text()</span>
li<span class="token punctuation">.</span>string  <span class="token comment"># 获取单个标签中包裹的文本内容，如果标签中有多行，会获取不到内容</span>
li<span class="token punctuation">.</span>strings  <span class="token comment"># 获取li标签里面所有被标签包裹的文本内容，包括子孙标签中包裹的内容，返回值是一个生成器</span>
li<span class="token punctuation">.</span>stripped_strings  <span class="token comment"># 获取li标签中所有被包裹的文本内容，相较于li.strings去除了换行符和空白内容，返回值是一个生成器</span>
li<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取li标签里面所有被标签包裹的文本内容，包括子孙标签中包裹的内容，返回值是字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>select()方法</strong></p><p><code>select()</code>方法可以使用CSS选择器的语法获取页面上的元素</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有li标签</span>
li <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 获取第2个li标签</span>
divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;.libr&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有class值为libr的div标签</span>
divs <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;div[class=&quot;libr&quot;]&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有class值为libr的div标签</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>常见的四种对象</strong></p><p><em><strong>1&gt;</strong></em> <code>Tag</code>：通俗点讲就是<code>HTML</code>中的一个个的标签，<code>BeautifulSoup</code>也继承自<code>Tag</code>类，它的<code>find</code>、<code>find_all</code>、<code>select</code>等方法也来自<code>Tag</code>，所以<code>Tag</code>类型的标签都可以使用这些方法</p><p><em><strong>2&gt;</strong></em> <code>NavigatableString</code>：继承自Python中的<code>str</code>，使用方法和Python中的<code>str</code>相同</p><p><em><strong>3&gt;</strong></em> <code>BeautifulSoup</code>：继承自<code>Tag</code>，用来生成<code>BeautifulSoup</code>树的，一些查找方法也是来自于<code>Tag</code></p><p><em><strong>4&gt;</strong></em> <code>Comment</code>：继承自<code>NavigatableString</code>。当标签中只包含注释且内容不换行时，可以使用<code>string</code>获取到注释的内容，注释的类型为<code>&lt;class &#39;bs4.element.Comment&#39;&gt;</code></p></li><li><p><strong>contents和children</strong></p><p>返回某个标签下的直接子元素，也包含被其包裹的文本内容和换行符</p><p><em><strong>区别</strong></em>：<code>contents</code>返回的是一个列表，<code>children</code>返回的是一个迭代器，但内容都是相同的，即：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>div.contents == list(div.children)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p><strong>使用格式</strong>：<code>re.match(正则表达式, 要匹配的字符串)</code>，如：<code>re.match(&#39;he&#39;, &#39;hello&#39;)</code></p><ul><li><p><strong>匹配单个字符</strong></p><p>点<code>.</code>：匹配任意单个字符，除了换行符<code>\\n</code></p><p>让<code>.</code>也可以匹配换行符，可以增加<code>re.DOTALL</code>或<code>re.S</code>参数，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;abc.*abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc\\nabc&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;abc.*abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;abc\\nabc&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\\d</code>：匹配任意单个数字</p><p><code>\\D</code>：匹配任意单个非数字，和<code>\\d</code>可以匹配的内容相反</p><p><code>\\s</code>：匹配单个空白字符（<code>\\n</code>、<code>\\t</code>、<code>\\r</code>、空格）</p><p><code>\\S</code>：和<code>\\s</code>可以匹配的内容相反</p><p><code>\\w</code>：匹配单个单词字符（a-z、A-Z、数字、下划线）</p><p><code>\\W</code>：和<code>\\w</code>可以匹配的内容相反</p><p><code>[]</code>：组合匹配，只要满足中括号中的任意一个字符，就匹配成功</p></li><li><p><strong>匹配多个字符</strong></p><p><code>*</code>：匹配0个、1个或者任意多个字符</p><p><code>+</code>：匹配1个或者任意多个字符</p><p><code>?</code>：匹配1个或者0个字符，要么有1个，要么没有</p><p><code>{m}</code>：匹配m个字符</p><p><code>{m,n}</code>：匹配m到n个字符</p><p><code>{,m}</code>：匹配0到m个字符</p><p><code>{m,}</code>：匹配m到无限多个字符</p></li><li><p><strong>开始和结束符</strong></p><p><code>^</code>（脱字号）：以...开头；在<code>[]</code>中表示取反</p><p><code>$</code>：以...结尾</p><p><code>|</code>：表示或者，匹配多个字符串</p></li><li><p><strong>贪婪模式和非贪婪模式</strong></p><p><em><strong>贪婪模式</strong></em>：尽可能多的匹配符合的字符</p><p><em><strong>非贪婪模式</strong></em>：尽可能少的匹配符合的字符</p><p>Python中默认为贪婪模式，可以通过在匹配多个字符的符号（<code>+</code>、<code>*</code>、<code>?</code>、<code>{m,n}</code>、<code>{,m}</code>、<code>{m,}</code>）后面添加一个<code>?</code>来设置为非贪婪模式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;\\d+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 默认为贪婪模式，匹配到了 123456</span>
res2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;\\d+?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置为非贪婪模式，只匹配到了一个 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>转义字符和原生字符串</strong></p><ul><li><p><em><strong>转义字符</strong></em></p><p>在正则表达式中，有些字符是具有特殊意义的，想要匹配这些字符，需要使用反斜杠<code>\\</code>进行转义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\$\\d+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;The price is $299.&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 匹配到 $299</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>原生字符串</strong></em></p><p>在Python和正则表达式中，<code>\\</code>都是用来做转义的，因此如果想要在普通的字符串中匹配出<code>\\</code>，就需要使用四个<code>\\</code>，比较麻烦。为了处理这个问题，可以在字符串前面加一个<code>r</code>，如：<code>r&#39;\\n&#39;</code>，表示字符串为原生字符串，这样的话，Python在处理时就不会将<code>\\</code>当成转义字符了，而是直接输出<code>\\n</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\\\\\c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\c&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 不使用原生字符r，则需要使用四个\\才能匹配到\\c</span>
res2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;\\\\c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\c&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 使用原生字符r，只需要使用两个\\即可匹配到\\c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>原理分析</strong></em>：</p><table><thead><tr><th><strong>在Python中</strong></th><th><strong>在正则表达式中</strong></th></tr></thead><tbody><tr><td><code>&#39;\\\\\\\\c&#39;</code> -&gt;会转义成-&gt; <code>&#39;\\\\c&#39;</code></td><td><code>&#39;\\\\c&#39;</code> -&gt;会转义成-&gt; <code>&#39;\\c&#39;</code></td></tr><tr><td><code>r&#39;\\\\c&#39;</code> -&gt;原生字符串不会转义-&gt; <code>&#39;\\\\c&#39;</code></td><td><code>&#39;\\\\c&#39;</code> -&gt;会转义成-&gt; <code>&#39;\\c&#39;</code></td></tr></tbody></table></li></ul></li><li><p><strong>分组和group</strong></p><p>在正则表达式中，可以使用圆括号<code>()</code>对匹配到的字符串进行分组，使用<code>(?P&lt;name&gt;)</code>可以对分组命名，使用<code>group()</code>方法可以获取到对应分组中的内容</p><p><em><strong>1&gt;</strong></em> <code>res.group()</code>和<code>res.group(0)</code>：两者是等价的，获取到的是整个满足条件的字符串</p><p><em><strong>2&gt;</strong></em> <code>res.groups()</code>：返回所有满足条件的子组组成的元组</p><p><em><strong>3&gt;</strong></em> <code>res.group(num)</code>：返回第<code>num</code>个子组；可以传入多个，返回一个元组</p><p><em><strong>4&gt;</strong></em> <code>res.group(name)</code>：返回名字为<code>name</code>的子组；可以传入多个，返回一个元组</p><p><em><strong>5&gt;</strong></em> <code>res.group(num,name)</code>：序号<code>num</code>和名字<code>name</code>可以同时传入，返回一个元组</p></li><li><p><strong>re模块中常用的函数</strong></p><p><em><strong>1&gt;</strong></em> <code>match()</code>：从开始的位置进行匹配，如果开始第一个字符没有匹配到，则直接匹配失败</p><p><em><strong>2&gt;</strong></em> <code>search()</code>：在字符串中匹配第一个满足条件的字符，且只会匹配第一个</p><p><em><strong>3&gt;</strong></em> <code>findall()</code>：找出所有满足条件的字符，返回的是一个列表</p><p><em><strong>4&gt;</strong></em> <code>sub()</code>：将匹配到的内容替换为指定的字符串，返回替换后的字符串。示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\$\\d+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;￥99&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># count指定替换的个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>5&gt;</strong></em> <code>split()</code>：将匹配到的内容作为分割线对字符串进行分割，返回分割后的字符串组成的列表。示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r&#39;\\$\\d+&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> maxsplit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># maxsplit指定最大分割次数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>6&gt;</strong></em> <code>compile()</code>：使用<code>compile()</code>函数可以对正则表达式进行编译，使用的时候可以直接拿来用，提高执行效率。如果需要换行或者添加注释，需要增加一个<code>re.VERBOSE</code>参数。示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>r <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">r&quot;&quot;&quot;
        \\$  # 对$符号进行转义
        \\d+  # 匹配$后面的数字
    &quot;&quot;&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span>  <span class="token comment"># 换行并且添加注释</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,18),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","03_数据提取.html.vue"]]);export{u as default};
