import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const p={},e=t(`<h1 id="flask-数据库" tabindex="-1"><a class="header-anchor" href="#flask-数据库" aria-hidden="true">#</a> Flask-数据库</h1><h2 id="数据库的使用" tabindex="-1"><a class="header-anchor" href="#数据库的使用" aria-hidden="true">#</a> 数据库的使用</h2><p>Flask本身不限定数据库的选择，可以选择SQL或NOSQL的任何一种，也可以选择更方便的SQLALchemy，类似于Django的ORM。SQLALchemy实际上是对数据库的抽象，让开发者不用直接和SQL语句打交道，而是通过Python对象来操作数据库，在舍弃一些性能开销的同时，换来的是开发效率的较大提升</p><p>SQLAlchemy是一个关系型数据库框架，它提供了高层的ORM和底层的原生数据库的操作</p><p>flask-sqlalchemy是一个简化了SQLAlchemy操作的flask扩展</p><p><strong>安装</strong>：<code>pip install flask-sqlalchemy</code></p><h3 id="sqlalchemy常用配置参数" tabindex="-1"><a class="header-anchor" href="#sqlalchemy常用配置参数" aria-hidden="true">#</a> SQLALchemy常用配置参数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 连接数据库的URL，格式为：&lt;数据库方式&gt;://&lt;用户名&gt;:&lt;密码&gt;@&lt;IP地址&gt;:&lt;端口号&gt;/&lt;数据库&gt;</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;mysql://root:mysql@127.0.0.1:3306/test&#39;</span>
<span class="token comment"># Python3中连接MySQL需要使用pymysql，连接格式如下：</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;mysql+pymysql://root:mysql@127.0.0.1:3306/db&#39;</span>

<span class="token comment"># 数据跟踪，数据库中的表格式修改后，模型类会跟着自动修改</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token comment"># 查询时显示原始SQL语句</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_ECHO&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token comment"># 每次请求结束后自动提交数据库中的改动，不推荐使用</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义模型类和生成表" tabindex="-1"><a class="header-anchor" href="#定义模型类和生成表" aria-hidden="true">#</a> 定义模型类和生成表</h3><ul><li><p><strong>常用的SQLAlchemy字段类型</strong></p><table><thead><tr><th><strong>类型名</strong></th><th><strong>python中类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Integer</td><td>int</td><td>普通整数，一般是32位</td></tr><tr><td>SmallInteger</td><td>int</td><td>取值范围小的整数，一般是16位</td></tr><tr><td>BigInteger</td><td>int或long</td><td>不限制精度的整数</td></tr><tr><td>Float</td><td>float</td><td>浮点数</td></tr><tr><td>Numeric</td><td>decimal.Decimal</td><td>普通整数，一般是32位</td></tr><tr><td>String</td><td>str</td><td>变长字符串</td></tr><tr><td>Text</td><td>str</td><td>变长字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td>Unicode</td><td>unicode</td><td>变长Unicode字符串</td></tr><tr><td>UnicodeText</td><td>unicode</td><td>变长Unicode字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td>Boolean</td><td>bool</td><td>布尔值</td></tr><tr><td>Date</td><td>datetime.date</td><td>时间</td></tr><tr><td>Time</td><td>datetime.datetime</td><td>日期和时间</td></tr><tr><td>LargeBinary</td><td>str</td><td>二进制文件</td></tr></tbody></table></li><li><p><strong>常用的SQLAlchemy列选项</strong></p><table><thead><tr><th><strong>选项名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>primary_key</td><td>如果为True，代表表的主键</td></tr><tr><td>unique</td><td>如果为True，代表这列不允许出现重复的值</td></tr><tr><td>index</td><td>如果为True，为这列创建索引，提高查询效率</td></tr><tr><td>nullable</td><td>如果为True，允许有空值，如果为False，不允许有空值</td></tr><tr><td>default</td><td>为这列定义默认值</td></tr></tbody></table></li><li><p><strong>常用的SQLAlchemy关系选项</strong></p><table><thead><tr><th><strong>选项名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>backref</td><td>在关系的另一模型中添加反向引用</td></tr><tr><td>primary join</td><td>明确指定两个模型之间使用的联结条件</td></tr><tr><td>uselist</td><td>如果为False，不使用列表，而使用标量值</td></tr><tr><td>order_by</td><td>指定关系中记录的排序方式</td></tr><tr><td>secondary</td><td>指定多对多中记录的排序方式</td></tr><tr><td>secondary join</td><td>在SQLAlchemy中无法自行决定时，指定多对多关系中的二级联结条件</td></tr></tbody></table></li></ul><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># SQLALchemy的配置参数，Python3中需要使用pymysql</span>
    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">&#39;mysql+pymysql://root:mysql@127.0.0.1:3306/db_flask&#39;</span>
    <span class="token comment"># 数据跟踪，数据库中的表格式修改后，模型类会跟着自动修改</span>
    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">True</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>Config<span class="token punctuation">)</span>
<span class="token comment"># 创建数据库SQLAlchemy的工具对象</span>
db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token comment"># 创建数据库模型类</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;tbl_users&#39;</span>  <span class="token comment"># 指定表名</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 整型的主键，默认会自动增长</span>
    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    role_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">&#39;tbl_roles.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 设置外键</span>
    
    <span class="token comment"># 定义显示信息，定义之后，查询时显示对象的时候更直观</span>
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;User object: name=%s&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name

<span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;tbl_roles&#39;</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    users <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 建立表之间的关系</span>
    
    <span class="token comment"># 定义显示信息，定义之后，查询时显示对象的时候更直观</span>
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Role object: name=%s&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除数据库中的所有数据</span>
    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建所有的表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加数据" tabindex="-1"><a class="header-anchor" href="#添加数据" aria-hidden="true">#</a> 添加数据</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 向数据库中添加数据</span>
role1 <span class="token operator">=</span> Role<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建对象</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>role1<span class="token punctuation">)</span>  <span class="token comment"># 用session记录对象任务，一次添加一条数据</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 提交任务到数据库中</span>

role2 <span class="token operator">=</span> Role<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;stuff&#39;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>role2<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>

user1 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;wang&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">&#39;wang@163.com&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> role_id<span class="token operator">=</span>role1<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
user2 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;zhang&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">&#39;zhang@189.com&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;201512&#39;</span><span class="token punctuation">,</span> role_id<span class="token operator">=</span>role2<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
user3 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;chen&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">&#39;chen@126.com&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;987654&#39;</span><span class="token punctuation">,</span> role_id<span class="token operator">=</span>role2<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
user4 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;zhou&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">&#39;zhou@163.com&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;456789&#39;</span><span class="token punctuation">,</span> role_id<span class="token operator">=</span>role1<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">,</span> user4<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 一次添加多条数据</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h3><ul><li><p><strong>常用的SQLAlchemy查询过滤器</strong></p><table><thead><tr><th><strong>过滤器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>filter()</td><td>把过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>filter_by()</td><td>把等值过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>limit</td><td>使用指定的值限定原查询返回的结果</td></tr><tr><td>offset()</td><td>偏移原查询返回的结果，返回一个新查询，相当于跳过几条</td></tr><tr><td>order_by()</td><td>根据指定条件对原查询结果进行排序，返回一个新查询</td></tr><tr><td>group_by()</td><td>根据指定条件对原查询结果进行分组，返回一个新查询</td></tr></tbody></table></li><li><p><strong>常用的SQLAlchemy查询执行器</strong></p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>all()</td><td>以列表形式返回查询的所有结果</td></tr><tr><td>first()</td><td>返回查询的第一个结果，如果未查到，返回None</td></tr><tr><td>first_or_404()</td><td>返回查询的第一个结果，如果未查到，返回404</td></tr><tr><td>get()</td><td>返回指定主键对应的行，如不存在，返回None</td></tr><tr><td>get_or_404()</td><td>返回指定主键对应的行，如不存在，返回404</td></tr><tr><td>count()</td><td>返回查询结果的数量</td></tr><tr><td>paginate()</td><td>返回一个Paginate对象，它包含指定范围内的结果</td></tr></tbody></table></li><li><p><strong>查询的使用</strong></p><p><code>Role.query.all()</code>：查询表中的所有数据，返回一个列表</p><p><code>Role.query.first()</code>：返回查询到的第一条数据</p><p><code>Role.query.get(2)</code>：返回指定主键对应的数据</p><p><code>db.session.query(Role).all()</code>：使用<code>session</code>进行查询，方法都相同</p><p><code>User.query.filter_by(name=&#39;wang&#39;).all()</code>：返回<code>name</code>是<code>wang</code>的结果</p><p><code>User.query.filter_by(name=&#39;wang&#39;, role_id=1).all()</code>：使用多个条件进行查询</p><p><code>User.query.filter(User.name==&#39;wang&#39;, User.role_id==1).all()</code>：使用<code>filter()</code>进行多个条件查询</p><p><code>User.query.filter().offset().limit().order_by().all()</code>：链式调用</p><p><code>User.query.offset(2).all()</code>：<code>offset()</code>相当于跳过几条数据</p><p><code>User.query.limit(2).all()</code>：<code>limit()</code>表示取出几条数据</p><p><code>User.query.order_by(User.id.desc()).all()</code>：通过<code>id</code>降序排列</p><p>或者条件进行查询：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> or_<span class="token punctuation">,</span> and_<span class="token punctuation">,</span> not_
li <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>or_<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token string">&#39;wang&#39;</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span>email<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># and_和not_的使用方法和or_相同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分组并统计数量：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> func
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">.</span>role_id<span class="token punctuation">,</span> func<span class="token punctuation">.</span>count<span class="token punctuation">(</span>User<span class="token punctuation">.</span>role_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>User<span class="token punctuation">.</span>role_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># query()中表示的是在结果中显示的内容</span>
<span class="token comment"># func.count()表示统计每组的数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>分页的使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查询数据</span>
user_query <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token comment"># 处理分页，page：当前显示的页数，per_page：每页显示的数量，error_out：自动的错误输出</span>
page_obj <span class="token operator">=</span> user_query<span class="token punctuation">.</span>paginate<span class="token punctuation">(</span>page<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> per_page<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> error_out<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token comment"># 获取当前页面数据，</span>
user_li <span class="token operator">=</span> page_obj<span class="token punctuation">.</span>items
<span class="token comment"># 获取总页数</span>
total_page <span class="token operator">=</span> page_obj<span class="token punctuation">.</span>pages
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="修改和删除数据" tabindex="-1"><a class="header-anchor" href="#修改和删除数据" aria-hidden="true">#</a> 修改和删除数据</h3><ul><li><p><strong>修改数据</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;python&#39;</span>
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span> 
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用update()修改数据</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;zhou&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;html@python.com&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>删除数据</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>user<span class="token punctuation">)</span> 
db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="数据库迁移" tabindex="-1"><a class="header-anchor" href="#数据库迁移" aria-hidden="true">#</a> 数据库迁移</h2><p>在开发过程中，需要修改数据库模型，而且还要在修改之后更新数据库。最直接的方式就是删除旧表，但这样会丢失数据。更好的解决办法是使用数据库迁移框架，它可以追踪数据库模式的变化，然后把变动应用到数据库中</p><p>在Flask中可以使用Flask-Migrate扩展来实现数据迁移，并且可以集成到Flask-Script中，所有操作通过命令就能完成</p><p>为了导出数据库迁移命令，Flask-Migrate提供了一个MigrateCommand类，可以附加到flask-script的manager对象上</p><p><strong>安装</strong>：<code>pip install flask-migrate</code></p><p><code>pip install Flask-Script</code></p><h3 id="文件代码" tabindex="-1"><a class="header-anchor" href="#文件代码" aria-hidden="true">#</a> 文件代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy
<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager
<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> Migrate<span class="token punctuation">,</span> MigrateCommand

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment"># 配置参数</span>
<span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">&#39;mysql+pymysql://root:mysql@127.0.0.1:3306/db_flask&#39;</span>
    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">True</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>Config<span class="token punctuation">)</span>
db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token comment"># 创建Flask脚本管理对象</span>
manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token comment"># 创建数据库迁移工具对象</span>
Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span> db<span class="token punctuation">)</span>

<span class="token comment"># 向manager对象中添加数据库的操作命令</span>
manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">&#39;db&#39;</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span>

<span class="token comment"># 定义数据库的模型类</span>
<span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;tbl_authors&#39;</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    books <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">&#39;Book&#39;</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&#39;tbl_books&#39;</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    author_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">&#39;tbl_authors.id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通过manager对象启动程序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迁移命令" tabindex="-1"><a class="header-anchor" href="#迁移命令" aria-hidden="true">#</a> 迁移命令</h3><p><em><strong>1&gt;</strong></em> 创建迁移仓库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 这个命令会自动创建migrations文件夹，所有迁移文件都放在里面
python database.py db init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 创建迁移脚本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># -m的作用是添加备注信息，可不写
python database.py db migrate -m &#39;this is a remark&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 更新数据库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python database.py db upgrade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>4&gt;</strong></em> 查看迁移记录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python database.py db history
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>5&gt;</strong></em> 回退数据库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python database.py db downgrade 版本号
python database.py db downgrade base  # 回退到最初的版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发送邮件" tabindex="-1"><a class="header-anchor" href="#发送邮件" aria-hidden="true">#</a> 发送邮件</h2><p><strong>安装</strong>：<code>pip install Flask-Mail</code></p><p>参考文档：http://www.pythondoc.com/flask-mail/</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask_mail <span class="token keyword">import</span> Mail<span class="token punctuation">,</span> Message

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment"># 添加邮件配置：服务器、端口、传输层安全协议、邮箱名、密码/授权码</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
    MAIL_SERVER<span class="token operator">=</span><span class="token string">&#39;smtp.qq.com&#39;</span><span class="token punctuation">,</span>
    MAIL_PROT<span class="token operator">=</span><span class="token number">465</span><span class="token punctuation">,</span>
    MAIL_USE_TLS<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    MAIL_USERNAME<span class="token operator">=</span><span class="token string">&#39;aaaa@qq.com&#39;</span><span class="token punctuation">,</span>
    MAIL_PASSWORD<span class="token operator">=</span><span class="token string">&#39;xxxxxxxxxx&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># 创建mail对象</span>
mail <span class="token operator">=</span> Mail<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># sender：发送方；recipients：接收方列表</span>
    msg <span class="token operator">=</span> Message<span class="token punctuation">(</span><span class="token string">&quot;This is a test &quot;</span><span class="token punctuation">,</span> sender<span class="token operator">=</span><span class="token string">&#39;aaaa@qq.com&#39;</span><span class="token punctuation">,</span> recipients<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bbbb@qq.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cccc@qq.com&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># 邮件正文内容</span>
    msg<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;Flask test mail&quot;</span>
    <span class="token comment"># 发送邮件</span>
    mail<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Send Succeed&quot;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","03_Flask-数据库.html.vue"]]);export{d as default};
