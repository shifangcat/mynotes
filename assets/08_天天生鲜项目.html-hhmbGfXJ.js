import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,b as n,d as s,e as t,f as a}from"./app-VKLC1A-x.js";const l="/mynotes/assets/Celery异步原理-5eC8_IVt.jpeg",u="/mynotes/assets/FastDFS上传文件过程-Zukjlv4O.png",r="/mynotes/assets/FastDFS下载文件过程-vIhZFHjO.png",d="/mynotes/assets/项目上传图片和使用图片流程-6kjr_Z74.png",k={},m=a(`<h1 id="天天生鲜项目" tabindex="-1"><a class="header-anchor" href="#天天生鲜项目" aria-hidden="true">#</a> 天天生鲜项目</h1><h2 id="项目分析" tabindex="-1"><a class="header-anchor" href="#项目分析" aria-hidden="true">#</a> 项目分析</h2><p>（详细内容参考课件中的项目分析和项目实现）</p><ul><li><p><strong>SKU与SPU</strong></p><ul><li><p><em><strong>SKU</strong></em></p><p>SKU（Stock Keeping Unit）是库存进出的计量单位，可以是件、盒、托盘等单位。SKU是物理上不可分割的最小存货单元，在使用时要根据不同业态、不同管理模式来处理</p><p>如：纺织品中一个SKU通常表示具体的规格、颜色、款式等</p></li><li><p><em><strong>SPU</strong></em></p><p>SPU（Standard Product Unit）是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个商品的通用特性。通俗点讲，具有相同属性、特性的商品就可以称为一个SPU</p><p>如：iphone7就是一个SPU，与颜色、款式、套餐都无关</p></li></ul></li></ul><h2 id="知识补充" tabindex="-1"><a class="header-anchor" href="#知识补充" aria-hidden="true">#</a> 知识补充</h2><ul><li><p><strong>choice选项</strong></p><p>Django模型类中编辑字段时增加<code>choice</code>选项可以限定该字段的取值范围</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>STATUS_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;下架&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;上架&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
status <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span>choices<span class="token operator">=</span>STATUS_CHOICES<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>富文本编辑器</strong></p><p>借助富文本编辑器，网站编辑人员能够像使用offfice一样编写出漂亮的、所见即所得的页面。此处以<code>tinymce</code>为例，其它富文本编辑器的使用也是类似的</p><ul><li><p><em><strong>配置</strong></em></p><p><em><strong>1&gt;</strong></em> 在虚拟环境中安装相应的包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install django-tinymce==2.6.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 在项目的<code>settings.py</code>文件中为<code>INSTALLED_APPS</code>添加编辑器应用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token string">&#39;tinymce&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 富文本编辑器</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 在项目的<code>settings.py</code>文件中增加如下编辑器配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>TINYMCE_DEFAULT_CONFIG <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;theme&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;advanced&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;width&#39;</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>4&gt;</strong></em> 在项目的<code>urls.py</code>文件中配置编辑器的<code>url</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^tinymce/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;tinymce.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>在admin中使用</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> tinymce<span class="token punctuation">.</span>models <span class="token keyword">import</span> HTMLField  <span class="token comment"># 在应用的models.py中导入</span>
detail <span class="token operator">=</span> HTMLField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">&#39;商品详情&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 在字段中使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用之后，在后台管理中编辑内容时即可使用富文本格式进行编辑</p></li><li><p><em><strong>自定义使用</strong></em></p><p><em><strong>1&gt;</strong></em> 在虚拟环境中找到<code>tinymce</code>的目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>D:\\virtualenv_file\\djangotest\\Lib\\site-packages\\tinymce\\static\\tiny_mce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 将目录下的<code>tiny_mce_src.js</code>文件、<code>langs</code>文件夹和<code>themes</code>文件夹复制到项目中的<code>static/js</code>目录下</p><p><em><strong>3&gt;</strong></em> 在模板中导入<code>tiny_mce_src.js</code>文件，并做如下编辑即可在页面中实现富文本编辑</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/static/js/tiny_mce_src.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    tinyMCE<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;mode&#39;</span><span class="token operator">:</span> <span class="token string">&#39;textareas&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;theme&#39;</span><span class="token operator">:</span> <span class="token string">&#39;advanced&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;width&#39;</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;height&#39;</span><span class="token operator">:</span> <span class="token number">100</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>gcontent<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>这是富文本编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>class Meta</strong></p><p>模型类中<code>class Meta</code>的设置内容及作用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
    db_table <span class="token operator">=</span> <span class="token string">&#39;df_goods_test&#39;</span>  <span class="token comment"># 设置数据库中的表名</span>
    verbose_name <span class="token operator">=</span> <span class="token string">&#39;商品&#39;</span>  <span class="token comment"># 设置后台管理中显示的表名：商品s</span>
    verbose_name_plural <span class="token operator">=</span> verbose_name  <span class="token comment"># 使后台管理中显示的表名中没有s</span>
    abstract <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 说明是一个抽象模型类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>用户认证模型</strong></p><p>在项目的<code>settings.py</code>文件中增加如下代码更改Django认证系统使用的用户模型，让Django使用自定义的用户模型，而不是自动生成的模型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">&#39;user.User&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：该配置需要在第一次迁移数据库之前配置，否则可能导致Django的认证系统工作不正常</p><p>同时，在自定义用户模型类时，需要继承<code>AbstractUser</code>类</p></li><li><p><strong>类视图</strong></p><p>将视图函数定义在类里面，<em><strong>作用</strong></em>：会根据不同的请求方式调用不同的处理方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> View  <span class="token comment"># 使用需要导入View基类</span>
<span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 类视图需要继承View基类</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>urls.py</code>配置时使用类视图的<code>as_view()</code>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^register$&#39;</span><span class="token punctuation">,</span> RegisterView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考资料：https://docs.djangoproject.com/zh-hans/4.0/topics/class-based-views/</p></li></ul><h2 id="用户注册" tabindex="-1"><a class="header-anchor" href="#用户注册" aria-hidden="true">#</a> 用户注册</h2>`,7),g=a(`<li><p><strong>itsdangerous加密</strong></p><p>安装：<code>pip install itsdangerous==0.24</code></p><p>使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer
ser <span class="token operator">=</span> Serializer<span class="token punctuation">(</span><span class="token string">&#39;mykey&#39;</span><span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>  <span class="token comment"># 创建实例对象，密钥为mykey，过期时间3600秒</span>
info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">1001</span><span class="token punctuation">}</span>
res <span class="token operator">=</span> ser<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>  <span class="token comment"># 对数据进行加密，转换后为bytes类型</span>
ser<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment"># 解密</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档：https://itsdangerous.palletsprojects.com/en/2.0.x/</p></li>`,1),v=n("p",null,[n("strong",null,"发送邮件")],-1),b=n("code",null,"django.core.mail",-1),h=n("code",null,"SMTP",-1),y={href:"http://help.163.com/09/1223/14/5R7P3QI100753VB8.html",target:"_blank",rel:"noopener noreferrer"},_={href:"http://www.126.com/help/client_04.htm",target:"_blank",rel:"noopener noreferrer"},q={href:"https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331",target:"_blank",rel:"noopener noreferrer"},f=a(`<p><em><strong>1&gt;</strong></em> 开启邮箱的<code>SMTP</code>服务，获取授权码</p><p><em><strong>2&gt;</strong></em> 在项目的<code>settings.py</code>文件中增加如下配置内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>EMAIL_BACKEND <span class="token operator">=</span> <span class="token string">&#39;django.core.mail.backends.smtp.EmailBackend&#39;</span>
EMAIL_HOST <span class="token operator">=</span> <span class="token string">&#39;smtp.qq.com&#39;</span>  <span class="token comment"># SMTP服务地址</span>
EMAIL_PORT <span class="token operator">=</span> <span class="token number">587</span>  <span class="token comment"># SMTP服务的端口号</span>
EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">&#39;email@qq.com&#39;</span>  <span class="token comment"># 发送邮件的邮箱</span>
EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">&#39;xxxxx&#39;</span>  <span class="token comment"># 在邮箱中获取的客户端授权密码</span>
EMAIL_FROM <span class="token operator">=</span> <span class="token string">&#39;Python&lt;email@qq.com&gt;&#39;</span>  <span class="token comment"># 收件人看到的发件人</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 正式使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mail  <span class="token comment"># 导入模块</span>
subject <span class="token operator">=</span> <span class="token string">&#39;邮件主题&#39;</span>  <span class="token comment"># 邮件主题</span>
message <span class="token operator">=</span> <span class="token string">&#39;邮件正文&#39;</span>  <span class="token comment"># 邮件正文</span>
sender <span class="token operator">=</span> <span class="token string">&#39;Python&lt;email@qq.com&gt;&#39;</span>  <span class="token comment"># 发件人</span>
receiver <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span>  <span class="token comment"># 收件人邮箱，列表，可添加多个</span>
html_message <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;HTML格式文本&lt;/h1&gt;&#39;</span>  <span class="token comment"># HTML格式文本</span>
send_mail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> message<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),w=a(`<h2 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> Celery</h2><p><strong>作用</strong>：实现任务的异步处理</p><p>安装：<code>pip install celery==4.1.1</code></p><ul><li><p><strong>代码实现</strong></p><p><em><strong>1&gt;</strong></em> 任务函数的定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery
<span class="token comment"># 创建一个Celery类的实例对象，并指定中间人broker</span>
app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;celery_tasks.tasks&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;redis://127.0.0.1:6379/8&#39;</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>  <span class="token comment"># 定义任务函数并使用实例对象的task方法进行装饰</span>
<span class="token keyword">def</span> <span class="token function">task_func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 调用任务函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> task_func
task_func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 发出任务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 在项目中使用需要在worker端进行Django环境的初始化（在创建Celery实例对象前进行）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> django
os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dailyfresh.settings&quot;</span><span class="token punctuation">)</span>
django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>运行</strong></p><p>Celery运行命令：<code>celery -A &lt;module&gt; worker -l 监测等级</code>，如：<code>celery -A celery_tasks.tasks worker -l info</code></p><p>使用此命令可以让任务处理者（worker）对任务队列（中间人broker）进行监听，当任务发出者发出任务到任务队列中时，任务处理者接收到任务并进行处理</p><img src="`+l+`" style="zoom:20%;"><p><em><strong>注</strong></em>：任务的发出者、中间人、任务的处理者可以在同一台电脑上，也可以不在同一台电脑上，不在同一台电脑上时，电脑之间需要能够互相通信</p></li><li><p><strong>遇到的问题</strong></p><ul><li><p><em><strong>问题一</strong></em>：AttributeError: async</p><p><em><strong>原因和解决方法</strong></em>：最初安装的Celery版本是4.1.0，需要升级到4.1.1</p><p>参考资料：https://blog.csdn.net/myli_binbin/article/details/88630131</p></li><li><p><em><strong>问题二</strong></em>：ValueError: not enough values to unpack</p><p><em><strong>解决方法</strong></em>：在创建Celery实例对象前增加如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;FORKED_BY_MULTIPROCESSING&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参考资料：https://github.com/celery/celery/issues/4081</p><p>方法2（未尝试）：https://blog.csdn.net/qq_30242609/article/details/79047660</p></li></ul></li></ul><h2 id="用户登录" tabindex="-1"><a class="header-anchor" href="#用户登录" aria-hidden="true">#</a> 用户登录</h2><ul><li><p><strong>登录校验</strong></p><p>使用Django自带的<code>authenticate()</code>和<code>login()</code>进行登录校验，<code>authenticate()</code>用于判断用户名和密码是否正确，<code>login()</code>用于在session中保存用户的信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
    password <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span>
    user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>
    <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 用户名和密码正确</span>
        login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span>  <span class="token comment"># 记录用户的登录状态</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 用户名或密码错误</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/auth/default/#how-to-log-a-user-in</p></li><li><p><strong>使用Redis存储session</strong></p><p><em><strong>1&gt;</strong></em> 安装<code>django-redis</code>的包：<code>pip install django-redis</code></p><p><em><strong>2&gt;</strong></em> 在项目的<code>settings.py</code>文件中增加如下的Django的缓存配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;default&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;BACKEND&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;django_redis.cache.RedisCache&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;LOCATION&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;redis://127.0.0.1:6379/9&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;CLIENT_CLASS&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;django_redis.client.DefaultClient&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 在项目的<code>settings.py</code>文件中增加如下的session存储的配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>SESSION_ENGINE <span class="token operator">=</span> <span class="token string">&quot;django.contrib.sessions.backends.cache&quot;</span>
SESSION_CACHE_ALIAS <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>4&gt;</strong></em> 设置完成后如平常一样运行Django项目即可，session会自动存储到Redis数据库中</p><p>参考文档：https://django-redis-chs.readthedocs.io/zh_CN/latest/</p></li></ul><h2 id="用户中心" tabindex="-1"><a class="header-anchor" href="#用户中心" aria-hidden="true">#</a> 用户中心</h2><ul><li><p><strong>login_required装饰器</strong></p><p><strong>作用</strong>：保证一些页面只有在用户登录之后才能访问</p><p><em><strong>1&gt;</strong></em> <em><strong>用户没有登录</strong></em>：会重定向到<code>settings.LOGIN_URL</code>页面，并传递绝对路径到查询字符串中。如：<code>/accounts/login/?next=/polls/3/</code></p><p>可以在项目的<code>settings.py</code>文件中增加<code>LOGIN_URL = &#39;/user/login&#39;</code>，来配置登录的url地址用于没有登录时的重定向</p><p><em><strong>2&gt;</strong></em> <em><strong>用户已经登录</strong></em>：正常执行视图</p><ul><li><p><em><strong>代码实现</strong></em></p><p>在配置url时，用<code>login_required</code>装饰器进行装饰</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required
url<span class="token punctuation">(</span><span class="token string">r&#39;^order$&#39;</span><span class="token punctuation">,</span> login_required<span class="token punctuation">(</span>UserOrderView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 装饰</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过地址栏中的参数，获取预先访问的地址，用于登录成功后的跳转</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>next_url <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">,</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;goods:index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token operator">=</span> redirect<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：不设置表单的action时，提交表单时，会向浏览器地址栏中的地址提交数据</p><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/auth/default/#the-login-required-decorator</p></li></ul></li><li><p><strong>LoginRequiredMixin</strong></p><p>使用基于类的视图时，可以使用<code>LoginRequiredMixin</code>实现和<code>login_required</code>相同的功能，要求类视图最先继承<code>LoginRequiredMixin</code>类</p><ul><li><p><em><strong>代码实现</strong></em></p><p><em><strong>1&gt;</strong></em> 先定义一个<code>LoginRequiredMixin</code>类，用于类视图的继承</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required
<span class="token keyword">class</span> <span class="token class-name">LoginRequiredMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 调用父类的as_view</span>
        view <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> login_required<span class="token punctuation">(</span>view<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2&gt;</strong></em> 类视图先继承于<code>LoginRequiredMixin</code>类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> utils<span class="token punctuation">.</span>mixin <span class="token keyword">import</span> LoginRequiredMixin
<span class="token keyword">class</span> <span class="token class-name">UserOrderView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span> View<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 如此，便可实现和<code>login_required</code>相同的功能，且在配置url时不用使用<code>login_required</code>进行装饰了</p><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/auth/default/#the-loginrequired-mixin</p></li></ul></li><li><p><strong>用户登录判断</strong></p><p>Django会使用sessions和中间件将身份验证系统挂接到请求对象中，每次请求中都会提供<code>request.user</code>属性</p><p>如果用户未登录，属性值为<code>AnonymousUser</code>类的实例，为<code>False</code></p><p>如果用户已经登录，属性值为<code>User</code>类的实例，为<code>True</code></p><p>可以使用<code>request.user.is_authenticated</code>判断具体是<code>True</code>还是<code>False</code></p><p>并且，在传递模板变量时，除了本身传递给模板文件的模板变量之外，Django也会把<code>request.user</code>传给模板文件，所以可以直接在模板中使用<code>user.is_authenticated</code>来判断用户是否已经登录</p><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/auth/default/#authentication-in-web-requests</p></li><li><p><strong>退出登录</strong></p><p>使用Django自带的<code>logout(request)</code>即可退出登录</p><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/auth/default/#how-to-log-a-user-out</p></li><li><p><strong>历史浏览记录</strong></p><p>为了方便存取，历史浏览记录保存在Redis数据库（内存型数据库）中</p><p>除了通过<code>redis</code>包中的<code>StrictRedis</code>类之外，还可以使用<code>django_redis</code>中的<code>get_redis_connection()</code>方法从Redis数据库中获取数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connection
con <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># StrictRedis的实例对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的<code>con</code>就是<code>StrictRedis</code>类的一个实例对象，进而可以通过它的实例方法对Redis数据库进行操作；参数<code>default</code>则指向Django缓存配置中的<code>default</code></p><p>参考文档：https://django-redis-chs.readthedocs.io/zh_CN/latest/#id15</p></li></ul><h2 id="fastdfs" tabindex="-1"><a class="header-anchor" href="#fastdfs" aria-hidden="true">#</a> FastDFS</h2><ul><li><p><strong>介绍</strong></p><p>FastDFS架构包括<em><strong>Tracker server</strong></em>和<em><strong>Storage server</strong></em>。客户端向Tracker server发出操作请求，通过 Tracker server的调度最终由Storage server完成文件的上传和下载</p><p><em><strong>Tracker</strong></em>：管理集群。Tracker可以实现集群，每个Tracker节点地位平等，收集Storage集群的状态</p><p><em><strong>Storage</strong></em>：实际保存文件。Storage分为多个组，每个组之间保存的文件是不同的；每个组内部可以有多个成员，每组成员之间保存的内容是相同的，组成员的地位是一致的，没有主从的概念</p><p><strong>FastDFS优点</strong>：解决了海量存储的问题；存储容量扩展方便，增加Storage server即可；重复文件只保存一份，节省空间；结合nginx提高网站提供图片的效率</p></li><li><p><strong>文件上传和下载</strong></p><ul><li><p><em><strong>上传过程</strong></em></p><img src="`+u+'" alt="FastDFS上传文件过程" style="zoom:33%;"><p>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。如：<code>group1/M00/00/00/rBIK6VcaP0aARXXvAAHrUgHEviQ394.jpg</code></p></li><li><p><em><strong>下载过程</strong></em></p><img src="'+r+'" alt="FastDFS下载文件过程" style="zoom:33%;"></li></ul></li></ul><p><strong>---FastDFS和nginx的安装过程参考课件中的安装步骤---</strong></p><ul><li><p><strong>项目上传和使用图片流程</strong></p><img src="'+d+`" alt="项目上传图片和使用图片流程" style="zoom:40%;"></li><li><p><strong>Django自定义文件存储类</strong></p><ul><li><p><em><strong>自定义文件存储类</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>files<span class="token punctuation">.</span>storage <span class="token keyword">import</span> Storage
<span class="token keyword">from</span> fdfs_client<span class="token punctuation">.</span>client <span class="token keyword">import</span> Fdfs_client
<span class="token keyword">class</span> <span class="token class-name">FDFSStorage</span><span class="token punctuation">(</span>Storage<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;FastDFS文件存储类&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">_oper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;打开文件时使用&quot;&quot;&quot;</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">_save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;保存文件时使用&quot;&quot;&quot;</span>
        <span class="token comment"># name：上传文件的名字</span>
        <span class="token comment"># content：包含上传文件内容的File对象</span>
        <span class="token comment"># 创建一个Fdfs_client对象</span>
        client <span class="token operator">=</span> Fdfs_client<span class="token punctuation">(</span><span class="token string">&#39;./utils/fdfs/client.conf&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 上传文件到FastDFS系统中</span>
        res <span class="token operator">=</span> client<span class="token punctuation">.</span>upload_by_buffer<span class="token punctuation">(</span>content<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;Status&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&#39;Upload successed.&#39;</span><span class="token punctuation">:</span>
            <span class="token comment"># 上传失败</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;上传文件到fast dfs失败&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 获取返回的文件id</span>
        filename <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;Remote file_id&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> filename
    <span class="token keyword">def</span> <span class="token function">exists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Django判断文件名是否可用&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回访问文件的url路径&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token string">&#39;http://192.168.1.106:8888&#39;</span><span class="token operator">+</span>name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/howto/custom-file-storage/</p></li><li><p><em><strong>更改Django默认的文件存储类</strong></em></p><p>Django默认的文件存储类是<code>&#39;django.core.files.storage.FileSystemStorage&#39;</code>，在项目的<code>settings.py</code>文件中增加如下配置可进行更改</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DEFAULT_FILE_STORAGE <span class="token operator">=</span> <span class="token string">&#39;utils.fdfs.storage.FDFSStorage&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/ref/settings/#std:setting-DEFAULT_FILE_STORAGE</p></li></ul></li></ul><h2 id="首页" tabindex="-1"><a class="header-anchor" href="#首页" aria-hidden="true">#</a> 首页</h2><ul><li><p><strong>首页页面静态化</strong></p><p>使用<code>celery</code>异步生成首页的静态页面并保存到<code>celery</code>服务器的<code>nginx</code>中，通过配置让<code>nginx</code>在用户访问首页的时候提供静态页面，从而减少从数据库查询的次数，提高效率</p></li><li><p><strong>更新数据时生成首页新的静态页面</strong></p><p>通过在应用的<code>admin.py</code>文件中定义模型管理类，重写<code>save_model()</code>和<code>delete_model()</code>方法实现在新增、更新或者删除首页使用的表中的数据时<code>celery</code>自动生成首页新的静态页面</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin
<span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsType
<span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> generate_static_index_html
<span class="token keyword">class</span> <span class="token class-name">BaseModelAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">save_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> form<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;新增或更新表中的数据时调用&quot;&quot;&quot;</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save_model<span class="token punctuation">(</span>request<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> form<span class="token punctuation">,</span> change<span class="token punctuation">)</span>
        <span class="token comment"># 发出任务，让celery worker重新生成首页静态页面</span>
        generate_static_index_html<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">delete_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;删除表中的数据时调用&quot;&quot;&quot;</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete_model<span class="token punctuation">(</span>request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
        <span class="token comment"># 发出任务，让celery worker重新生成首页静态页面</span>
        generate_static_index_html<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">GoodsTypeAdmin</span><span class="token punctuation">(</span>BaseModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>GoodsType<span class="token punctuation">,</span> GoodsTypeAdmin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/ref/contrib/admin/#modeladmin-methods</p></li><li><p><strong>页面数据缓存</strong></p><p>把页面上使用的数据存放在缓存中，当再次使用这些数据时，先从缓存中获取，缓存中没有再去数据库中查询，从而减少数据库的查询次数</p><p>首先需要在项目的<code>settings.py</code>文件中设置缓存的配置项</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;default&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;BACKEND&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;django_redis.cache.RedisCache&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;LOCATION&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;redis://127.0.0.1:6379/9&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;CLIENT_CLASS&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;django_redis.client.DefaultClient&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后在需要设置缓存的视图中使用下面两个函数进行设置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache
cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>  <span class="token comment"># 设置缓存</span>
cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment"># 获取缓存，获取不到返回None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>底层缓存API：https://docs.djangoproject.com/zh-hans/4.0/topics/cache/#the-low-level-cache-api</p><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/cache/#setting-up-the-cache</p></li><li><p><strong>缓存数据的更新</strong></p><p>首页缓存数据的更新发生在首页使用的表中的数据发生改变时，所以可以将缓存的更新也写在模型管理类的<code>save_model()</code>和<code>delete_model()</code>方法中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache
<span class="token keyword">class</span> <span class="token class-name">BaseModelAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">save_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> form<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;新增或更新表中的数据时调用&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        cache<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">&#39;index_page_data&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 清除首页的缓存数据</span>
    <span class="token keyword">def</span> <span class="token function">delete_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;删除表中的数据时调用&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        cache<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">&#39;index_page_data&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 清除首页的缓存数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：缓存的更新只删除原有缓存即可，用户访问时会自动生成新的缓存</p></li></ul><p><strong>小结</strong>：页面静态化和数据缓存的目的是为了优化网站的性能，减少数据库的查询次数，同时防止部分的恶意攻击，如DDOS攻击</p><h2 id="商品搜索" tabindex="-1"><a class="header-anchor" href="#商品搜索" aria-hidden="true">#</a> 商品搜索</h2><ul><li><p><strong>搜索引擎和全文检索框架</strong></p><ul><li><p><em><strong>搜索引擎</strong></em>：可以对表中的某些字段进行关键词分析，建立关键词对应的索引数据</p><p><em>whoosh</em>：纯Python编写的全文搜索引擎，文档：https://whoosh.readthedocs.io/en/latest/</p></li><li><p><em><strong>全文检索框架</strong></em>：可以帮助用户使用搜索引擎</p><p><em>haystack</em>：全文检索的框架，支持whoosh、solr、Xapian、Elasticsearc四种全文检索引擎，官方网站：http://haystacksearch.org/</p></li></ul></li><li><p><strong>安装和配置</strong></p><ul><li><p><em><strong>安装</strong></em>：在虚拟环境中安装需要的包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install django-haystack==2.6.0
pip install whoosh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>配置</strong></em>：在项目的<code>settings.py</code>文件中注册全文检索框架</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token string">&#39;haystack&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 注册全文检索框架</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目的<code>settings.py</code>文件中增加全文检索框架的配置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment"># 使用whoosh作为搜索引擎</span>
        <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;haystack.backends.whoosh_backend.WhooshEngine&#39;</span><span class="token punctuation">,</span>
        <span class="token comment"># 设置索引文件生成时存放的路径</span>
        <span class="token string">&#39;PATH&#39;</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;whoosh_index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment"># 当添加、修改、删除数据时，自动重新生成索引</span>
HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">&#39;haystack.signals.RealtimeSignalProcessor&#39;</span>
<span class="token comment"># 指定搜索结果每页显示的条数，默认 20个</span>
HAYSTACK_SEARCH_RESULTS_PER_PAGE <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>生成索引文件</strong></p><ul><li><p><em><strong>定义索引类</strong></em></p><p>在进行搜索的应用目录中新建<code>search_indexes.py</code>文件，在其中定义索引类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes
<span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsSKU
<span class="token comment"># 指定对于某个类的某些数据建立索引</span>
<span class="token keyword">class</span> <span class="token class-name">GoodsSKUIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 索引字段，use_template=True指定根据表中的哪些字段建立索引文件，具体的字段说明放在一个文件中</span>
    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> GoodsSKU  <span class="token comment"># 返回模型类</span>
    <span class="token comment"># 说明对哪些数据建立索引</span>
    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>创建字段说明的文件</strong></em></p><p>在<code>templates</code>目录下创建<code>search/indexes/goods/</code>目录，在目录中新建<code>goodssku_text.txt</code>文件，在文件中指定根据表中的哪些字段建立索引</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ object.name }}  # 根据商品的名称建立索引
{{ object.desc }}  # 根据商品的简介建立索引
{{ object.goods.detail }}  # 根据商品的详情建立索引
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>生成索引文件</strong></em></p><p>在虚拟环境下进入项目目录，运行如下命令生成索引文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python manage.py rebuild_index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>使用</strong></p><p><em><strong>1&gt;</strong></em> 设置页面上搜索框的提交表单</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/search<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>q<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>搜索商品<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>搜索<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：输入内容的框的<code>name</code>固定为<code>q</code>，表单提交方式固定为<code>get</code></p><p><em><strong>2&gt;</strong></em> 在项目的<code>urls.py</code>文件中配置<code>action</code>中的地址</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">r&#39;^search$&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;haystack.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 全文检索框架</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 如此，便可在页面上进行搜索</p><p><strong>搜索出结果</strong>后，<code>haystack</code>会把搜索出的结果传递给<code>templates/search</code>目录下的<code>search.html</code>模板，传递的内容包括：</p><p><code>query</code>：搜索的关键字</p><p><code>page</code>：当前页的<code>Page</code>对象，遍历<code>Page</code>对象，获取到的是<code>SearchResult</code>类的实例对象，该实例对象的属性<code>object</code>才是模型类的对象</p><p><code>paginator</code>：分页<code>paginator</code>对象</p></li><li><p><strong>更改分词方式</strong></p><p><em><strong>1&gt;</strong></em> 安装<code>jieba</code>分词模块：<code>pip install jieba</code></p><p><em><strong>2&gt;</strong></em> 进入虚拟环境下安装<code>haystack</code>包的目录，进入<code>backends</code>目录，并在目录下新建<code>ChineseAnalyzer.py</code>文件，在文件中添加以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> jieba
<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>analysis <span class="token keyword">import</span> Tokenizer<span class="token punctuation">,</span> Token
<span class="token keyword">class</span> <span class="token class-name">ChineseTokenizer</span><span class="token punctuation">(</span>Tokenizer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">,</span> positions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> chars<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> keeporiginal<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> removestops<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> start_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> start_char<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> Token<span class="token punctuation">(</span>positions<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> removestops<span class="token operator">=</span>removestops<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        seglist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>value<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> w <span class="token keyword">in</span> seglist<span class="token punctuation">:</span>
            t<span class="token punctuation">.</span>original <span class="token operator">=</span> t<span class="token punctuation">.</span>text <span class="token operator">=</span> w
            t<span class="token punctuation">.</span>boost <span class="token operator">=</span> <span class="token number">1.0</span>
            <span class="token keyword">if</span> positions<span class="token punctuation">:</span>
                t<span class="token punctuation">.</span>pos <span class="token operator">=</span> start_pos <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
            <span class="token keyword">if</span> chars<span class="token punctuation">:</span>
                t<span class="token punctuation">.</span>startchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
                t<span class="token punctuation">.</span>endchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
            <span class="token keyword">yield</span> t
<span class="token keyword">def</span> <span class="token function">ChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> ChineseTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>3&gt;</strong></em> 将<code>whoosh_backend.py</code>文件复制一份，命名为<code>whoosh_cn_backend.py</code></p><p><em><strong>4&gt;</strong></em> 打开新复制的文件，引入中文分析类，内部采用<code>jieba</code>分词</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span>ChineseAnalyzer <span class="token keyword">import</span> ChineseAnalyzer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>5&gt;</strong></em> 更改词语分析类，查找<code>analyzer=StemmingAnalyzer()</code>，更改为<code>analyzer=ChineseAnalyzer()</code></p><p><em><strong>6&gt;</strong></em> 修改项目的<code>settings.py</code>文件中的全文检索框架的配置，将搜索引擎更改为新建的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;haystack.backends.whoosh_cn_backend.WhooshEngine&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>7&gt;</strong></em> 重新生成索引文件：<code>python manage.py rebuild_index</code></p></li></ul><h2 id="添加购物车" tabindex="-1"><a class="header-anchor" href="#添加购物车" aria-hidden="true">#</a> 添加购物车</h2><p><em><strong>1&gt;</strong></em> <em><strong>请求方式</strong></em>，采用ajax post的请求方式</p><p>如果涉及到数据的修改（新增、修改、删除），采用<code>post</code>方式</p><p>如果只涉及到数据的获取，采用<code>get</code>方式</p><p><em><strong>2&gt;</strong></em> <em><strong>需要传递的参数</strong></em>：商品id(sku_id)、商品数量(count)</p><p>Ajax的<code>poat</code>请求方式Django也会进行csrf防护，所以在请求时也需要传递csrf的隐藏域，具体做法为：</p><p>在页面上找个位置写上<code>{% csrf_token %}</code>标签，在js代码中获取它的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> csrf <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=&quot;csrfmiddlewaretoken&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后作为ajax post的一个参数进行传递即可：<code>&#39;csrfmiddlewaretoken&#39;: csrf,</code></p><p>jQuery获取属性值：获取自定义属性用<code>attr</code>，获取原有属性用<code>prop</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sku_id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;sku_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> is_checked <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&#39;checked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="订单生成" tabindex="-1"><a class="header-anchor" href="#订单生成" aria-hidden="true">#</a> 订单生成</h2><p>提交表单<code>form</code>时，表单中的<code>checkbox</code>只有在被选中时才会被提交</p><ul><li><p><strong>MySQL事务</strong></p><ul><li><p><em><strong>事务控制语句</strong></em></p><p><code>BEGIN</code>、<code>START TRANSACTION</code>：开启事务</p><p><code>COMMIT</code>、<code>COMMIT WORK</code>：提交事务，二者是等价的，对数据库进行永久修改</p><p><code>ROLLBACK</code>、<code>ROLLBACK WORK</code>：回滚事务，二者是等价的，撤销所有未提交的修改</p><p><code>SAVEPOINT &lt;name&gt;</code>：在事务中创建保存点，一个事务中可以有多个保存点</p><p><code>RELEASE SAVEPOINT &lt;name&gt;</code>：删除保存点，不指定保存点时，抛出异常</p><p><code>ROLLBACK TO &lt;name&gt;</code>：把事务回滚到保存点</p></li><li><p><em><strong>Django中使用事务</strong></em></p><p>在进行数据库操作的函数和方法前使用<code>atomic</code>方法进行装饰</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> transaction
<span class="token keyword">class</span> <span class="token class-name">OrderCommitView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@transaction<span class="token punctuation">.</span>atomic</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/db/transactions/#controlling-transactions-explicitly</p></li><li><p><em><strong>Django中使用事务保存点</strong></em></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> transaction
save_id <span class="token operator">=</span> transaction<span class="token punctuation">.</span>savepoint<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 设置事务保存点，保存点名字为save_id</span>
transaction<span class="token punctuation">.</span>savepoint_rollback<span class="token punctuation">(</span>save_id<span class="token punctuation">)</span>  <span class="token comment"># 回滚到保存点</span>
transaction<span class="token punctuation">.</span>savepoint_commit<span class="token punctuation">(</span>save_id<span class="token punctuation">)</span>  <span class="token comment"># 提交保存点内的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考文档：https://docs.djangoproject.com/zh-hans/4.0/topics/db/transactions/#topics-db-transactions-savepoints</p></li></ul></li><li><p><strong>订单并发问题</strong></p><ul><li><p><em><strong>悲观锁</strong></em></p><p>悲观锁在查询数据时会<em><strong>对数据进行锁定</strong></em>，其他事务要想获取锁，需要等待持有锁的事务结束</p><p>悲观锁的SQL语句如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from df_goods_sku where id=sku_id for update;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在Django中使用方法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sku <span class="token operator">=</span> GoodsSKU<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>select_for_update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>sku_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>乐观锁</strong></em></p><p>乐观锁在查询数据时不会进行锁定，在<em><strong>更新数据时会进行判断</strong></em>，如果更新时的数据和查询时的数据相同，则更新成功，不同则更新失败</p><p>乐观锁的SQL语句如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>update df_goods_sku set stock=new_stock, sales=new_sales where id=sku_id and stock=orgin_stock;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在Django中使用乐观锁：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res<span class="token operator">=</span>GoodsSKU<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>sku_id<span class="token punctuation">,</span>stock<span class="token operator">=</span>orgin_stock<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>stock<span class="token operator">=</span>new_stock<span class="token punctuation">,</span>sales<span class="token operator">=</span>new_sales<span class="token punctuation">)</span>  <span class="token comment"># 返回数据库受影响的行数</span>
<span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token comment"># 更新失败</span>
    transaction<span class="token punctuation">.</span>savepoint_rollback<span class="token punctuation">(</span>save_id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;res&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;errmsg&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;下单失败2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乐观锁的<em><strong>问题</strong></em>：当商品库存充足时，同时下单仍然会出现下单失败的问题，解决方法为多次循环进行尝试，一般为3次</p></li><li><p><em><strong>使用场景</strong></em></p><p>冲突比较少的时候使用乐观锁</p><p>冲突比较多的时候使用悲观锁，乐观锁重复操作的代价比较大时，使用悲观锁</p></li></ul></li><li><p><strong>事务的隔离级别</strong></p><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销</p><ul><li><p><em><strong>Read Uncommitted（读取未提交内容）</strong></em></p><p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。读取未提交的数据，也被称之为<a href=""><em>脏读（Dirty Read）</em></a></p></li><li><p><em><strong>Read Committed（读取提交内容）</strong></em></p><p>大多数数据库系统的默认隔离级别（但<a href=""><em>不是MySQL默认的</em></a>）。一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理期间可能会有新的commit，所以同一select可能返回不同结果</p></li><li><p><em><strong>Repeatable Read（可重复读）</strong></em></p><p>这是<a href=""><em>MySQL的默认事务隔离级别</em></a>，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。可能导致的问题：<a href=""><em>幻读（Phantom Read）</em></a>。幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影”行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题</p></li><li><p><em><strong>Serializable（可串行化）</strong></em></p><p>最高的隔离级别，通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争</p><table><thead><tr><th><strong>隔离级别</strong></th><th style="text-align:center;"><strong>脏读</strong></th><th style="text-align:center;"><strong>不可重复读</strong></th><th style="text-align:center;"><strong>幻读</strong></th></tr></thead><tbody><tr><td>读未提交（Read Uncommitted）</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>读已提交（Read Committed）</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td>可重复读（Repeatable Read）</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td></tr><tr><td>可串行化（Serializable）</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr></tbody></table></li><li><p><em><strong>设置MySQL事务的隔离级别</strong></em></p><ul><li><p><em><strong>Windows</strong></em></p><p>在MySQL客户端中通过如下命令设置：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show global variables like &#39;%isolation%&#39;;  -- 查看事务的隔离级别
mysql&gt; set global transaction_isolation =&#39;read-committed&#39;;  -- 修改隔离级别
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>Linux</strong></em></p><p><em><strong>1&gt;</strong></em> 打开MySQL配置文件：<code>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</code></p><p><em><strong>2&gt;</strong></em> 在<code>skip-external-locking</code>后一行添加如下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>transaction-isolation = READ-COMMITTED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><p>参考资料：https://blog.csdn.net/weixin_30569303/article/details/113328497</p></li><li><p><strong>支付宝使用</strong></p><p>支付宝开放平台：https://open.alipay.com/platform/home.htm</p><p>支付宝电脑网站支付文档：https://opendocs.alipay.com/open/270/105898</p><p>详细内容参考课件《支付宝支付使用》和教学视频</p><p>使用Python工具包： https://github.com/fzlee/alipay/blob/master/README.zh-hans.md</p></li></ul>`,31);function x(S,j){const e=o("ExternalLinkIcon");return c(),i("div",null,[m,n("ul",null,[g,n("li",null,[v,n("p",null,[s("Django的"),b,s("模块中内置了邮件发送功能。发送邮件需要使用"),h,s("服务器，常用的免费服务器有："),n("a",y,[s("163"),t(e)]),s("、"),n("a",_,[s("126"),t(e)]),s("、"),n("a",q,[s("QQ"),t(e)])]),f])]),w])}const E=p(k,[["render",x],["__file","08_天天生鲜项目.html.vue"]]);export{E as default};
