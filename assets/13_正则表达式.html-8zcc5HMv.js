import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const p={},e=t(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h1><p><strong>作用</strong>：校验字符串是否满足规则；在一段文本中查找满足规则的内容</p><h2 id="字符" tabindex="-1"><a class="header-anchor" href="#字符" aria-hidden="true">#</a> 字符</h2><table><thead><tr><th style="text-align:left;"><strong>表达式</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">[abc]</td><td style="text-align:left;">字符集，匹配集合中所含的任一字符</td></tr><tr><td style="text-align:left;">[^abc]</td><td style="text-align:left;">否定字符集，匹配任何不在集合中的字符</td></tr><tr><td style="text-align:left;">[a-z]</td><td style="text-align:left;">字符范围，匹配指定范围内的任意字符</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除换行符以外的任何单个字符</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">转义字符</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">匹配任何字母数字，包括下划线（等价于 [A-Za-z0-9_]）</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">匹配任何非字母数字（等价于 [^A-Za-z0-9_]）</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">数字，匹配任何数字</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">非数字，匹配任何非数字字符</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">空白，匹配任何空白字符，包括空格、制表符等</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">非空白，匹配任何非空白字符</td></tr></tbody></table><p><em><strong>注</strong></em>：大写和小写字母匹配范围正好相反</p><h2 id="数量表示" tabindex="-1"><a class="header-anchor" href="#数量表示" aria-hidden="true">#</a> 数量表示</h2><table><thead><tr><th style="text-align:left;"><strong>表达式</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">?</td><td style="text-align:left;">匹配前面的表达式 0 个或 1 个，即表示可选项</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">匹配前面的表达式至少 1 个</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">匹配前面的表达式 0 个或多个</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">或运算符，并集，可以匹配符号前后的表达式</td></tr><tr><td style="text-align:left;"><code>{m}</code></td><td style="text-align:left;">匹配前面的表达式 m 个</td></tr><tr><td style="text-align:left;"><code>{m,}</code></td><td style="text-align:left;">匹配前面的表达式最少 m 个</td></tr><tr><td style="text-align:left;"><code>{m,n}</code></td><td style="text-align:left;">匹配前面的表达式最少 m 个，最多 n 个</td></tr></tbody></table><h2 id="格式校验" tabindex="-1"><a class="header-anchor" href="#格式校验" aria-hidden="true">#</a> 格式校验</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 校验邮箱</span>
        <span class="token class-name">String</span> email <span class="token operator">=</span> <span class="token string">&quot;zhangsan@163.com&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w+@[\\\\w&amp;&amp;[^_]]{2,6}(\\\\.[a-zA-Z]{2,3}){1,2}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文本查找" tabindex="-1"><a class="header-anchor" href="#文本查找" aria-hidden="true">#</a> 文本查找</h2><table><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">Pattern.compile(regex)</td><td style="text-align:left;">传递正则表达式获取正则表达式的对象</td></tr><tr><td style="text-align:left;">p.matcher(str)</td><td style="text-align:left;">传递需要查找的文本，使用正则表达式对象创建文本匹配器对象</td></tr><tr><td style="text-align:left;">m.find()</td><td style="text-align:left;">在文本中找到符合规则的子串后会返回 true，并在底层存储子串的起始索引和结束索引 +1</td></tr><tr><td style="text-align:left;">m.group()</td><td style="text-align:left;">底层会调用字符串截取的方法，使用 m.find() 中获取的索引截取符合规则的子串并返回</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 需求：找出文本中所有的 JavaXX</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取正则表达式的对象</span>
        <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;Java\\\\d{0,2}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用正则表达式对象获取文本匹配器对象</span>
        <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用循环获取符合的文本</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> subStr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="贪婪和非贪婪" tabindex="-1"><a class="header-anchor" href="#贪婪和非贪婪" aria-hidden="true">#</a> 贪婪和非贪婪</h2><p>正则表达式默认是贪婪的，即尽可能多的获取数据。可以在表示数量的符号后面添加 <code>?</code> 设置为非贪婪</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo05</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Java自从95年问世以来，abbbbbbbbbbbbaaaaaaaaaaaaaaaaaa经历了很多版木，&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;目前企业中用的最多的是]ava8和]ava11，因为这两个是长期支持版木。&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 需求一：贪婪爬取，获取 abbbbbbbbbbbb</span>
        <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">&quot;ab+&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 需求二：非贪婪爬取，获取 ab</span>
        <span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">&quot;ab+?&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><table><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">str.matches(regex)</td><td style="text-align:left;">判断字符串是否满足校验规则</td></tr><tr><td style="text-align:left;">str.replaceAll(regex, newStr)</td><td style="text-align:left;">对满足校验规则的子串进行替换，返回替换后的字符串</td></tr><tr><td style="text-align:left;">str.split(regex, limit)</td><td style="text-align:left;">使用满足规则的子串进行切割，返回字符串数组</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo06</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;张三qwer123李四123qwer王五&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// str.replaceAll(regex, newStr)：对满足校验规则的子串进行替换，返回替换后的字符串</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;[\\\\w&amp;&amp;[^_]]+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// str.split(regex, limit)：使用满足规则的子串进行切割，返回字符串数组</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;[\\\\w&amp;&amp;[^_]]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><p>正则表达式使用小括号 <code>()</code> 进行分组，有以下规则：</p><p><em><strong>1&gt;</strong></em> 组号从 1 开始，连接不间断</p><p><em><strong>2&gt;</strong></em> 组号以左括号 <code>(</code> 为基准，从左到右组号依次递增，即使是括号套括号的形式组号的定义也不被影响</p><h3 id="捕获分组" tabindex="-1"><a class="header-anchor" href="#捕获分组" aria-hidden="true">#</a> 捕获分组</h3><p><em><strong>1&gt;</strong></em> 使用 <code>\\\\组号</code> 可以在正则表达式内部将第 x 组的内容再拿出来使用</p><p><em><strong>2&gt;</strong></em> 使用 <code>$组号</code> 可以在外部将第 x 组的内容再拿出来使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo07</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 需求一：判断字符串的开始字符和结束字符是否一致，只考虑一个字符</span>
        <span class="token comment">// \\\\组号：将第 x 组的内容再拿出来使用</span>
        <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">&quot;(.).+\\\\1&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a123a&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;babcb&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;897&amp;&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a123b&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 需求二：判断字符串的开始字符和结束字符是否一致，可以是多个字符</span>
        <span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">&quot;(.+).+\\\\1&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc123abc&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b456b&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;!@abc&amp;!@&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc123abd&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 需求三：判断字符串的开始字符和结束字符是否一致，开始部分内部每个字符也需要一致</span>
        <span class="token class-name">String</span> regex3 <span class="token operator">=</span> <span class="token string">&quot;((.)\\\\2*).+\\\\1&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;aaa123aaa&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;17891&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&amp;abc&amp;&amp;&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;aaa123aab&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 需求四：将“我要学学学编编编编编程程程程程程程程程”处理成“我要学编程”</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;我要学学学编编编编编程程程程程程程程程&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;(.)\\\\1+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非捕获分组" tabindex="-1"><a class="header-anchor" href="#非捕获分组" aria-hidden="true">#</a> 非捕获分组</h3><p>分组之后不需要再使用本组数据，仅仅是把数据括起来</p><p>非捕获分组不占用组号</p><table><thead><tr><th style="text-align:left;"><strong>符号</strong></th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">(?:正则)</td><td style="text-align:left;">获取所有</td></tr><tr><td style="text-align:left;">(?=正则)</td><td style="text-align:left;">获取前面的部分</td></tr><tr><td style="text-align:left;">(?!正则)</td><td style="text-align:left;">获取不是指定内容的前面部分</td></tr></tbody></table>`,30),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","13_正则表达式.html.vue"]]);export{k as default};
