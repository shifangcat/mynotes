import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-VKLC1A-x.js";const i={},t=e(`<h1 id="事务-锁-进程" tabindex="-1"><a class="header-anchor" href="#事务-锁-进程" aria-hidden="true">#</a> 事务_锁_进程</h1><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h3 id="事务的四大特性" tabindex="-1"><a class="header-anchor" href="#事务的四大特性" aria-hidden="true">#</a> 事务的四大特性</h3><ul><li><strong>原子性</strong>：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚</li><li><strong>一致性</strong>：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li><li><strong>隔离性</strong>：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li><li><strong>持久性</strong>：持久性是指一个事务一旦被提交了，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失已经提交的事务的操作</li></ul><h3 id="自治事务" tabindex="-1"><a class="header-anchor" href="#自治事务" aria-hidden="true">#</a> 自治事务</h3><p>将某个存储过程（写日志）的操作独立在另外一个事务里执行，COMMIT 或者 ROLLBACK，只针对他（写日志）本身的逻辑所产生的数据进行操作，不会影响其他存储过程的数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 在存储过程定义变量的地方定义自治事务的命令</span>
<span class="token operator">IS</span>
  PRAGMA AUTONOMOUS_TRANSACTION<span class="token punctuation">;</span>  <span class="token comment">-- 自治事务的命令</span>
<span class="token keyword">BEGIN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h2><p>锁的目的是为了保证数据的一致性</p><h3 id="行锁和表锁" tabindex="-1"><a class="header-anchor" href="#行锁和表锁" aria-hidden="true">#</a> 行锁和表锁</h3><ul><li><strong>行锁</strong>：就是把那一行的数据给锁起来，在没有提交或者回滚事务之前，其它的会话（事务）都不能去修改这条数据</li><li><strong>表锁</strong>：把整张表给锁起来，在没有提交或者回滚事务之前，不能对这张表的结构做 DDL 操作，针对的是表的结构</li><li><strong>死锁</strong>：两个事务之间都在等待着对方解锁和释放资源</li></ul><h3 id="悲观锁和乐观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁和乐观锁" aria-hidden="true">#</a> 悲观锁和乐观锁</h3><p>乐观锁和悲观锁都是锁，区别就是在修改数据的时候是否马上把这一条数据给锁起来</p><ul><li>悲观锁：事务 1 在对一条数据做修改的时候，数据库就很悲观地认为其它事务也会对这条数据做修改，所以数据库就会马上把那张表和那条数据给锁起来，不让其它事务修改他。一般默认都是悲观锁</li><li>乐观锁：事务 1 在对一条数据做修改的时候，数据库就很乐观地认为其它事务不会对这条数据做修改，所以数据库就不会把那张表和那条数据给锁起来，其它事务可以对这条数据执行 UPDATE 命令，只有在 COMMIT 提交的时候才会去校验其它事务是否有对该条数据做修改</li></ul><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><p>查看进程和杀死进程都需要在 SYS 账户上进行操作</p><h3 id="查看进程" tabindex="-1"><a class="header-anchor" href="#查看进程" aria-hidden="true">#</a> 查看进程</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> SESS<span class="token punctuation">.</span>SID<span class="token punctuation">,</span>
       SESS<span class="token punctuation">.</span><span class="token keyword">SERIAL</span><span class="token comment">#,</span>
       LO<span class="token punctuation">.</span>ORACLE_USERNAME<span class="token punctuation">,</span>
       LO<span class="token punctuation">.</span>OS_USER_NAME<span class="token punctuation">,</span>
       AO<span class="token punctuation">.</span>OBJECT_NAME<span class="token punctuation">,</span>
       LO<span class="token punctuation">.</span>LOCKED_MODE
<span class="token keyword">FROM</span> V$LOCKED_OBJECT LO<span class="token punctuation">,</span>
     DBA_OBJECTS AO<span class="token punctuation">,</span>
     V$<span class="token keyword">SESSION</span> SESS
<span class="token keyword">WHERE</span> AO<span class="token punctuation">.</span>OBJECT_ID <span class="token operator">=</span> LO<span class="token punctuation">.</span>OBJECT_ID
  <span class="token operator">AND</span> LO<span class="token punctuation">.</span>SESSION_ID <span class="token operator">=</span> SESS<span class="token punctuation">.</span>SID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="杀进程" tabindex="-1"><a class="header-anchor" href="#杀进程" aria-hidden="true">#</a> 杀进程</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">KILL</span> <span class="token keyword">SESSION</span> <span class="token string">&#39;SID,SERIAL#&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">KILL</span> <span class="token keyword">SESSION</span> <span class="token string">&#39;137,1946&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20),l=[t];function o(r,c){return a(),s("div",null,l)}const u=n(i,[["render",o],["__file","15_事务_锁_进程.html.vue"]]);export{u as default};
