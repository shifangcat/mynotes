import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-VKLC1A-x.js";const e={},p=t(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><h2 id="javascript介绍" tabindex="-1"><a class="header-anchor" href="#javascript介绍" aria-hidden="true">#</a> JavaScript介绍</h2><p>JavaScript是运行在浏览器端的脚步语言，JavaScript主要解决的是前端与用户交互的问题，包括使用交互与数据交互。 JavaScript是浏览器解释执行的，前端脚本语言还有JScript（微软，IE独有）、ActionScript( Adobe公司，需要插件)等</p><ul><li><p><strong>前端三大块</strong></p><ul><li><em><strong>HTML</strong></em>：页面结构</li><li><em><strong>CSS</strong></em>：页面表现：元素大小、颜色、位置、隐藏或显示、部分动画效果</li><li><em><strong>JavaScript</strong></em>：页面行为：部分动画效果、页面与用户的交互、页面功能</li></ul></li><li><p><strong>JavaScript嵌入页面的方式</strong></p><ul><li><p><em><strong>外部引入</strong></em></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>页面script标签嵌入</strong></em></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>行间事件（主要用于事件）</strong></em></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>js的注释</strong></p><ul><li><p><em><strong>单行注释</strong></em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单行注释在前面加两个斜杠“/”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><em><strong>多行注释</strong></em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*js的多行注释和CSS一样
都是使用斜杠“/”和“*”号*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>***注：***一条JavaScript语句应该以“;”结尾，JavaScript语句不讲究缩进问题</p><ul><li><strong>Javascript组成</strong><ul><li>ECMAscript：JavaScript的语法（变量、函数、循环语句等语法）</li><li>DOM：文档对象模型，操作HTML和CSS的方法</li><li>BOM：浏览器对象模型，操作浏览器的一些方法</li></ul></li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>JavaScript是一种弱类型语言，变量的类型由它的值来决定</p><ul><li><p><strong>变量的定义</strong></p><p>JavaScript中定义变量需要使用关键字<code>var</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一次定义一个变量</span>
<span class="token keyword">var</span> iNum <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sTr <span class="token operator">=</span> <span class="token string">&#39;asd&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 一次定义多个变量</span>
<span class="token keyword">var</span> iNum <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span>sTr<span class="token operator">=</span><span class="token string">&#39;qwe&#39;</span><span class="token punctuation">,</span>sCount<span class="token operator">=</span><span class="token string">&#39;68&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>变量类型</strong></p><ul><li><em><strong>5种基本数据类型</strong></em><ul><li><code>number</code>数字类型</li><li><code>string</code>字符串类型</li><li><code>boolean</code>布尔类型<code>true</code>或<code>false</code></li><li><code>undefined</code>undefined类型，变量被声明，但未被初始化，那么它的值就是undefined</li><li><code>null</code>null类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为null，在页面上获取不到对象，返回的值也是null</li></ul></li><li><em><strong>1种复合类型</strong></em><ul><li><code>object</code></li></ul></li></ul></li><li><p><strong>变量、函数、属性、函数参数命名规范</strong></p><ul><li>区分大小写</li><li>必须由字母、下划线、美元符号或数字组成，且不能以数字开头</li></ul></li><li><p><strong>匈牙利命名风格</strong></p><p>字符串s String 比如：<code>sUserName</code></p><p>整数i Integer 比如：<code>iItemCount</code></p><p>布尔值b Boolean 比如：<code>bIsComplete</code></p></li></ul><h2 id="元素" tabindex="-1"><a class="header-anchor" href="#元素" aria-hidden="true">#</a> 元素</h2><ul><li><p><strong>获取元素</strong></p><ul><li><p><em><strong>通过id获取元素</strong></em></p><p>使用内置对象<code>document</code>的<code>getElementById</code>方法获取页面上设置了id属性的元素，如：<code>var oDiv = document.getElementById(&#39;div1&#39;);</code></p></li><li><p><em><strong>通过标签获取元素</strong></em></p><ul><li>使用内置对象<code>document</code>的<code>getElementsByTagName</code>方法获取页面上<strong>某一标签的所有元素</strong>，如：<code>var aLi = document.getElementsByTagName(&#39;li&#39;);</code></li><li>想要获取页面上<strong>某一标签的部分元素</strong>，可以使用类似<code>var aLi2 = oUl.getElementsByTagName(&#39;li&#39;);</code>的方法，只会获取到oUl中的li标签的元素</li></ul><p><em><strong>注</strong></em>：此种方法获取到的是一个<em><strong>选择集</strong></em>，不是数组，同时无法对选择集整体进行样式操作，但是可以用下标的方式获取和操作选择集里面的标签元素</p></li></ul></li><li><p><strong>操作元素属性</strong></p><ul><li><p><em><strong>操作属性的方法</strong></em></p><ul><li>“.” 操作</li><li>“[ ]”操作，属性用变量来代替的话需要用[ ]来操作，如：style[sMystyle]</li></ul></li><li><p><em><strong>属性写法</strong></em></p><ul><li>HTML的属性和js里面属性写法一样</li><li>“class”属性需要写成“className”</li><li>“style”属性里面的属性，有横杠需要改成小驼峰式，比如：“font-size”，改成“style.fontSize”</li></ul></li><li><p><em><strong>innerHTML</strong></em></p><p>innerHTML可以操作被元素包裹的内容，读取或改写等</p></li></ul></li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><ul><li><p><strong>函数的定义和执行</strong></p><ul><li>函数的定义：<code>function 函数名(){...}</code></li><li>函数的执行：<code>函数名()</code></li><li>提取行间事件</li><li>匿名函数，如：<code>oBtn.onclick = function(){...}</code></li><li>函数传参，如：<code>function fnAlert(a,b,c){...}</code></li><li>函数的返回值，return关键字的作用： <ul><li>返回函数执行的结果</li><li>结束函数的运行</li><li>阻止默认行为</li></ul></li></ul></li><li><p><strong>变量与函数预解析</strong></p><p>JavaScript解析过程分为两个阶段，先是编译阶段，然后是执行阶段</p><p>在编译阶段会将var定义的变量的声明提前，并将它赋值为undefined；对于函数则会将声明和定义都提前，函数可以正常执行</p></li><li><p><strong>变量作用域</strong></p><p>变量作用域指的是变量的作用范围，JavaScript中的变量分为全局变量和局部变量</p><ul><li><em><strong>全局变量</strong></em>：在函数外部定义的变量，为整个页面公用，函数内部外部都可以访问</li><li><em><strong>局部变量</strong></em>：在函数内部定义的变量，只能在定义该变量的函数内部访问，外部无法访问</li></ul><p>JavaScript中函数内部可以直接修改全局变量，修改后，其他函数访问到的将是修改后的数据</p></li><li><p><strong>封闭函数</strong></p><p>封闭函数是JavaScript中匿名函数的另外一种写法，创建一个一开始就执行而不用命名的函数</p><ul><li><p><em><strong>定义封闭函数</strong></em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>优点</strong></em></p><p>封闭函数可以创造一个独立的空间，在封闭函数内定义的变量和函数不会影响外部同名的函数和变量，可以避免命名冲突，在页面上引入多个js文件时，用这种方式添加js文件比较安全</p></li></ul></li></ul><h2 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句" aria-hidden="true">#</a> 条件语句</h2><ul><li><p><strong>运算符</strong></p><ul><li><p>算术运算符： <code>+</code>(加)、 <code>-</code>(减)、 <code>*</code>(乘)、<code> /</code>(除)、 <code>%</code>(求余)</p></li><li><p>赋值运算符：<code>=</code>、 <code>+=</code>、 <code>-=</code>、 <code>*=</code>、<code> /=</code>、 <code>%=</code>，<em><strong>注：</strong></em><code>a++</code>等同于<code>a += 1</code></p></li><li><p>条件运算符：<code>==</code>、<code>===</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>!=</code>、<code>&amp;&amp;</code>(并且)、<code>||</code>(或者)、<code>!</code>(否，取反)</p><p>***注：***js中的<code>==</code>会先将两边的内容转换为相同类型再比较，<code>===</code>则不会转换类型</p></li></ul></li><li><p><strong>if...else...</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>多重if...else...语句</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>switch语句</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">...</span><span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token operator">...</span><span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相较于多重if...else...语句，switch语句性能更高</p></li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><ul><li><p><strong>定义数组</strong></p><ul><li>通过类的实例化创建数组：<code>var aList01 = new Array(1,2,3);</code></li><li>通过直接量创建数组：<code>var aList02 = [1,2,3];</code></li></ul></li><li><p><strong>操作数组中的数据</strong></p><ul><li>获取数组的长度：<code>aList.length;</code></li><li>用下标操作数组的某个数据：<code>aList[0];</code></li><li><code>aList.push(value);</code>和<code>aList.pop();</code>从数组最后增加成员或删除成员</li><li><code>aList.unshift(value);</code>和<code>aList.shift();</code>从数组前面增加成员或删除成员</li><li><code>aList.reverse();</code>将数组反转，不是排序</li><li><code>aList.indexOf(value);</code>返回数组中元素第一次出现的索引值，不存在返回-1</li><li><code>aList.splice();</code>在数组中增加或删除成员，第一个参数是开始的位置（下标），第二个参数是从开始的位置（下标）删除多少个元素，第三个及之后的参数是要增加的元素的值</li><li><code>aList.join();</code>将数组成员通过join提供的分隔符合并成字符串并返回，数组本身不变；join不提供参数则会返回数组元素和“,”组成的字符串；join提供空字符串作为参数，则将数组元素直接合并成字符串并返回</li></ul></li><li><p><strong>多维数组</strong></p><p>多维数组指的是数组里面的元素也是数组的数组，如：<code>var aList = [[1,2,3],[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]];</code></p></li></ul><h2 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句" aria-hidden="true">#</a> 循环语句</h2><ul><li><p><strong>for循环</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>iLen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>while循环</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数组去重</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> aList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aList2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>aList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        aList2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>aList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><ul><li><p><strong>字符串的处理方法</strong></p><ul><li>字符串拼接：<code>+</code></li><li><code>parseInt(string)</code>将数字字符串转化为整数，有小数的话小数部分直接舍弃</li><li><code>parseFloat(string)</code>将数字字符串转化为小数，整数则直接返回原整数</li><li><code>sTr.split()</code>将字符串通过split提供的分隔符分隔成多个字符串并组成数组返回；split不提供参数，则将原字符串放入数组中返回；split提供空字符串作为参数，则将字符串的每个字符都分隔成字符串并组成数组返回；split提供的分隔符在原字符串中不存在，则将原字符串放入数组中返回</li><li><code>sTr.charAt(index)</code>获取字符串中的某一个字符，索引超出返回空</li><li><code>sTr.indexOf(substring)</code>返回字符串中某字符第一次出现的索引值，不存在返回-1</li><li><code>sTr.substring(start,end)</code>截取字符串[start,end)，不包括end；start超出索引返回空；只有一个参数则从参数位置一直截取到字符串末尾</li><li><code>sTr.toUpperCase()</code>将字符串全部转为大写</li><li><code>sTr.toLowerCase()</code>将字符串全部转为小写</li></ul></li><li><p><strong>字符串反转</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sTr <span class="token operator">=</span> <span class="token string">&#39;asdfj12jlsdkf098&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sTr2 <span class="token operator">=</span> sTr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>sTr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>类型转换</strong></p><ul><li><p><em><strong>直接转换</strong></em>：<code>parseInt(string)</code>与<code>parseFloat(string)</code></p><p>解决小数相加无限小数的问题：通过乘以10、100等转换为整数相加后再除以10、100等</p></li><li><p><em><strong>隐式转换</strong></em>：<code>==</code>和<code>-</code>会自动将两边转换为相同类型再进行比较和运算</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;3&#39;</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 结果为相等</span>
<span class="token string">&#39;7&#39;</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 结果为4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>NaN和isNaN</strong></em></p><ul><li><code>NaN</code>是一个结果，意思是：not a number</li><li><code>isNaN(a)</code>是一个判断，意思是：a is not a number?结果为true或false</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹出 123</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹出 NaN</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹出 false</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token operator">==</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹出false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h2><ul><li><p><strong>作用</strong></p><ul><li>制作动画</li><li>异步操作</li><li>函数缓冲与节流</li></ul></li><li><p><strong>定时器的定义与关闭</strong></p><ul><li><p><em><strong>只执行一次的定时器</strong></em></p><ul><li><p><strong>定义</strong>：<code>setTimeout(函数名,时间)</code></p><p>第一个参数是函数名，或者是匿名函数，第二个参数是时间，单位是毫秒，单位不写</p></li><li><p><strong>关闭</strong>：<code>clearTimeout(定时器名)</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer01 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fnMyalert<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer01<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>反复执行的定时器</strong></em></p><ul><li><p><strong>定义</strong>：<code>setInterval(函数名,时间)</code></p><p>第一个参数是函数名，或者是匿名函数，第二个参数是时间，单位是毫秒，单位不写</p></li><li><p><strong>关闭</strong>：<code>clearInterval(定时器名)</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer02 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fnMyalert<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>timer02<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="常用内置对象" tabindex="-1"><a class="header-anchor" href="#常用内置对象" aria-hidden="true">#</a> 常用内置对象</h2><ul><li><p><strong>document</strong></p><p><code>document.getElementById(id)</code>通过id获取元素</p><p><code>document.getElementsByTagName(tagname)</code>通过标签名获取元素</p><p><code>document.referrer;</code>获取上一个跳转页面的地址（需要服务器环境）</p></li><li><p><strong>location</strong></p><p><code>window.location.href=...;</code>获取或者重定url地址</p><p><code>window.location.search;</code>获取url地址的参数部分（url地址中“?”后面的内容）</p><p><code>window.location.hash;</code>获取页面锚点（或者叫哈希值）（url地址中“#”后面的内容）</p></li><li><p><strong>Math对象</strong></p><p><code>Math.random();</code>获取0-1的随机数，不包括1</p><p><code>Math.floor(num)</code>向下取整，直接舍弃小数部分，不用考虑四舍五入</p><p><code>Math.ceil(num)</code>向上取整，小数部分舍弃，整数部分+1，不用考虑四舍五入</p><p>获取指定范围的随机数：<code>Math.floor((iStop - iStart + 1) * Math.random()) + iStart;</code></p></li></ul><h2 id="js程序的调试方法" tabindex="-1"><a class="header-anchor" href="#js程序的调试方法" aria-hidden="true">#</a> js程序的调试方法</h2><p><code>alert(...);</code>：弹出结果，会堵塞程序运行</p><p><code>console.log(...);</code>：在开发工具的控制台中输出结果</p><p><code>document.title=...;</code>：在网页标题中输出结果</p>`,29),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","06_JavaScript.html.vue"]]);export{d as default};
