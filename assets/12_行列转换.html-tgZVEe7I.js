import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-VKLC1A-x.js";const e={},t=p(`<h1 id="行列转换" tabindex="-1"><a class="header-anchor" href="#行列转换" aria-hidden="true">#</a> 行列转换</h1><h2 id="多行转多列" tabindex="-1"><a class="header-anchor" href="#多行转多列" aria-hidden="true">#</a> 多行转多列</h2><p>将一列上（多行）的纵向展示数据转换为一行（多列）上横向展示的数据</p><h3 id="case-when实现" tabindex="-1"><a class="header-anchor" href="#case-when实现" aria-hidden="true">#</a> CASE WHEN实现</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> T<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span> T<span class="token punctuation">.</span>AMT <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q1
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> T<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span> T<span class="token punctuation">.</span>AMT <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q2
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> T<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">THEN</span> T<span class="token punctuation">.</span>AMT <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q3
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> T<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">THEN</span> T<span class="token punctuation">.</span>AMT <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q4
<span class="token keyword">FROM</span> TEST_TABLE_613 T
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：先分析用哪个字段作为<code>CASE WHEN</code>后面的判断条件（一般为转换后横向的字段）；</p><p>再分析满足条件返回哪个字段的值（一般为转换后主要显示的数据）</p><p><code>GROUP BY</code>后面的分组字段也要注意（一般为具有相同数据的字段）</p><h3 id="decode实现" tabindex="-1"><a class="header-anchor" href="#decode实现" aria-hidden="true">#</a> DECODE实现</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>DECODE<span class="token punctuation">(</span>T<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q1
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>DECODE<span class="token punctuation">(</span>T<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q2
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>DECODE<span class="token punctuation">(</span>T<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q3
      <span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>DECODE<span class="token punctuation">(</span>T<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q4
<span class="token keyword">FROM</span> TEST_TABLE_613 T
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lead实现" tabindex="-1"><a class="header-anchor" href="#lead实现" aria-hidden="true">#</a> LEAD实现</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> T1<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> T1<span class="token punctuation">.</span>Q1<span class="token punctuation">,</span> T1<span class="token punctuation">.</span>Q2<span class="token punctuation">,</span> T1<span class="token punctuation">.</span>Q3<span class="token punctuation">,</span> T1<span class="token punctuation">.</span>Q4
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
      <span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> T<span class="token punctuation">.</span>Q<span class="token punctuation">,</span> T<span class="token punctuation">.</span>AMT Q1
            <span class="token punctuation">,</span>LEAD<span class="token punctuation">(</span>T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Y <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Q<span class="token punctuation">)</span> <span class="token keyword">AS</span> Q2
            <span class="token punctuation">,</span>LEAD<span class="token punctuation">(</span>T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Y <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Q<span class="token punctuation">)</span> <span class="token keyword">AS</span> Q3
            <span class="token punctuation">,</span>LEAD<span class="token punctuation">(</span>T<span class="token punctuation">.</span>AMT<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Y <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>Q<span class="token punctuation">)</span> <span class="token keyword">AS</span> Q4
      <span class="token keyword">FROM</span> TEST_TABLE_613 T
     <span class="token punctuation">)</span> T1
<span class="token keyword">WHERE</span> T1<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pivot实现" tabindex="-1"><a class="header-anchor" href="#pivot实现" aria-hidden="true">#</a> PIVOT实现</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 语法结构</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> 表名
<span class="token keyword">PIVOT</span> <span class="token punctuation">(</span>  <span class="token comment">-- PIVOT 后面没有用到的字段就是 CASE WHEN 方法中 GROUP BY 的字段</span>
       <span class="token function">SUM</span><span class="token punctuation">(</span>汇总字段<span class="token punctuation">)</span>
       <span class="token keyword">FOR</span> 拆分字段（判断字段） <span class="token operator">IN</span> <span class="token punctuation">(</span>判断值<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 示例</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> TEST_TABLE_613 T
<span class="token keyword">PIVOT</span> <span class="token punctuation">(</span>
       <span class="token function">SUM</span><span class="token punctuation">(</span>AMT<span class="token punctuation">)</span>
       <span class="token keyword">FOR</span> Q <span class="token operator">IN</span> <span class="token punctuation">(</span>
                 <span class="token number">1</span> <span class="token keyword">AS</span> Q1
                <span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">AS</span> Q2
                <span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">AS</span> Q3
                <span class="token punctuation">,</span><span class="token number">4</span> <span class="token keyword">AS</span> Q4
                <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多列转多行" tabindex="-1"><a class="header-anchor" href="#多列转多行" aria-hidden="true">#</a> 多列转多行</h2><p>将一行上（多列）的数据转换到一列（多行）上</p><h3 id="union-all实现" tabindex="-1"><a class="header-anchor" href="#union-all实现" aria-hidden="true">#</a> UNION ALL实现</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">AS</span> Q<span class="token punctuation">,</span> T<span class="token punctuation">.</span>Q1 <span class="token keyword">AS</span> AMT <span class="token keyword">FROM</span> TEST_LINE_TO_COLUMN T
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">AS</span> Q<span class="token punctuation">,</span> T<span class="token punctuation">.</span>Q2 <span class="token keyword">AS</span> AMT <span class="token keyword">FROM</span> TEST_LINE_TO_COLUMN T
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">AS</span> Q<span class="token punctuation">,</span> T<span class="token punctuation">.</span>Q3 <span class="token keyword">AS</span> AMT <span class="token keyword">FROM</span> TEST_LINE_TO_COLUMN T
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">AS</span> Q<span class="token punctuation">,</span> T<span class="token punctuation">.</span>Q4 <span class="token keyword">AS</span> AMT <span class="token keyword">FROM</span> TEST_LINE_TO_COLUMN T<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unpivot实现" tabindex="-1"><a class="header-anchor" href="#unpivot实现" aria-hidden="true">#</a> UNPIVOT实现</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> Y<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> SUBSTR<span class="token punctuation">(</span>Q<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Q<span class="token punctuation">,</span> AMT
<span class="token keyword">FROM</span> TEST_LINE_TO_COLUMN
<span class="token keyword">UNPIVOT</span> <span class="token punctuation">(</span>
         <span class="token punctuation">(</span>AMT<span class="token punctuation">)</span>
         <span class="token comment">-- 把 Q1, Q2, Q3, Q4 这 4 个字段的值放到 AMT 这一个字段上</span>
         <span class="token comment">-- 并且这 4 个字段名会放在 Q 下面</span>
         <span class="token comment">-- IN 后面的那个括号放的是字段的名称，不能加单引号</span>
         <span class="token keyword">FOR</span> Q <span class="token operator">IN</span> <span class="token punctuation">(</span>Q1<span class="token punctuation">,</span> Q2<span class="token punctuation">,</span> Q3<span class="token punctuation">,</span> Q4<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[t];function c(l,u){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","12_行列转换.html.vue"]]);export{d as default};
