import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-VKLC1A-x.js";const t="/mynotes/assets/Series的切片和索引-7To5ldmj.png",e="/mynotes/assets/Series的索引和值-t4bERSr2.png",o="/mynotes/assets/pandas中的字符串处理方法-NpSOKCVd.png",c="/mynotes/assets/merge方法合并数据-rUA9gKGY.png",i="/mynotes/assets/常用的聚合方法-P-U8MXvy.png",u="/mynotes/assets/date_range间隔符号-95vlIZiC.png",l="/mynotes/assets/pandas重采样-3AvpqW0k.png",d={},r=p(`<h1 id="pandas模块" tabindex="-1"><a class="header-anchor" href="#pandas模块" aria-hidden="true">#</a> pandas模块</h1><p>numpy能够帮助我们处理数值，但是pandas除了能处理数值之外(基于numpy)，还能够帮助我们处理其他类型的数据</p><p>pandas技术文档：https://pandas.pydata.org/pandas-docs/stable/reference/index.html</p><h3 id="pandas常用的数据类型" tabindex="-1"><a class="header-anchor" href="#pandas常用的数据类型" aria-hidden="true">#</a> pandas常用的数据类型</h3><p>pandas常用的数据类型有：</p><p><strong>Series</strong>：一维，带标签的数组</p><p><strong>DataFrame</strong>：二维，Series的容器</p><h2 id="series" tabindex="-1"><a class="header-anchor" href="#series" aria-hidden="true">#</a> Series</h2><h3 id="创建series" tabindex="-1"><a class="header-anchor" href="#创建series" aria-hidden="true">#</a> 创建Series</h3><p>使用<code>pandas.Series()</code>即可创建<code>Series</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 不指定索引会自动生成，0、1、2、...</span>
t1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;pandas.core.series.Series&#39;&gt;</span>

<span class="token comment"># 指定索引，需要和数组的数量保持一致</span>
t2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;abcde&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用字典创建Series，字典的键会作为索引/标签</span>
temp_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token number">10086</span><span class="token punctuation">}</span>
t3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>temp_dict<span class="token punctuation">)</span>

<span class="token comment"># 通过dtype获取Series中数据的数据类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># int64</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># int64</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># object</span>

<span class="token comment"># 和numpy一样，通过astype修改数据类型</span>
t4 <span class="token operator">=</span> t1<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;float&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="series的切片和索引" tabindex="-1"><a class="header-anchor" href="#series的切片和索引" aria-hidden="true">#</a> Series的切片和索引</h3><figure><img src="`+t+'" alt="Series的切片和索引" tabindex="0" loading="lazy"><figcaption>Series的切片和索引</figcaption></figure><p><strong>切片</strong>：直接传入<code>start</code>、<code>end</code>、<code>step</code>即可</p><p><strong>索引</strong>：一个的时候直接传入序号或者标签，多个的时候传入序号或者标签的列表</p><h3 id="series的索引和值" tabindex="-1"><a class="header-anchor" href="#series的索引和值" aria-hidden="true">#</a> Series的索引和值</h3><figure><img src="'+e+`" alt="Series的索引和值" tabindex="0" loading="lazy"><figcaption>Series的索引和值</figcaption></figure><p><code>Series</code>对象本质上是由两个数组构成，一个数组构成对象的键（索引/标签），一个数组构成对象的值</p><p><code>ndarray(numpy)</code>上的很多方法都适用于<code>Series</code>类型，如：<code>argmax()</code>、<code>clip()</code>等，但是<code>Series</code>的<code>where()</code>方法返回的结果却是不同的</p><h2 id="dataframe" tabindex="-1"><a class="header-anchor" href="#dataframe" aria-hidden="true">#</a> DataFrame</h2><h3 id="创建dataframe" tabindex="-1"><a class="header-anchor" href="#创建dataframe" aria-hidden="true">#</a> 创建DataFrame</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment"># 不指定索引会自动生成</span>
t1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 指定索引，index指定行索引，columns指定列索引</span>
t2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;WXYZ&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用字典创建DataFrame，字典的键会作为列索引</span>
d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;caocao&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;10086&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10010&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
t3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>

d2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10000&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;caocao&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lvbu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10086&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
t4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>  <span class="token comment"># 缺失的值会显示为NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DataFrame对象既有行索引，又有列索引</p><p>行索引，表明不同行，横向索引，叫<code>index</code>，0轴，<code>axis=0</code></p><p>列索引，表名不同列，纵向索引，叫<code>columns</code>，1轴，<code>axis=1</code></p><h3 id="dataframe的属性" tabindex="-1"><a class="header-anchor" href="#dataframe的属性" aria-hidden="true">#</a> DataFrame的属性</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

temp_dict <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;caocao&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10086&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;liubei&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10010&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;guanyu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
t <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>temp_dict<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 形状，行数和列数 -&gt; (3, 3)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>  <span class="token comment"># 数据维度 -&gt; 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>index<span class="token punctuation">)</span>  <span class="token comment"># 行索引 -&gt; RangeIndex(start=0, stop=3, step=1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>  <span class="token comment"># 列索引 -&gt; Index([&#39;name&#39;, &#39;age&#39;, &#39;tel&#39;], dtype=&#39;object&#39;)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>values<span class="token punctuation">)</span>  <span class="token comment"># 值，是一个二维的ndarray数组</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>dtypes<span class="token punctuation">)</span>  <span class="token comment"># 每一列的数据类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataframe方法" tabindex="-1"><a class="header-anchor" href="#dataframe方法" aria-hidden="true">#</a> DataFrame方法</h3><p><code>df.head(2)</code>：显示前几行，默认显示5行</p><p><code>df.tail(2)</code>：显示末尾几行，默认显示5行</p><p><code>df.info()</code>：相关信息概览：行数、列数、列索引、列非空值个数、行类型、列类型、内存占用</p><p><code>df.describe()</code>：快速综合统计结果：计数、均值、标准差、最大值、最小值、四分位数</p><p><code>df.sort_values()</code>：DataFrame的排序，<code>by</code>设置排序的依据；<code>ascending</code>设置排序的方式，默认是升序，<code>False</code>表示降序</p><h3 id="dataframe取行或取列" tabindex="-1"><a class="header-anchor" href="#dataframe取行或取列" aria-hidden="true">#</a> DataFrame取行或取列</h3><ul><li><p><strong>通过切片和列索引获取</strong></p><p><code>[]</code>写数字，表示取行，对行进行操作</p><p><code>[]</code>写列索引，表示通过通过列索引对列进行操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取前20行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;Row_Labels&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取Row_Labels那一列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;Row_Labels&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 同时取行和列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;Row_Labels&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取10-100行，步长为5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>DataFrame的loc属性</strong></p><p><code>df.loc[]</code>：通过<em><strong>标签</strong></em>获取数据，每个维度之间用<code>,</code>分隔，<code>,</code>前面表示行，后面表示列</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

t <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;UVWXYZ&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># \`,\`前面表示行，后面表示列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;W&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取a行W列相交的值 -&gt; 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取a那一行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 同上，取a那一行，\`:\`可以省略</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">&#39;W&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取W那一列，\`:\`不能省略</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;W&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Y&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取间隔的多行多列</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取连续的多行多列，其中\`:\`在loc()中是左右都闭合的</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;W&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Z&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注</strong></em>：<code>:</code>在<code>df.loc[]</code>中左右都是闭合的，即左右两边也都能取到</p></li><li><p><strong>DataFrame的iloc属性</strong></p><p><code>df.iloc[]</code>：通过<em><strong>位置</strong></em>获取数据，每个维度之间用<code>,</code>分隔，<code>,</code>前面表示行，后面表示列。使用方法和<code>df.loc[]</code>相同，不同的是需要将字符串索引换成数字索引</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取第1行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取2行4列相交的值 -&gt; 9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="dataframe的布尔索引" tabindex="-1"><a class="header-anchor" href="#dataframe的布尔索引" aria-hidden="true">#</a> DataFrame的布尔索引</h3><p>DataFrame中的布尔索引可以写多个条件，每个条件用<code>()</code>括起来，表示并且使用<code>&amp;</code>连接，表示或使用<code>|</code>连接，示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取count大于800的数据</span>
df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">800</span><span class="token punctuation">]</span>
<span class="token comment"># 获取count大于800，小于1000的数据</span>
df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment"># 获取name长度大于5，或者count大于800的数据</span>
df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能使用连续的比较，如下面的使用就是错误的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token number">800</span> <span class="token operator">&lt;</span> df<span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">]</span>  <span class="token comment"># 错误使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="pandas读取数据" tabindex="-1"><a class="header-anchor" href="#pandas读取数据" aria-hidden="true">#</a> pandas读取数据</h2><h3 id="读取csv文件" tabindex="-1"><a class="header-anchor" href="#读取csv文件" aria-hidden="true">#</a> 读取CSV文件</h3><p>pandas本身提供了读取CSV文件的方法<code>read_csv()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 读取CSV文件</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;aaaa.csv&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外还提供了其他文件的读取方法，如：<code>pd.read_excel()</code>、 <code>pd.read_json()</code>、 <code>pd.read_html()</code>、 <code>pd.read_sql()</code>、 <code>pd.read_sql_query()</code>、 <code>pd.read_sql_table()</code>、 <code>pd.read_clipboard()</code>等</p><h3 id="读取mongodb数据库" tabindex="-1"><a class="header-anchor" href="#读取mongodb数据库" aria-hidden="true">#</a> 读取MongoDB数据库</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建客户端</span>
collection <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">&#39;douban&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;tv1&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 选择数据库和集合</span>
mongo_data <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有数据</span>

<span class="token comment"># 使用Series读取一条数据</span>
t <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>mongo_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 读取第一条数据</span>

<span class="token comment"># 使用DataFrame读取多条数据</span>
t2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>mongo_data<span class="token punctuation">)</span>  <span class="token comment"># 读取全部数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pandas中的字符串处理方法" tabindex="-1"><a class="header-anchor" href="#pandas中的字符串处理方法" aria-hidden="true">#</a> pandas中的字符串处理方法</h2><p>语法：<code>df.str.function()</code> 或 <code>series.str.function()</code></p><p>方法会作用到每一行或每一列上的每个数据上</p><p>常用的处理方法如下：</p><img src="`+o+`" alt="pandas中的字符串处理方法" style="zoom:33%;"><h2 id="pandas中缺失数据的处理" tabindex="-1"><a class="header-anchor" href="#pandas中缺失数据的处理" aria-hidden="true">#</a> pandas中缺失数据的处理</h2><h3 id="判断是否为nan" tabindex="-1"><a class="header-anchor" href="#判断是否为nan" aria-hidden="true">#</a> 判断是否为NaN</h3><p><code>pd.isna(df)</code>、<code>pd.isnull(df)</code>：为<code>NaN</code>的位置返回<code>True</code>，其他返回<code>False</code></p><p><code>pd.notna(df)</code>、<code>pd.notnull(df)</code>：不为<code>NaN</code>的位置返回<code>True</code>，其他返回<code>False</code></p><h3 id="删除nan所在的行或列" tabindex="-1"><a class="header-anchor" href="#删除nan所在的行或列" aria-hidden="true">#</a> 删除NaN所在的行或列</h3><p>语法：<code>df.dropna(axis=0, how=&#39;any&#39;, inplace=False)</code></p><p><em><strong>1&gt;</strong></em> <code>axis</code>表示删除行还是删除列，值有<code>0</code>或<code>&#39;index&#39;</code>，<code>1</code>或<code>&#39;columns&#39;</code>，默认为<code>0</code></p><p><em><strong>2&gt;</strong></em> <code>how</code>表示删除的方式，默认为<code>&#39;any&#39;</code>表示只要行或列中存在<code>NaN</code>就删除该行或列；<code>&#39;all&#39;</code>表示只有行或列中全部为<code>NaN</code>时才删除该行或列</p><p><em><strong>3&gt;</strong></em> <code>inplace</code>表示是否在原数据上进行修改，默认为<code>False</code>表示不在原数据上进行修改，而会返回一个修改后的新数据，原数据不变；<code>True</code>表示在原数据上修改，不返回任何内容</p><p><em><strong>注</strong></em>：在不方便删除<code>NaN</code>的时候也可以通过布尔索引等方式筛选出不含<code>NaN</code>的数据</p><h3 id="填充数据" tabindex="-1"><a class="header-anchor" href="#填充数据" aria-hidden="true">#</a> 填充数据</h3><p><code>df.fillna(df.mean())</code>：使用均值进行填充</p><p><code>df.fillna(df.median())</code>：使用中位数进行填充</p><p><code>df.fillna(0)</code>：使用<code>0</code>进行填充</p><p><code>df[&#39;W&#39;] = df[&#39;W&#39;].fillna(df[&#39;W&#39;].mean())</code>：只填充特定列</p><p>处理为<code>0</code>的数据：<code>t[t == 0] = np.nan</code></p><p>当然并不是每次为<code>0</code>的数据都需要处理，这个要视情况而定</p><p><em><strong>注</strong></em>：在pandas中计算均值等情况时，<code>NaN</code>是不会参与计算的，但是<code>0</code>会参与计算，所以将<code>0</code>替换为<code>NaN</code>之后，得到的计算结果会更准确，同时也更方便后续的数据处理</p><h2 id="数组合并" tabindex="-1"><a class="header-anchor" href="#数组合并" aria-hidden="true">#</a> 数组合并</h2><h3 id="join-方法合并数据" tabindex="-1"><a class="header-anchor" href="#join-方法合并数据" aria-hidden="true">#</a> join()方法合并数据</h3><p><code>df1.join(df2)</code>：默认情况下把<em><strong>行索引相同</strong></em>的数据合并到一起，以<code>df1</code>为基准</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;xyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

df3 <span class="token operator">=</span> df1<span class="token punctuation">.</span>join<span class="token punctuation">(</span>df2<span class="token punctuation">)</span>  <span class="token comment"># 以df1为基准，结果只有两行</span>
df4 <span class="token operator">=</span> df2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>df1<span class="token punctuation">)</span>  <span class="token comment"># 以外df2为基准，结果为三行，不够的用NaN补齐</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="merge-方法合并数据" tabindex="-1"><a class="header-anchor" href="#merge-方法合并数据" aria-hidden="true">#</a> merge()方法合并数据</h3><p>通过列索引进行合并</p><img src="`+c+`" alt="merge方法合并数据" style="zoom:60%;"><h2 id="pandas的分组和聚合" tabindex="-1"><a class="header-anchor" href="#pandas的分组和聚合" aria-hidden="true">#</a> pandas的分组和聚合</h2><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h3><p>语法：<code>df.groupby(by=&quot;columns_name&quot;)</code></p><p><code>groupby()</code>方法的返回值是一个<code>DataFrameGroupBy</code>对象，这个对象是可迭代的，其中的每个元素都是一个元组，元组的构成是<code>(分组的依据, 分组依据对应的DataFrame)</code>；同时<code>DataFrameGroupBy</code>对象也可以调用聚合方法</p><ul><li><p><strong>使用多个条件进行分组</strong></p><ul><li><p><em><strong>先分组再取列</strong></em>，或者只分组不对列进行操作时，分组条件写在<code>by</code>参数后的列表中即可，也可以使用<code>df[]</code>的方式设置分组条件，示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 一个条件</span>
grouped_df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">)</span>
grouped_df2 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 多个条件</span>
grouped_df3 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;State/Province&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
grouped_df4 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;State/Province&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><em><strong>先取列再分组时</strong></em>，无论是否是使用多个条件分组，分组时都需要在<code>by</code>参数中使用<code>df[]</code>的方式设置分组条件，示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 一个条件</span>
grouped_df1 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 多个条件</span>
grouped_df2 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;State/Province&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h3><p>常用的聚合方法：</p><img src="`+i+`" alt="常用的聚合方法" style="zoom:50%;"><p>示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grouped_count_df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
grouped_count_df2 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面三行代码得到的结果相同，同时也都是采用获取多列的方式(两层<code>[]</code>)获取的列，所以类型也都是<code>&lt;class &#39;pandas.core.series.Series&#39;&gt;</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>grouped_count_df3 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
grouped_count_df4 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
grouped_count_df5 <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;Country&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Brand&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引和复合索引" tabindex="-1"><a class="header-anchor" href="#索引和复合索引" aria-hidden="true">#</a> 索引和复合索引</h2><h3 id="简单的索引操作" tabindex="-1"><a class="header-anchor" href="#简单的索引操作" aria-hidden="true">#</a> 简单的索引操作</h3><p><em><strong>1&gt;</strong></em> <code>df.index</code>：获取索引</p><p><em><strong>2&gt;</strong></em> <code>df.index = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>：指定新的索引</p><p><em><strong>3&gt;</strong></em> <code>df.reindex(list(&#39;abmn&#39;))</code>：重新设置索引，返回一个新的<code>DataFrame</code>， 设置的索引和原索引相同的部分，则使用原<code>DataFrame</code>的数据； 设置的索引和原索引不同的部分，则用<code>NaN</code>补齐不足的数据</p><p><em><strong>4&gt;</strong></em> <code>df.set_index(&#39;W&#39;)</code>：将某一列作为索引，返回一个新的<code>DataFrame</code>， 默认会删除作为索引的列，可设置<code>drop=False</code>保留该列，如：<code>df.set_index(&#39;W&#39;, drop=False)</code></p><p><em><strong>5&gt;</strong></em> <code>df.index.unique()</code>：获取<code>index</code>的唯一值，去除重复的<code>indx</code></p><p><em><strong>6&gt;</strong></em> <code>len(df.index)</code>：获取<code>index</code>的长度</p><p><em><strong>7&gt;</strong></em> <code>list(df.index)</code>：将<code>index</code>转换成列表</p><h3 id="复合索引" tabindex="-1"><a class="header-anchor" href="#复合索引" aria-hidden="true">#</a> 复合索引</h3><p>对于复合索引，可以使用<code>swaplevel()</code>方法交换索引的位置</p><ul><li><p><strong>Series的复合索引取值</strong></p><p>通过<code>Series</code>的复合索引取值，直接在<code>[]</code>写索引就可以了</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&quot;hjklmno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
s1 <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># 拥有复合索引的Series</span>
<span class="token comment"># 取值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;k&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;k&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
<span class="token comment"># 通过一个索引取值只能写前面的索引</span>
<span class="token comment"># print(s1[&#39;k&#39;])  # 报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 正常运行</span>
<span class="token comment"># 想要通过后面的索引取值，可以使用swaplevel()方法交换索引的位置</span>
s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token string">&#39;k&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 交换索引位置后正常运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>DataFrame的复合索引取值</strong></p><p>通过<code>DataFrame</code>的复合索引取值需要使用<code>df.loc[]</code>属性</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&quot;hjklmno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 取值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;j&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;j&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;j&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
<span class="token comment"># 同样可以使用swaplevel()方法交换索引的位置</span>
df2 <span class="token operator">=</span> df1<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;j&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="pandas的时间序列" tabindex="-1"><a class="header-anchor" href="#pandas的时间序列" aria-hidden="true">#</a> pandas的时间序列</h2><h3 id="时间序列" tabindex="-1"><a class="header-anchor" href="#时间序列" aria-hidden="true">#</a> 时间序列</h3><ul><li><p><strong>生成一段时间范围</strong></p><p>语法：<code>pd.date_range(start=None, end=None, periods=None, freq=&#39;D&#39;)</code></p><p><code>start</code>参数表示开始日期</p><p><code>end</code>参数表示结束日期</p><p><code>periods</code>参数表示生成的个数，<code>periods</code>和<code>end</code>同时只用一个，否则报错</p><p><code>freq</code>参数表示时间的频率间隔，天、月、小时等，可选内容如下：</p><img src="`+u+`" alt="date_range间隔符号" style="zoom:30%;"></li><li><p><strong>将字符串转化为时间序列</strong></p><p>语法：<code>pd.to_datetime(df[&quot;timeStamp&quot;], format=&quot;&quot;)</code></p><p><code>format</code>参数表示采用何种方式对字符串进行格式化，很少使用，一般只有在字符串不规范，无法被识别时才进行设置</p><p><code>pd.DatetimeIndex(time_value)</code>：把日期格式转换为字典格式</p></li><li><p><strong>将多个字段组合成时间序列</strong></p><p>可以使用<code>pd.PeriodIndex()</code>方法将多个字段的内容组合成一个时间序列</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 把分开的多个字段组合成一个时间序列，并添加到df中</span>
period <span class="token operator">=</span> pd<span class="token punctuation">.</span>PeriodIndex<span class="token punctuation">(</span>year<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;year&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> month<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> day<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;day&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hour<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;hour&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;datetime&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> period
<span class="token comment"># 把datetime设置为df的索引</span>
df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">&#39;datetime&#39;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="pandas重采样" tabindex="-1"><a class="header-anchor" href="#pandas重采样" aria-hidden="true">#</a> pandas重采样</h3><p><strong>重采样</strong>：指的是将时间序列从一个频率转化为另一个频率进行处理的过程，将高频率数据转化为低频率数据为<em><strong>降采样</strong></em>，低频率转化为高频率为<em><strong>升采样</strong></em></p><p>pandas提供了一个<code>df.resample()</code>方法来实现频率转化，示例如下：</p><img src="`+l+'" alt="pandas重采样" style="zoom:50%;">',108),k=[r];function m(g,v){return s(),a("div",null,k)}const y=n(d,[["render",m],["__file","03_pandas模块.html.vue"]]);export{y as default};
